{
  "docs": [
    {
      "comment": "/**\n     * Find a `ConfigurationOptimizer` sub-class that matches the given options best.\n     *\n     * @param  {object} options Options to look for while searching a matching configuration optimizer.\n     * @param  {number} options.deviceAddress The VBus address of the controller.\n     * @param  {string} options.version The version of the controller.\n     * @param  {Customizer} options.customizer A `Customizer` instance to query additional information with.\n     * @return {Promise} A Promise that resolves to the best matching optimizer result or `null` if no match was found.\n     */",
      "meta": {
        "range": [
          2101,
          2781
        ],
        "filename": "configuration-optimizer-factory.js",
        "lineno": 61,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100002146",
          "name": "matchOptimizer",
          "type": "FunctionExpression"
        },
        "vars": {
          "options": "ConfigurationOptimizerFactory.matchOptimizer~options",
          "result": "ConfigurationOptimizerFactory.matchOptimizer~result",
          "cache": "ConfigurationOptimizerFactory.matchOptimizer~cache",
          "Optimizer": "ConfigurationOptimizerFactory.matchOptimizer~Optimizer",
          "refResult": "ConfigurationOptimizerFactory.matchOptimizer~refResult"
        }
      },
      "description": "Find a `ConfigurationOptimizer` sub-class that matches the given options best.",
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Options to look for while searching a matching configuration optimizer.",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the controller.",
          "name": "options.deviceAddress"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The version of the controller.",
          "name": "options.version"
        },
        {
          "type": {
            "names": [
              "Customizer"
            ]
          },
          "description": "A `Customizer` instance to query additional information with.",
          "name": "options.customizer"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves to the best matching optimizer result or `null` if no match was found."
        }
      ],
      "name": "matchOptimizer",
      "longname": "ConfigurationOptimizerFactory.matchOptimizer",
      "kind": "function",
      "memberof": "ConfigurationOptimizerFactory",
      "scope": "static",
      "___id": "T000002R000226",
      "___s": true
    },
    {
      "comment": "/**\n     * Find and create an instance of a `ConfigurationOptimizer` sub-class that matches the given options best.\n     *\n     * @param  {object} options See {@link ConfigurationOptimizerFactory.matchOptimizer} for details.\n     * @return {Promise} A promise that resolves to the `ConfigurationOptimizer` instance or `null` if no matching optimizer was found.\n     */",
      "meta": {
        "range": [
          3161,
          3474
        ],
        "filename": "configuration-optimizer-factory.js",
        "lineno": 96,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100002224",
          "name": "createOptimizer",
          "type": "FunctionExpression"
        },
        "vars": {
          "result": "ConfigurationOptimizerFactory.createOptimizer~result",
          "optimizer": "ConfigurationOptimizerFactory.createOptimizer~optimizer"
        }
      },
      "description": "Find and create an instance of a `ConfigurationOptimizer` sub-class that matches the given options best.",
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "See {@link ConfigurationOptimizerFactory.matchOptimizer} for details.",
          "name": "options"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A promise that resolves to the `ConfigurationOptimizer` instance or `null` if no matching optimizer was found."
        }
      ],
      "name": "createOptimizer",
      "longname": "ConfigurationOptimizerFactory.createOptimizer",
      "kind": "function",
      "memberof": "ConfigurationOptimizerFactory",
      "scope": "static",
      "___id": "T000002R000238",
      "___s": true
    },
    {
      "comment": "/**\n     * Get the configuration optimizer for the given device (identified by its address).\n     *\n     * @param {number} deviceAddress VBus address of the device\n     * @returns {Promise} A Promise that resolvs to the optimizer for the given device or `null` if no optimizer was found.\n     */",
      "meta": {
        "range": [
          3781,
          3936
        ],
        "filename": "configuration-optimizer-factory.js",
        "lineno": 114,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100002260",
          "name": "createOptimizerByDeviceAddress",
          "type": "FunctionExpression"
        }
      },
      "description": "Get the configuration optimizer for the given device (identified by its address).",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "VBus address of the device",
          "name": "deviceAddress"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolvs to the optimizer for the given device or `null` if no optimizer was found."
        }
      ],
      "name": "createOptimizerByDeviceAddress",
      "longname": "ConfigurationOptimizerFactory.createOptimizerByDeviceAddress",
      "kind": "function",
      "memberof": "ConfigurationOptimizerFactory",
      "scope": "static",
      "___id": "T000002R000243",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef ConfigurationValue\n * @type {object}\n * @property {String} valueId Value ID\n * @property {number} valueIndex Value Index\n * @property {number} value Value\n * @property {number} priority Priority (higher numbers mean higher priority)\n * @property {boolean} pending Indicates that this value has to be tranceived.\n * @property {boolean} transceived Indicates that this value has been tranceived.\n */",
      "meta": {
        "filename": "configuration-optimizer.js",
        "lineno": 6,
        "columnno": 0,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {}
      },
      "kind": "typedef",
      "name": "ConfigurationValue",
      "type": {
        "names": [
          "object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Value ID",
          "name": "valueId"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Value Index",
          "name": "valueIndex"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Value",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Priority (higher numbers mean higher priority)",
          "name": "priority"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Indicates that this value has to be tranceived.",
          "name": "pending"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Indicates that this value has been tranceived.",
          "name": "transceived"
        }
      ],
      "longname": "ConfigurationValue",
      "scope": "global",
      "___id": "T000002R000247",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef Configuration\n * @type {ConfigurationValue[]}\n */",
      "meta": {
        "filename": "configuration-optimizer.js",
        "lineno": 18,
        "columnno": 0,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {}
      },
      "kind": "typedef",
      "name": "Configuration",
      "type": {
        "names": [
          "Array.<ConfigurationValue>"
        ]
      },
      "longname": "Configuration",
      "scope": "global",
      "___id": "T000002R000248",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts the configurations provided into an array of {@see ConfigurationValue} objects.\n     * The provided configurations can be either an array of partially initialized ConfigurationValue\n     * objects or an object mapping value IDs as keys to values.\n     * If no configuration is given a complete configuration set is returned.\n     *\n     * @param {array|object} configs... Configurations to complete.\n     * @returns {Promise} A Promise that resolves to the completed array of values.\n     */",
      "meta": {
        "range": [
          1131,
          1229
        ],
        "filename": "configuration-optimizer.js",
        "lineno": 36,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100002287",
          "name": "ConfigurationOptimizer#completeConfiguration",
          "type": "MethodDefinition",
          "paramnames": [
            "config"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Converts the configurations provided into an array of {@see ConfigurationValue} objects.\nThe provided configurations can be either an array of partially initialized ConfigurationValue\nobjects or an object mapping value IDs as keys to values.\nIf no configuration is given a complete configuration set is returned.",
      "params": [
        {
          "type": {
            "names": [
              "array",
              "object"
            ]
          },
          "description": "Configurations to complete.",
          "name": "configs..."
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves to the completed array of values."
        }
      ],
      "name": "completeConfiguration",
      "longname": "ConfigurationOptimizer#completeConfiguration",
      "kind": "function",
      "memberof": "ConfigurationOptimizer",
      "scope": "instance",
      "___id": "T000002R000250",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the optimized array of values based on what values are already loaded.\n     *\n     * @param {array} config The array of values that has already been loaded.\n     * @returns {Promise} A Promise that resolves to the array of values to load next.\n     */",
      "meta": {
        "range": [
          1507,
          1609
        ],
        "filename": "configuration-optimizer.js",
        "lineno": 46,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100002296",
          "name": "ConfigurationOptimizer#optimizeLoadConfiguration",
          "type": "MethodDefinition",
          "paramnames": [
            "config"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Gets the optimized array of values based on what values are already loaded.",
      "params": [
        {
          "type": {
            "names": [
              "array"
            ]
          },
          "description": "The array of values that has already been loaded.",
          "name": "config"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves to the array of values to load next."
        }
      ],
      "name": "optimizeLoadConfiguration",
      "longname": "ConfigurationOptimizer#optimizeLoadConfiguration",
      "kind": "function",
      "memberof": "ConfigurationOptimizer",
      "scope": "instance",
      "___id": "T000002R000251",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the optimzed array of values to save to the controller.\n     *\n     * @param {array} newConfig The array of values to transfer.\n     * @param {array} oldConfig The array of values that are assumed to be currently stored in the device.\n     * @returns {Promise} A Promise that resolves to the array of values to save.\n     */",
      "meta": {
        "range": [
          1960,
          2076
        ],
        "filename": "configuration-optimizer.js",
        "lineno": 57,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100002305",
          "name": "ConfigurationOptimizer#optimizeSaveConfiguration",
          "type": "MethodDefinition",
          "paramnames": [
            "newConfig",
            "oldConfig"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Gets the optimzed array of values to save to the controller.",
      "params": [
        {
          "type": {
            "names": [
              "array"
            ]
          },
          "description": "The array of values to transfer.",
          "name": "newConfig"
        },
        {
          "type": {
            "names": [
              "array"
            ]
          },
          "description": "The array of values that are assumed to be currently stored in the device.",
          "name": "oldConfig"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves to the array of values to save."
        }
      ],
      "name": "optimizeSaveConfiguration",
      "longname": "ConfigurationOptimizer#optimizeSaveConfiguration",
      "kind": "function",
      "memberof": "ConfigurationOptimizer",
      "scope": "instance",
      "___id": "T000002R000252",
      "___s": true
    },
    {
      "comment": "/**\n     * Get the array of `ConfigurationValue` objects to set the current date / time to the controller.\n     *\n     * @param  {string} timezone Timezone the controller is in\n     * @return {Promise} A Promise that resolves to the array of values to set the clock.\n     */",
      "meta": {
        "range": [
          2361,
          2466
        ],
        "filename": "configuration-optimizer.js",
        "lineno": 67,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100002315",
          "name": "ConfigurationOptimizer#generateClockConfiguration",
          "type": "MethodDefinition",
          "paramnames": [
            "timezone"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get the array of `ConfigurationValue` objects to set the current date / time to the controller.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Timezone the controller is in",
          "name": "timezone"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves to the array of values to set the clock."
        }
      ],
      "name": "generateClockConfiguration",
      "longname": "ConfigurationOptimizer#generateClockConfiguration",
      "kind": "function",
      "memberof": "ConfigurationOptimizer",
      "scope": "instance",
      "___id": "T000002R000253",
      "___s": true
    },
    {
      "comment": "/**\n     * Get an array of possible options for calling this `ConfigurationOptimizer`'s constructor.\n     *\n     * @return {Promise} A promise that resolves to an array of constructor options.\n     */",
      "meta": {
        "range": [
          2677,
          2883
        ],
        "filename": "configuration-optimizer.js",
        "lineno": 76,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100002324",
          "name": "ConfigurationOptimizer.getOptimizerOptions",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Get an array of possible options for calling this `ConfigurationOptimizer`'s constructor.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A promise that resolves to an array of constructor options."
        }
      ],
      "name": "getOptimizerOptions",
      "longname": "ConfigurationOptimizer.getOptimizerOptions",
      "kind": "function",
      "memberof": "ConfigurationOptimizer",
      "scope": "static",
      "params": [],
      "async": true,
      "___id": "T000002R000254",
      "___s": true
    },
    {
      "comment": "/**\n     * Find settings for this `ConfigurationOptimizer`'s constructor that matches the given options best.\n     *\n     * @param  {object} options Options to look for while searching a matching configuration optimizer.\n     * @param  {string} options.id The identifier for the `ConfigurationOptimizer`.\n     * @param  {number} options.deviceAddress The VBus address of the controller.\n     * @param  {string} options.version The version of the controller.\n     * @param  {Customizer} options.customizer A `Customizer` instance to query additional information with.\n     * @return {Promise} A Promise that resolves to the best matching optimizer result or `null` if no match was found.\n     */",
      "meta": {
        "range": [
          3588,
          3973
        ],
        "filename": "configuration-optimizer.js",
        "lineno": 94,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100002343",
          "name": "ConfigurationOptimizer.matchOptimizer",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Find settings for this `ConfigurationOptimizer`'s constructor that matches the given options best.",
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Options to look for while searching a matching configuration optimizer.",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The identifier for the `ConfigurationOptimizer`.",
          "name": "options.id"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the controller.",
          "name": "options.deviceAddress"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The version of the controller.",
          "name": "options.version"
        },
        {
          "type": {
            "names": [
              "Customizer"
            ]
          },
          "description": "A `Customizer` instance to query additional information with.",
          "name": "options.customizer"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves to the best matching optimizer result or `null` if no match was found."
        }
      ],
      "name": "matchOptimizer",
      "longname": "ConfigurationOptimizer.matchOptimizer",
      "kind": "function",
      "memberof": "ConfigurationOptimizer",
      "scope": "static",
      "async": true,
      "___id": "T000002R000255",
      "___s": true
    },
    {
      "comment": "/**\n     * Constructs a new ConnectionCustomizer instance and optionally initializes its\n     * members with the given values.\n     *\n     * @constructs\n     * @augments Customizer\n     * @param {object} [options] Initialization values for this instance's members\n     * @param {number} [options.connection] {@link ConnectionCustomizer#connection}\n     * @param {number} [options.maxRounds] {@link ConnectionCustomizer#maxRounds}\n     * @param {number} [options.triesPerValue] {@link ConnectionCustomizer#triesPerValue}\n     * @param {number} [options.timeoutPerValue] {@link ConnectionCustomizer#timeoutPerValue}\n     * @param {number} [options.masterTimeout] {@link ConnectionCustomizer#masterTimeout}\n     *\n     * @classdesc\n     * A ConnectionCustomizer uses an established connection to a device\n     * to transfer sets of configuration values over it.\n     */",
      "meta": {
        "range": [
          1222,
          1328
        ],
        "filename": "connection-customizer.js",
        "lineno": 39,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100661998",
          "name": "ConnectionCustomizer",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Constructs a new ConnectionCustomizer instance and optionally initializes its\nmembers with the given values.",
      "alias": "ConnectionCustomizer",
      "kind": "class",
      "augments": [
        "Customizer"
      ],
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "optional": true,
          "description": "Initialization values for this instance's members",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "{@link ConnectionCustomizer#connection}",
          "name": "options.connection"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "{@link ConnectionCustomizer#maxRounds}",
          "name": "options.maxRounds"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "{@link ConnectionCustomizer#triesPerValue}",
          "name": "options.triesPerValue"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "{@link ConnectionCustomizer#timeoutPerValue}",
          "name": "options.timeoutPerValue"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "{@link ConnectionCustomizer#masterTimeout}",
          "name": "options.masterTimeout"
        }
      ],
      "classdesc": "A ConnectionCustomizer uses an established connection to a device\nto transfer sets of configuration values over it.",
      "name": "ConnectionCustomizer",
      "longname": "ConnectionCustomizer",
      "scope": "global",
      "___id": "T000002R297031",
      "___s": true
    },
    {
      "comment": "/**\n     * Load a set of configuration values from a device.\n     *\n     * See {@link Customizer#loadConfiguration} for details.\n     */",
      "meta": {
        "range": [
          1475,
          2156
        ],
        "filename": "connection-customizer.js",
        "lineno": 50,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100662019",
          "name": "ConnectionCustomizer#_loadConfiguration",
          "type": "MethodDefinition",
          "paramnames": [
            "configuration",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Load a set of configuration values from a device.\n\nSee {@link Customizer#loadConfiguration} for details.",
      "name": "_loadConfiguration",
      "longname": "ConnectionCustomizer#_loadConfiguration",
      "kind": "function",
      "memberof": "ConnectionCustomizer",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R297032",
      "___s": true
    },
    {
      "comment": "/**\n     * Save a set of configuration values to a device.\n     *\n     * See {@link Customizer#saveConfiguration} for details.\n     */",
      "meta": {
        "range": [
          2301,
          3277
        ],
        "filename": "connection-customizer.js",
        "lineno": 79,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100662088",
          "name": "ConnectionCustomizer#_saveConfiguration",
          "type": "MethodDefinition",
          "paramnames": [
            "newConfiguration",
            "oldConfigurstion",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Save a set of configuration values to a device.\n\nSee {@link Customizer#saveConfiguration} for details.",
      "name": "_saveConfiguration",
      "longname": "ConnectionCustomizer#_saveConfiguration",
      "kind": "function",
      "memberof": "ConnectionCustomizer",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R297037",
      "___s": true
    },
    {
      "comment": "/**\n     * Transceives a controller configuration set, handling timeouts, retries etc.\n     *\n     * @param {object} options Options\n     * @param {number} [options.maxRounds] {@link ConnectionCustomizer#maxRounds}\n     * @param {number} [options.triesPerValue] {@link ConnectionCustomizer#triesPerValue}\n     * @param {number} [options.timeoutPerValue] {@link ConnectionCustomizer#timeoutPerValue}\n     * @param {number} [options.masterTimeout] {@link ConnectionCustomizer#masterTimeout}\n     * @param {string} options.action Action to perform, can be `'get'` or `'set'`.\n     * @param {object} [options.actionOptions] Options object to forward to the action to perform.\n     * @param {function} [options.reportProgress] Callback to inform about progress.\n     * @param {function} [options.checkCanceled] Callback to check whether the operation should be canceled.\n     * @param {function} optimizerCallback Callback to optimize configuration between rounds.\n     * @return {object} Promise that resolves to the configuration or `null` on timeout.\n     */",
      "meta": {
        "range": [
          4344,
          7797
        ],
        "filename": "connection-customizer.js",
        "lineno": 125,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100662176",
          "name": "ConnectionCustomizer#transceiveConfiguration",
          "type": "MethodDefinition",
          "paramnames": [
            "options",
            "optimizerCallback"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Transceives a controller configuration set, handling timeouts, retries etc.",
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "{@link ConnectionCustomizer#maxRounds}",
          "name": "options.maxRounds"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "{@link ConnectionCustomizer#triesPerValue}",
          "name": "options.triesPerValue"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "{@link ConnectionCustomizer#timeoutPerValue}",
          "name": "options.timeoutPerValue"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "{@link ConnectionCustomizer#masterTimeout}",
          "name": "options.masterTimeout"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Action to perform, can be `'get'` or `'set'`.",
          "name": "options.action"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "optional": true,
          "description": "Options object to forward to the action to perform.",
          "name": "options.actionOptions"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "Callback to inform about progress.",
          "name": "options.reportProgress"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "Callback to check whether the operation should be canceled.",
          "name": "options.checkCanceled"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Callback to optimize configuration between rounds.",
          "name": "optimizerCallback"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Promise that resolves to the configuration or `null` on timeout."
        }
      ],
      "name": "transceiveConfiguration",
      "longname": "ConnectionCustomizer#transceiveConfiguration",
      "kind": "function",
      "memberof": "ConnectionCustomizer",
      "scope": "instance",
      "async": true,
      "___id": "T000002R297044",
      "___s": true
    },
    {
      "comment": "/**\n     * Transceive a controller value over this connection, handling\n     * timeouts, retries etc.\n     *\n     * @param {object|number} valueInfoOrIndex Value info object or value index\n     * @param {number} valueInfo.valueIndex Value index\n     * @param {number} valueInfo.valueIdHash Value ID hash\n     * @param {number} value Value\n     * @param {object} options Options\n     * @param {number} options.triesPerValue {@link ConnectionCustomizer#triesPerValue}\n     * @param {number} options.timeoutPerValue {@link ConnectionCustomizer#timeoutPerValue}\n     * @param {number} options.masterTimeout {@link ConnectionCustomizer#masterTimeout}\n     * @param {string} options.action Action to perform, can be `'get'` or `'set'`.\n     * @param {object} [options.actionOptions] Options object to forward to the action to perform.\n     * @param {function} [options.reportProgress] Callback to inform about progress.\n     * @param {function} [options.checkCanceled] Callback to check whether the operation should be canceled.\n     * @param {object} state State to share between multiple calls to this method.\n     * @returns {object} Promise that resolves with the datagram received or `null` on timeout.\n     */",
      "meta": {
        "range": [
          9017,
          14812
        ],
        "filename": "connection-customizer.js",
        "lineno": 255,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100662508",
          "name": "ConnectionCustomizer#transceiveValue",
          "type": "MethodDefinition",
          "paramnames": [
            "valueInfo",
            "value",
            "options",
            "state"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Transceive a controller value over this connection, handling\ntimeouts, retries etc.",
      "params": [
        {
          "type": {
            "names": [
              "object",
              "number"
            ]
          },
          "description": "Value info object or value index",
          "name": "valueInfoOrIndex"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Value index",
          "name": "valueInfo.valueIndex"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Value ID hash",
          "name": "valueInfo.valueIdHash"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Value",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Options",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "{@link ConnectionCustomizer#triesPerValue}",
          "name": "options.triesPerValue"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "{@link ConnectionCustomizer#timeoutPerValue}",
          "name": "options.timeoutPerValue"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "{@link ConnectionCustomizer#masterTimeout}",
          "name": "options.masterTimeout"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Action to perform, can be `'get'` or `'set'`.",
          "name": "options.action"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "optional": true,
          "description": "Options object to forward to the action to perform.",
          "name": "options.actionOptions"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "Callback to inform about progress.",
          "name": "options.reportProgress"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "Callback to check whether the operation should be canceled.",
          "name": "options.checkCanceled"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "State to share between multiple calls to this method.",
          "name": "state"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Promise that resolves with the datagram received or `null` on timeout."
        }
      ],
      "name": "transceiveValue",
      "longname": "ConnectionCustomizer#transceiveValue",
      "kind": "function",
      "memberof": "ConnectionCustomizer",
      "scope": "instance",
      "async": true,
      "___id": "T000002R297089",
      "___s": true
    },
    {
      "comment": "/**\n     * The connection to use for transfer of the configuration values.\n     * @type {Connection}\n     */",
      "meta": {
        "range": [
          15028,
          15044
        ],
        "filename": "connection-customizer.js",
        "lineno": 437,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100663105",
          "name": "connection",
          "type": "Literal",
          "value": null
        }
      },
      "description": "The connection to use for transfer of the configuration values.",
      "type": {
        "names": [
          "Connection"
        ]
      },
      "name": "connection",
      "longname": "ConnectionCustomizer#connection",
      "kind": "member",
      "memberof": "ConnectionCustomizer",
      "scope": "instance",
      "___id": "T000002R297140",
      "___s": true
    },
    {
      "comment": "/**\n     * Maximum number of optimization rounds for {@link transceiveConfiguration}.\n     * @type {number}\n     * @default 10\n     */",
      "meta": {
        "range": [
          15190,
          15203
        ],
        "filename": "connection-customizer.js",
        "lineno": 444,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100663107",
          "name": "maxRounds",
          "type": "Literal",
          "value": 10
        }
      },
      "description": "Maximum number of optimization rounds for {@link transceiveConfiguration}.",
      "type": {
        "names": [
          "number"
        ]
      },
      "defaultvalue": "10",
      "name": "maxRounds",
      "longname": "ConnectionCustomizer#maxRounds",
      "kind": "member",
      "memberof": "ConnectionCustomizer",
      "scope": "instance",
      "___id": "T000002R297141",
      "___s": true
    },
    {
      "comment": "/**\n     * Amount of retries to transceive one value.\n     * Between two tries the VBus is released and then re-acquired.\n     * @type {number}\n     * @default 2\n     */",
      "meta": {
        "range": [
          15384,
          15400
        ],
        "filename": "connection-customizer.js",
        "lineno": 452,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100663109",
          "name": "triesPerValue",
          "type": "Literal",
          "value": 2
        }
      },
      "description": "Amount of retries to transceive one value.\nBetween two tries the VBus is released and then re-acquired.",
      "type": {
        "names": [
          "number"
        ]
      },
      "defaultvalue": "2",
      "name": "triesPerValue",
      "longname": "ConnectionCustomizer#triesPerValue",
      "kind": "member",
      "memberof": "ConnectionCustomizer",
      "scope": "instance",
      "___id": "T000002R297142",
      "___s": true
    },
    {
      "comment": "/**\n     * Timeout in milliseconds after which the transceive times out.\n     * @type {number}\n     * @default 30000\n     */",
      "meta": {
        "range": [
          15536,
          15558
        ],
        "filename": "connection-customizer.js",
        "lineno": 459,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100663111",
          "name": "timeoutPerValue",
          "type": "Literal",
          "value": 30000
        }
      },
      "description": "Timeout in milliseconds after which the transceive times out.",
      "type": {
        "names": [
          "number"
        ]
      },
      "defaultvalue": "30000",
      "name": "timeoutPerValue",
      "longname": "ConnectionCustomizer#timeoutPerValue",
      "kind": "member",
      "memberof": "ConnectionCustomizer",
      "scope": "instance",
      "___id": "T000002R297143",
      "___s": true
    },
    {
      "comment": "/**\n     * Interval in milliseconds in which\n     * the VBus master is contacted to reissue the VBus clearance.\n     * @type {number}\n     * @default 8000\n     */",
      "meta": {
        "range": [
          15732,
          15751
        ],
        "filename": "connection-customizer.js",
        "lineno": 467,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100663113",
          "name": "masterTimeout",
          "type": "Literal",
          "value": 8000
        }
      },
      "description": "Interval in milliseconds in which\nthe VBus master is contacted to reissue the VBus clearance.",
      "type": {
        "names": [
          "number"
        ]
      },
      "defaultvalue": "8000",
      "name": "masterTimeout",
      "longname": "ConnectionCustomizer#masterTimeout",
      "kind": "member",
      "memberof": "ConnectionCustomizer",
      "scope": "instance",
      "___id": "T000002R297144",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a new Connection instance and optionally initializes its member with the given values.\n     *\n     * @constructs\n     * @augments Duplex\n     * @param {object} options Initialization values for this instance's members\n     * @param {number} options.channel See {@link Connection#channel}\n     * @param {number} options.selfAddress See {@link Connection#selfAddress}\n     *\n     * @classdesc\n     * The `Connection` class is the abstract base class for all VBus live data connections.\n     * It extends the `Duplex` stream class. Any data written to a `Connection` instance is\n     * parsed according to the VBus Protocol Specification. Once a valid instance of one of the\n     * `Header` sub-classes (`Packet`, `Datagram` or `Telegram`)\n     * is created from the binary data stream, the respective event is emitted on\n     * the `Connection` instance.\n     *\n     * In addition to receiving incoming data the `Connection` class\n     * offers several helper methods e.g. to send data to the underlying VBus connection.\n     *\n     * The `Connection` class itself has no knowledge about the underlying VBus connection.\n     * Several sub-classes exist that know how to contact different types of VBus live streams.\n     *\n     * See `SerialConnection` or `TcpConnection` for concrete implementations.\n     *\n     * @example\n     * var connection = new SerialConnection({ path: '/dev/tty.usbserial' });\n     * connection.on('connectionState', function(state) {\n     *     console.log(state);\n     * });\n     * connection.on('packet', function(packet) {\n     *     console.log(packet.getId());\n     * });\n     * connection.on('datagram', function(datagram) {\n     *     console.log(datagram.getId());\n     * });\n     * connection.connect();\n     */",
      "meta": {
        "range": [
          2740,
          2839
        ],
        "filename": "connection.js",
        "lineno": 93,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100663242",
          "name": "Connection",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new Connection instance and optionally initializes its member with the given values.",
      "alias": "Connection",
      "kind": "class",
      "augments": [
        "Duplex"
      ],
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Initialization values for this instance's members",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "See {@link Connection#channel}",
          "name": "options.channel"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "See {@link Connection#selfAddress}",
          "name": "options.selfAddress"
        }
      ],
      "classdesc": "The `Connection` class is the abstract base class for all VBus live data connections.\nIt extends the `Duplex` stream class. Any data written to a `Connection` instance is\nparsed according to the VBus Protocol Specification. Once a valid instance of one of the\n`Header` sub-classes (`Packet`, `Datagram` or `Telegram`)\nis created from the binary data stream, the respective event is emitted on\nthe `Connection` instance.\n\nIn addition to receiving incoming data the `Connection` class\noffers several helper methods e.g. to send data to the underlying VBus connection.\n\nThe `Connection` class itself has no knowledge about the underlying VBus connection.\nSeveral sub-classes exist that know how to contact different types of VBus live streams.\n\nSee `SerialConnection` or `TcpConnection` for concrete implementations.",
      "examples": [
        "var connection = new SerialConnection({ path: '/dev/tty.usbserial' });\nconnection.on('connectionState', function(state) {\n    console.log(state);\n});\nconnection.on('packet', function(packet) {\n    console.log(packet.getId());\n});\nconnection.on('datagram', function(datagram) {\n    console.log(datagram.getId());\n});\nconnection.connect();"
      ],
      "name": "Connection",
      "longname": "Connection",
      "scope": "global",
      "___id": "T000002R297157",
      "___s": true
    },
    {
      "comment": "/**\n     * Establish underlying connection and start streaming data to the writable side\n     * of this `Connection` instance's stream.\n     *\n     * @abstract\n     * @returns {Promise} A promise that resolves once the connection has been established.\n     */",
      "meta": {
        "range": [
          3109,
          3192
        ],
        "filename": "connection.js",
        "lineno": 106,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100663262",
          "name": "Connection#connect",
          "type": "MethodDefinition",
          "paramnames": [
            "force"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Establish underlying connection and start streaming data to the writable side\nof this `Connection` instance's stream.",
      "virtual": true,
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A promise that resolves once the connection has been established."
        }
      ],
      "name": "connect",
      "longname": "Connection#connect",
      "kind": "function",
      "memberof": "Connection",
      "scope": "instance",
      "params": [],
      "___id": "T000002R297158",
      "___s": true
    },
    {
      "comment": "/**\n     * Diconnect this instance.\n     * @abstract\n     */",
      "meta": {
        "range": [
          3263,
          3344
        ],
        "filename": "connection.js",
        "lineno": 114,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100663271",
          "name": "Connection#disconnect",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Diconnect this instance.",
      "virtual": true,
      "name": "disconnect",
      "longname": "Connection#disconnect",
      "kind": "function",
      "memberof": "Connection",
      "scope": "instance",
      "params": [],
      "___id": "T000002R297159",
      "___s": true
    },
    {
      "comment": "/**\n     * Send raw data over this Connection instance.\n     *\n     * @param {Header|Buffer} data The Header or Buffer instance to be sent.\n     */",
      "meta": {
        "range": [
          9731,
          9869
        ],
        "filename": "connection.js",
        "lineno": 292,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100663959",
          "name": "Connection#send",
          "type": "MethodDefinition",
          "paramnames": [
            "data"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Send raw data over this Connection instance.",
      "params": [
        {
          "type": {
            "names": [
              "Header",
              "Buffer"
            ]
          },
          "description": "The Header or Buffer instance to be sent.",
          "name": "data"
        }
      ],
      "name": "send",
      "longname": "Connection#send",
      "kind": "function",
      "memberof": "Connection",
      "scope": "instance",
      "___id": "T000002R297214",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends and / or receives a VBus data.\n     *\n     * @param {Header|Buffer} txData The Header or Buffer instance to be sent.\n     * @param {object} options\n     * @param {number} options.timeout Timeout in milliseconds after which the `txData` will be sent again\n     * @param {number} options.timeoutIncr After each timeout retransmission the timeout value for the next try is increment by this value.\n     * @param {number} options.tries After this number of tries the returned Promise will resolve with value `null`.\n     * @param {?function} options.filterPacket Will be called when a Packet has been received with the Packet and a callback as arguments.\n     * @param {?function} options.filterDatagram Will be called when a Datagram has been received with the Datagram and a callback as arguments.\n     * @param {?function} options.filterTelegram Will be called when a Telegram has been received with the Telegram and a callback as arguments.\n     * @returns {Promise} A Promise that either resolves to the VBus data selected by one of the filter callbacks or `null` on timeout.\n     */",
      "meta": {
        "range": [
          10981,
          13504
        ],
        "filename": "connection.js",
        "lineno": 312,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100663982",
          "name": "Connection#transceive",
          "type": "MethodDefinition",
          "paramnames": [
            "txData",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Sends and / or receives a VBus data.",
      "params": [
        {
          "type": {
            "names": [
              "Header",
              "Buffer"
            ]
          },
          "description": "The Header or Buffer instance to be sent.",
          "name": "txData"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Timeout in milliseconds after which the `txData` will be sent again",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "After each timeout retransmission the timeout value for the next try is increment by this value.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "After this number of tries the returned Promise will resolve with value `null`.",
          "name": "options.tries"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "nullable": true,
          "description": "Will be called when a Packet has been received with the Packet and a callback as arguments.",
          "name": "options.filterPacket"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "nullable": true,
          "description": "Will be called when a Datagram has been received with the Datagram and a callback as arguments.",
          "name": "options.filterDatagram"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "nullable": true,
          "description": "Will be called when a Telegram has been received with the Telegram and a callback as arguments.",
          "name": "options.filterTelegram"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that either resolves to the VBus data selected by one of the filter callbacks or `null` on timeout."
        }
      ],
      "name": "transceive",
      "longname": "Connection#transceive",
      "kind": "function",
      "memberof": "Connection",
      "scope": "instance",
      "___id": "T000002R297216",
      "___s": true
    },
    {
      "comment": "/**\n     * Waits for a VBus bus offering datagram (Command 0x0500).\n     *\n     * Returns a Promise that resolves with the Datagram or `null` if the method timed out.\n     * @param {number} timeout=20000 Timeout in milliseconds\n     * @returns {Promise} A Promise that resolves to the bus offering Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          13851,
          14205
        ],
        "filename": "connection.js",
        "lineno": 411,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100664247",
          "name": "Connection#waitForFreeBus",
          "type": "MethodDefinition",
          "paramnames": [
            "timeout"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Waits for a VBus bus offering datagram (Command 0x0500).\n\nReturns a Promise that resolves with the Datagram or `null` if the method timed out.",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 20000,
          "description": "Timeout in milliseconds",
          "name": "timeout"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves to the bus offering Datagram or `null` on timeout."
        }
      ],
      "name": "waitForFreeBus",
      "longname": "Connection#waitForFreeBus",
      "kind": "function",
      "memberof": "Connection",
      "scope": "instance",
      "___id": "T000002R297242",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a VBus bus release datagram (Command 0x0600).\n     * Returns a Promise that resolves with the first VBus packet received after the release or `null` on timeout.\n     *\n     * @param {number} address The VBus address of the master device to give the bus ownership back to.\n     * @param {object} options\n     * @param {number} options.tries=2 Number of tries to give the bus ownership back.\n     * @param {number} options.timeout=1500 Time in milliseconds to wait between tries.\n     */",
      "meta": {
        "range": [
          14718,
          15246
        ],
        "filename": "connection.js",
        "lineno": 435,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100664290",
          "name": "Connection#releaseBus",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Sends a VBus bus release datagram (Command 0x0600).\nReturns a Promise that resolves with the first VBus packet received after the release or `null` on timeout.",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the master device to give the bus ownership back to.",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 2,
          "description": "Number of tries to give the bus ownership back.",
          "name": "options.tries"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 1500,
          "description": "Time in milliseconds to wait between tries.",
          "name": "options.timeout"
        }
      ],
      "name": "releaseBus",
      "longname": "Connection#releaseBus",
      "kind": "function",
      "memberof": "Connection",
      "scope": "instance",
      "___id": "T000002R297247",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to get a value from a device.\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param {number} address The VBus address of the device to get the value from\n     * @param {number} valueId The ID of the value to read from the device.\n     * @param {object} options\n     * @param {number} options.timeout=500 Time in milliseconds between tries.\n     * @param {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param {number} options.tries=3 Number of tries to get the value.\n     * @returns {Promise} A promise that resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          15965,
          17410
        ],
        "filename": "connection.js",
        "lineno": 468,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100664352",
          "name": "Connection#getValueById",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "valueId",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Sends a Datagram to get a value from a device.\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to get the value from",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The ID of the value to read from the device.",
          "name": "valueId"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to get the value.",
          "name": "options.tries"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A promise that resolves to the received Datagram or `null` on timeout."
        }
      ],
      "name": "getValueById",
      "longname": "Connection#getValueById",
      "kind": "function",
      "memberof": "Connection",
      "scope": "instance",
      "___id": "T000002R297258",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to set a value in a device.\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param {number} address The VBus address of the device to set the value in\n     * @param {number} valueId The ID of the value to write to the device.\n     * @param {number} value The value to write to the device.\n     * @param {object} options\n     * @param {number} options.timeout=500 Time in milliseconds between tries.\n     * @param {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param {number} options.tries=3 Number of tries to get the value.\n     * @returns {Promise} A promise that resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          18187,
          19331
        ],
        "filename": "connection.js",
        "lineno": 527,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100664504",
          "name": "Connection#setValueById",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "valueId",
            "value",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Sends a Datagram to set a value in a device.\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to set the value in",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The ID of the value to write to the device.",
          "name": "valueId"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The value to write to the device.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to get the value.",
          "name": "options.tries"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A promise that resolves to the received Datagram or `null` on timeout."
        }
      ],
      "name": "setValueById",
      "longname": "Connection#setValueById",
      "kind": "function",
      "memberof": "Connection",
      "scope": "instance",
      "___id": "T000002R297276",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to lookup a value ID hash in a device.\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param  {number} address The VBus address of the device to lookup the value in.\n     * @param  {number} valueId The ID of the value to lookup in the device.\n     * @param  {object} options\n     * @param  {number} options.timeout=500 Time in milliseconds between tries.\n     * @param {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param  {number} options.tries=3 Number of tries to lookup the value.\n     * @return {Promise} A Promise the resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          20067,
          21052
        ],
        "filename": "connection.js",
        "lineno": 577,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100664630",
          "name": "Connection#getValueIdHashById",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "valueId",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Sends a Datagram to lookup a value ID hash in a device.\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to lookup the value in.",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The ID of the value to lookup in the device.",
          "name": "valueId"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to lookup the value.",
          "name": "options.tries"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise the resolves to the received Datagram or `null` on timeout."
        }
      ],
      "name": "getValueIdHashById",
      "longname": "Connection#getValueIdHashById",
      "kind": "function",
      "memberof": "Connection",
      "scope": "instance",
      "___id": "T000002R297292",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to lookup a value ID in a device.\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param  {number} address The VBus address of the device to lookup the value in.\n     * @param  {number} valueIdHash The ID hash of the value to lookup in the device.\n     * @param  {object} options\n     * @param  {number} options.timeout=500 Time in milliseconds between tries.\n     * @param {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param  {number} options.tries=3 Number of tries to lookup the value.\n     * @return {Promise} A Promise the resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          21792,
          22833
        ],
        "filename": "connection.js",
        "lineno": 623,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100664730",
          "name": "Connection#getValueIdByIdHash",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "valueIdHash",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Sends a Datagram to lookup a value ID in a device.\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to lookup the value in.",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The ID hash of the value to lookup in the device.",
          "name": "valueIdHash"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to lookup the value.",
          "name": "options.tries"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise the resolves to the received Datagram or `null` on timeout."
        }
      ],
      "name": "getValueIdByIdHash",
      "longname": "Connection#getValueIdByIdHash",
      "kind": "function",
      "memberof": "Connection",
      "scope": "instance",
      "___id": "T000002R297305",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to lookup the controller's capabilities (part 1).\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param  {number} address The VBus address of the device to get the capabilities from.\n     * @param  {object} options\n     * @param  {number} options.timeout=500 Time in milliseconds between tries.\n     * @param  {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param  {number} options.tries=3 Number of tries to lookup the value.\n     * @return {Promise} A Promise the resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          23510,
          24400
        ],
        "filename": "connection.js",
        "lineno": 668,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100664836",
          "name": "Connection#getCaps1",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Sends a Datagram to lookup the controller's capabilities (part 1).\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to get the capabilities from.",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to lookup the value.",
          "name": "options.tries"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise the resolves to the received Datagram or `null` on timeout."
        }
      ],
      "name": "getCaps1",
      "longname": "Connection#getCaps1",
      "kind": "function",
      "memberof": "Connection",
      "scope": "instance",
      "___id": "T000002R297318",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to begin a bulk valke transaction.\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param  {number} address The VBus address of the device to begin the transaction on.\n     * @param  {number} txTimeout The number of seconds of inactivity after which the transaction is rolled back.\n     * @param  {object} options\n     * @param  {number} options.timeout=500 Time in milliseconds between tries.\n     * @param  {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param  {number} options.tries=3 Number of tries to lookup the value.\n     * @return {Promise} A Promise the resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          25175,
          26100
        ],
        "filename": "connection.js",
        "lineno": 712,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100664928",
          "name": "Connection#beginBulkValueTransaction",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "txTimeout",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Sends a Datagram to begin a bulk valke transaction.\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to begin the transaction on.",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number of seconds of inactivity after which the transaction is rolled back.",
          "name": "txTimeout"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to lookup the value.",
          "name": "options.tries"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise the resolves to the received Datagram or `null` on timeout."
        }
      ],
      "name": "beginBulkValueTransaction",
      "longname": "Connection#beginBulkValueTransaction",
      "kind": "function",
      "memberof": "Connection",
      "scope": "instance",
      "___id": "T000002R297331",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to commit a bulk valke transaction.\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param  {number} address The VBus address of the device to commit the transaction on.\n     * @param  {object} options\n     * @param  {number} options.timeout=500 Time in milliseconds between tries.\n     * @param  {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param  {number} options.tries=3 Number of tries to lookup the value.\n     * @return {Promise} A Promise the resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          26763,
          27670
        ],
        "filename": "connection.js",
        "lineno": 755,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665021",
          "name": "Connection#commitBulkValueTransaction",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Sends a Datagram to commit a bulk valke transaction.\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to commit the transaction on.",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to lookup the value.",
          "name": "options.tries"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise the resolves to the received Datagram or `null` on timeout."
        }
      ],
      "name": "commitBulkValueTransaction",
      "longname": "Connection#commitBulkValueTransaction",
      "kind": "function",
      "memberof": "Connection",
      "scope": "instance",
      "___id": "T000002R297344",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to rollback a bulk valke transaction.\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param  {number} address The VBus address of the device to perform the rollback on.\n     * @param  {object} options\n     * @param  {number} options.timeout=500 Time in milliseconds between tries.\n     * @param  {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param  {number} options.tries=3 Number of tries to lookup the value.\n     * @return {Promise} A Promise the resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          28333,
          29242
        ],
        "filename": "connection.js",
        "lineno": 798,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665113",
          "name": "Connection#rollbackBulkValueTransaction",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Sends a Datagram to rollback a bulk valke transaction.\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to perform the rollback on.",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to lookup the value.",
          "name": "options.tries"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise the resolves to the received Datagram or `null` on timeout."
        }
      ],
      "name": "rollbackBulkValueTransaction",
      "longname": "Connection#rollbackBulkValueTransaction",
      "kind": "function",
      "memberof": "Connection",
      "scope": "instance",
      "___id": "T000002R297357",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to set a value during a bulk value transaction.\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param  {number} address The VBus address of the device to set the value on.\n     * @param  {number} valueId The ID of the value to write to the device.\n     * @param  {number} value The value to write to the device.\n     * @param  {object} options\n     * @param  {number} options.timeout=500 Time in milliseconds between tries.\n     * @param  {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param  {number} options.tries=3 Number of tries to lookup the value.\n     * @return {Promise} A Promise the resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          30048,
          31145
        ],
        "filename": "connection.js",
        "lineno": 843,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665205",
          "name": "Connection#setBulkValueById",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "valueId",
            "value",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Sends a Datagram to set a value during a bulk value transaction.\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to set the value on.",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The ID of the value to write to the device.",
          "name": "valueId"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The value to write to the device.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to lookup the value.",
          "name": "options.tries"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise the resolves to the received Datagram or `null` on timeout."
        }
      ],
      "name": "setBulkValueById",
      "longname": "Connection#setBulkValueById",
      "kind": "function",
      "memberof": "Connection",
      "scope": "instance",
      "___id": "T000002R297370",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a promise that resolves when this Connection\n     * instance is connected and rejects if it is disconnected.\n     * If it is neither connected nor disconnected the promise\n     * will stay pending until one of the states is entered.\n     *\n     * @returns {Promise}\n     */",
      "meta": {
        "range": [
          33332,
          34263
        ],
        "filename": "connection.js",
        "lineno": 952,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665508",
          "name": "Connection#createConnectedPromise",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a promise that resolves when this Connection\ninstance is connected and rejects if it is disconnected.\nIf it is neither connected nor disconnected the promise\nwill stay pending until one of the states is entered.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "createConnectedPromise",
      "longname": "Connection#createConnectedPromise",
      "kind": "function",
      "memberof": "Connection",
      "scope": "instance",
      "params": [],
      "___id": "T000002R297409",
      "___s": true
    },
    {
      "comment": "/**\n     * Reference to this instance's DataSource.\n     * @type {DataSource}\n     */",
      "meta": {
        "range": [
          34437,
          34453
        ],
        "filename": "connection.js",
        "lineno": 989,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665601",
          "name": "dataSource",
          "type": "Literal",
          "value": null
        }
      },
      "description": "Reference to this instance's DataSource.",
      "type": {
        "names": [
          "DataSource"
        ]
      },
      "name": "dataSource",
      "longname": "Connection#dataSource",
      "kind": "member",
      "memberof": "Connection",
      "scope": "instance",
      "___id": "T000002R297413",
      "___s": true
    },
    {
      "comment": "/**\n     * The VBus channel that this connection is established to.\n     * All `Header` instances created by this `Connection` instance will be assigned\n     * this VBus channel.\n     * @type {number}\n     */",
      "meta": {
        "range": [
          34673,
          34683
        ],
        "filename": "connection.js",
        "lineno": 997,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665603",
          "name": "channel",
          "type": "Literal",
          "value": 0
        }
      },
      "description": "The VBus channel that this connection is established to.\nAll `Header` instances created by this `Connection` instance will be assigned\nthis VBus channel.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "channel",
      "longname": "Connection#channel",
      "kind": "member",
      "memberof": "Connection",
      "scope": "instance",
      "___id": "T000002R297414",
      "___s": true
    },
    {
      "comment": "/**\n     * The VBus address used for sending information over this connection.\n     * @type {number}\n     */",
      "meta": {
        "range": [
          34803,
          34822
        ],
        "filename": "connection.js",
        "lineno": 1003,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665605",
          "name": "selfAddress",
          "type": "Literal",
          "value": 32
        }
      },
      "description": "The VBus address used for sending information over this connection.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "selfAddress",
      "longname": "Connection#selfAddress",
      "kind": "member",
      "memberof": "Connection",
      "scope": "instance",
      "___id": "T000002R297415",
      "___s": true
    },
    {
      "comment": "/**\n     * The current connection state.\n     * @type {string}\n     */",
      "meta": {
        "range": [
          34904,
          34946
        ],
        "filename": "connection.js",
        "lineno": 1009,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665607",
          "name": "connectionState",
          "type": "MemberExpression",
          "value": "states.STATE_DISCONNECTED"
        }
      },
      "description": "The current connection state.",
      "type": {
        "names": [
          "string"
        ]
      },
      "name": "connectionState",
      "longname": "Connection#connectionState",
      "kind": "member",
      "memberof": "Connection",
      "scope": "instance",
      "___id": "T000002R297416",
      "___s": true
    },
    {
      "comment": "/**\n     * The internal receive buffer of this conneciton.\n     * @type {Buffer}\n     */",
      "meta": {
        "range": [
          35046,
          35060
        ],
        "filename": "connection.js",
        "lineno": 1015,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665611",
          "name": "rxBuffer",
          "type": "Literal",
          "value": null
        }
      },
      "description": "The internal receive buffer of this conneciton.",
      "type": {
        "names": [
          "Buffer"
        ]
      },
      "name": "rxBuffer",
      "longname": "Connection#rxBuffer",
      "kind": "member",
      "memberof": "Connection",
      "scope": "instance",
      "___id": "T000002R297417",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef RawData\n * @type {object}\n * @property {Number} channel VBus Channel number\n * @property {Date} startTimestamp Timestamp of the start of reception of this data\n * @property {Date} endTimestamp Timestamp of the end of reception of this data\n * @property {Buffer} buffer The VBus raw data buffer\n */",
      "meta": {
        "filename": "converter.js",
        "lineno": 24,
        "columnno": 0,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {}
      },
      "kind": "typedef",
      "name": "RawData",
      "type": {
        "names": [
          "object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "description": "VBus Channel number",
          "name": "channel"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "description": "Timestamp of the start of reception of this data",
          "name": "startTimestamp"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "description": "Timestamp of the end of reception of this data",
          "name": "endTimestamp"
        },
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "The VBus raw data buffer",
          "name": "buffer"
        }
      ],
      "longname": "RawData",
      "scope": "global",
      "___id": "T000002R297425",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a new Converter instance and optionally initializes its members with the given values.\n     *\n     * @constructs\n     * @augments Duplex\n     * @param {object} options Initialization values\n     * @param {boolean} options.objectMode See {@link Converter#objectMode}\n     *\n     * @classdesc\n     * Converter instances are streams that convert VBus models (Packet, Datagram and Telegram instances) and / or\n     * Headerset instances to another representation. Optionally some Converter sub-classes support parsing that\n     * representation back to the model instances. Converter sub-classes include VBusRecordingConverter (for\n     * parsing and generating according to the VBus Recording File Format) and TextConverter that creates\n     * character-separated text representations.\n     */",
      "meta": {
        "range": [
          1493,
          2110
        ],
        "filename": "converter.js",
        "lineno": 52,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665671",
          "name": "Converter",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new Converter instance and optionally initializes its members with the given values.",
      "alias": "Converter",
      "kind": "class",
      "augments": [
        "Duplex"
      ],
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Initialization values",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "See {@link Converter#objectMode}",
          "name": "options.objectMode"
        }
      ],
      "classdesc": "Converter instances are streams that convert VBus models (Packet, Datagram and Telegram instances) and / or\nHeaderset instances to another representation. Optionally some Converter sub-classes support parsing that\nrepresentation back to the model instances. Converter sub-classes include VBusRecordingConverter (for\nparsing and generating according to the VBus Recording File Format) and TextConverter that creates\ncharacter-separated text representations.",
      "name": "Converter",
      "longname": "Converter",
      "scope": "global",
      "___id": "T000002R297427",
      "___s": true
    },
    {
      "comment": "/**\n     * This method resets the converter. It should be used e.g. if the converter output switches between files (allows\n     * some Converter sub-classes to correctly write a header).\n     */",
      "meta": {
        "range": [
          2315,
          2345
        ],
        "filename": "converter.js",
        "lineno": 81,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665753",
          "name": "Converter#reset",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "This method resets the converter. It should be used e.g. if the converter output switches between files (allows\nsome Converter sub-classes to correctly write a header).",
      "name": "reset",
      "longname": "Converter#reset",
      "kind": "function",
      "memberof": "Converter",
      "scope": "instance",
      "params": [],
      "___id": "T000002R297433",
      "___s": true
    },
    {
      "comment": "/**\n     * This method signals that no additional VBus Header or HeaderSet models will\n     * be converted. It returns a promise that resolves when all data has been\n     * consumed.\n     *\n     * @return {Promise} A Promise that resolves when all data has been consumed.\n     */",
      "meta": {
        "range": [
          2635,
          2720
        ],
        "filename": "converter.js",
        "lineno": 92,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665757",
          "name": "Converter#finish",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "This method signals that no additional VBus Header or HeaderSet models will\nbe converted. It returns a promise that resolves when all data has been\nconsumed.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves when all data has been consumed."
        }
      ],
      "name": "finish",
      "longname": "Converter#finish",
      "kind": "function",
      "memberof": "Converter",
      "scope": "instance",
      "params": [],
      "async": true,
      "___id": "T000002R297434",
      "___s": true
    },
    {
      "comment": "/**\n     * This method queues a VBus raw data chunk for conversion.\n     * Not all Converter sub-classes support this method.\n     *\n     * @param {RawData} rawData The VBus raw data chunk to queue for conversion.\n     */",
      "meta": {
        "range": [
          2952,
          3138
        ],
        "filename": "converter.js",
        "lineno": 104,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665771",
          "name": "Converter#convertRawData",
          "type": "MethodDefinition",
          "paramnames": [
            "rawData"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "This method queues a VBus raw data chunk for conversion.\nNot all Converter sub-classes support this method.",
      "params": [
        {
          "type": {
            "names": [
              "RawData"
            ]
          },
          "description": "The VBus raw data chunk to queue for conversion.",
          "name": "rawData"
        }
      ],
      "name": "convertRawData",
      "longname": "Converter#convertRawData",
      "kind": "function",
      "memberof": "Converter",
      "scope": "instance",
      "___id": "T000002R297435",
      "___s": true
    },
    {
      "comment": "/**\n     * This method queues a comment for conversion.\n     * Not all Converter sub-classes support this method.\n     *\n     * @param {RawData} rawData The comment to queue for conversion.\n     */",
      "meta": {
        "range": [
          3346,
          3558
        ],
        "filename": "converter.js",
        "lineno": 118,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665792",
          "name": "Converter#convertComment",
          "type": "MethodDefinition",
          "paramnames": [
            "timestamp",
            "comment"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "This method queues a comment for conversion.\nNot all Converter sub-classes support this method.",
      "params": [
        {
          "type": {
            "names": [
              "RawData"
            ]
          },
          "description": "The comment to queue for conversion.",
          "name": "rawData"
        }
      ],
      "name": "convertComment",
      "longname": "Converter#convertComment",
      "kind": "function",
      "memberof": "Converter",
      "scope": "instance",
      "___id": "T000002R297436",
      "___s": true
    },
    {
      "comment": "/**\n     * This method queues a VBus Header model (Packet, Datagram or Telegram) for conversion.\n     * Not all Converter sub-classes support this method.\n     *\n     * @param {Header} header The Header to queue for conversion.\n     */",
      "meta": {
        "range": [
          3804,
          3987
        ],
        "filename": "converter.js",
        "lineno": 132,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665818",
          "name": "Converter#convertHeader",
          "type": "MethodDefinition",
          "paramnames": [
            "header"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "This method queues a VBus Header model (Packet, Datagram or Telegram) for conversion.\nNot all Converter sub-classes support this method.",
      "params": [
        {
          "type": {
            "names": [
              "Header"
            ]
          },
          "description": "The Header to queue for conversion.",
          "name": "header"
        }
      ],
      "name": "convertHeader",
      "longname": "Converter#convertHeader",
      "kind": "function",
      "memberof": "Converter",
      "scope": "instance",
      "___id": "T000002R297439",
      "___s": true
    },
    {
      "comment": "/**\n     * This method queues a VBus HeaderSet instance for conversion.\n     * Not all Converter sub-classes support this method.\n     *\n     * @param {HeaderSet} headerSet The HeaderSet to queue for conversion.\n     */",
      "meta": {
        "range": [
          4217,
          4409
        ],
        "filename": "converter.js",
        "lineno": 146,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665839",
          "name": "Converter#convertHeaderSet",
          "type": "MethodDefinition",
          "paramnames": [
            "headerSet"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "This method queues a VBus HeaderSet instance for conversion.\nNot all Converter sub-classes support this method.",
      "params": [
        {
          "type": {
            "names": [
              "HeaderSet"
            ]
          },
          "description": "The HeaderSet to queue for conversion.",
          "name": "headerSet"
        }
      ],
      "name": "convertHeaderSet",
      "longname": "Converter#convertHeaderSet",
      "kind": "function",
      "memberof": "Converter",
      "scope": "instance",
      "___id": "T000002R297440",
      "___s": true
    },
    {
      "comment": "/**\n     * Specifies whether the underlying stream operates in object mode.\n     * @type {boolean}\n     */",
      "meta": {
        "range": [
          5267,
          5284
        ],
        "filename": "converter.js",
        "lineno": 187,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665938",
          "name": "objectMode",
          "type": "Literal",
          "value": false
        }
      },
      "description": "Specifies whether the underlying stream operates in object mode.",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "name": "objectMode",
      "longname": "Converter#objectMode",
      "kind": "member",
      "memberof": "Converter",
      "scope": "instance",
      "___id": "T000002R297443",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a new Customizer instance and optionally initializes its members\n     * with the given values.\n     *\n     * @constructs\n     * @param {object} [options] Initialization values for this instance's members\n     * @param {string} [options.id] {@link Customizer#id}\n     * @param {string} [options.deviceAddress] {@link Customizer#deviceAddress}\n     * @param {string} [options.optimizer] {@link Customizer#optimizer}\n     *\n     * @classdesc\n     * A Customizer provides functionality to transfer a set of configuration\n     * values from or to a device.\n     */",
      "meta": {
        "range": [
          877,
          976
        ],
        "filename": "customizer.js",
        "lineno": 37,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665977",
          "name": "Customizer",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new Customizer instance and optionally initializes its members\nwith the given values.",
      "alias": "Customizer",
      "kind": "class",
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "optional": true,
          "description": "Initialization values for this instance's members",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "description": "{@link Customizer#id}",
          "name": "options.id"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "description": "{@link Customizer#deviceAddress}",
          "name": "options.deviceAddress"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "description": "{@link Customizer#optimizer}",
          "name": "options.optimizer"
        }
      ],
      "classdesc": "A Customizer provides functionality to transfer a set of configuration\nvalues from or to a device.",
      "name": "Customizer",
      "longname": "Customizer",
      "scope": "global",
      "___id": "T000002R297450",
      "___s": true
    },
    {
      "comment": "/**\n     * Load a set of configuration values from a device.\n     *\n     * If the `Customizer` has an `optimizer` set, the `configuration` parameter\n     * is passed to the optimizer's `completeConfiguration` method. Otherwise it must be an\n     * array of `ConfigurationValue` objects.\n     *\n     * If `options.optimize` is \"truthy\" the list of `ConfigurationValue` objects is passed\n     * into the optimizer's `optimizeLoadConfiguration` method to determine the minimal\n     * set of values to transfer. If `options.optimize` is \"falsy\" all of the\n     * `ConfigurationValue` objects will be loaded.\n     *\n     * @param {array} configuration The set of values to transfer.\n     * @param {object} options\n     * @returns {Promise} A Promise that resolves to the set of values transfered.\n     */",
      "meta": {
        "range": [
          1786,
          2065
        ],
        "filename": "customizer.js",
        "lineno": 59,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665997",
          "name": "Customizer#loadConfiguration",
          "type": "MethodDefinition",
          "paramnames": [
            "configuration",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Load a set of configuration values from a device.\n\nIf the `Customizer` has an `optimizer` set, the `configuration` parameter\nis passed to the optimizer's `completeConfiguration` method. Otherwise it must be an\narray of `ConfigurationValue` objects.\n\nIf `options.optimize` is \"truthy\" the list of `ConfigurationValue` objects is passed\ninto the optimizer's `optimizeLoadConfiguration` method to determine the minimal\nset of values to transfer. If `options.optimize` is \"falsy\" all of the\n`ConfigurationValue` objects will be loaded.",
      "params": [
        {
          "type": {
            "names": [
              "array"
            ]
          },
          "description": "The set of values to transfer.",
          "name": "configuration"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves to the set of values transfered."
        }
      ],
      "name": "loadConfiguration",
      "longname": "Customizer#loadConfiguration",
      "kind": "function",
      "memberof": "Customizer",
      "scope": "instance",
      "async": true,
      "___id": "T000002R297451",
      "___s": true
    },
    {
      "comment": "/**\n     * Save a set of configuration values to a device.\n     *\n     * If the `Customizer` has an `optimizer` set, the `newConfiguration` parameter\n     * is passed to the optimizer's `completeConfiguration` method. Otherwise it must be an\n     * array of `ConfigurationValue` objects.\n     *\n     * If a `oldConfiguration` parameter is given, the same procedure as for the\n     * `newConfiguration` is applied to it as well.\n     *\n     * If `options.optimize` is \"truthy\" the list of `ConfigurationValue` objects is passed\n     * into the optimizer's `optimizeLoadConfiguration` method to determine the minimal\n     * set of values to transfer. If `options.optimize` is \"falsy\" all of the\n     * `ConfigurationValue` objects will be loaded.\n     *\n     * @param {array} newConfiguration The set of values to transfer.\n     * @param {array} oldConfiguration The set of values to assume to be stored in the device.\n     * @param {object} options\n     * @returns {Promise} A Promise that resolves to the set of values transfered.\n     */",
      "meta": {
        "range": [
          3231,
          3685
        ],
        "filename": "customizer.js",
        "lineno": 93,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100666041",
          "name": "Customizer#saveConfiguration",
          "type": "MethodDefinition",
          "paramnames": [
            "newConfiguration",
            "oldConfiguration",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Save a set of configuration values to a device.\n\nIf the `Customizer` has an `optimizer` set, the `newConfiguration` parameter\nis passed to the optimizer's `completeConfiguration` method. Otherwise it must be an\narray of `ConfigurationValue` objects.\n\nIf a `oldConfiguration` parameter is given, the same procedure as for the\n`newConfiguration` is applied to it as well.\n\nIf `options.optimize` is \"truthy\" the list of `ConfigurationValue` objects is passed\ninto the optimizer's `optimizeLoadConfiguration` method to determine the minimal\nset of values to transfer. If `options.optimize` is \"falsy\" all of the\n`ConfigurationValue` objects will be loaded.",
      "params": [
        {
          "type": {
            "names": [
              "array"
            ]
          },
          "description": "The set of values to transfer.",
          "name": "newConfiguration"
        },
        {
          "type": {
            "names": [
              "array"
            ]
          },
          "description": "The set of values to assume to be stored in the device.",
          "name": "oldConfiguration"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves to the set of values transfered."
        }
      ],
      "name": "saveConfiguration",
      "longname": "Customizer#saveConfiguration",
      "kind": "function",
      "memberof": "Customizer",
      "scope": "instance",
      "async": true,
      "___id": "T000002R297456",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts the configuration provided into an array of {@see ConfigurationValue} objects.\n     * The provided configuration can be either an array of partially initialized ConfigurationValue\n     * objects or an object mapping value IDs as keys to values.\n     * If no configuration is given a complete configuration set is returned.\n     *\n     * @param {undefined|null|array|object} config Configuration to complete.\n     * @returns {Promise} A Promise that resolves to the completed array of values.\n     */",
      "meta": {
        "range": [
          4353,
          4557
        ],
        "filename": "customizer.js",
        "lineno": 120,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100666100",
          "name": "Customizer#_completeConfiguration",
          "type": "MethodDefinition",
          "paramnames": [
            "config"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Converts the configuration provided into an array of {@see ConfigurationValue} objects.\nThe provided configuration can be either an array of partially initialized ConfigurationValue\nobjects or an object mapping value IDs as keys to values.\nIf no configuration is given a complete configuration set is returned.",
      "params": [
        {
          "type": {
            "names": [
              "undefined",
              "null",
              "array",
              "object"
            ]
          },
          "description": "Configuration to complete.",
          "name": "config"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves to the completed array of values."
        }
      ],
      "name": "_completeConfiguration",
      "longname": "Customizer#_completeConfiguration",
      "kind": "function",
      "memberof": "Customizer",
      "scope": "instance",
      "___id": "T000002R297462",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the optimized array of values based on what values are already loaded.\n     *\n     * @param {array} config The array of values that has already been loaded.\n     * @returns {Promise} A Promise that resolves to the array of values to load next.\n     */",
      "meta": {
        "range": [
          4835,
          4942
        ],
        "filename": "customizer.js",
        "lineno": 134,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100666125",
          "name": "Customizer#_optimizeLoadConfiguration",
          "type": "MethodDefinition",
          "paramnames": [
            "config"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Gets the optimized array of values based on what values are already loaded.",
      "params": [
        {
          "type": {
            "names": [
              "array"
            ]
          },
          "description": "The array of values that has already been loaded.",
          "name": "config"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves to the array of values to load next."
        }
      ],
      "name": "_optimizeLoadConfiguration",
      "longname": "Customizer#_optimizeLoadConfiguration",
      "kind": "function",
      "memberof": "Customizer",
      "scope": "instance",
      "___id": "T000002R297463",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the optimzed array of values to save to the controller.\n     *\n     * @param {array} newConfig The array of values to transfer.\n     * @param {array} oldConfig The array of values that are assumed to be currently stored in the device.\n     * @returns {Promise} A Promise that resolves to the array of values to save.\n     */",
      "meta": {
        "range": [
          5293,
          5428
        ],
        "filename": "customizer.js",
        "lineno": 145,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100666138",
          "name": "Customizer#_optimizeSaveConfiguration",
          "type": "MethodDefinition",
          "paramnames": [
            "newConfig",
            "oldConfig"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Gets the optimzed array of values to save to the controller.",
      "params": [
        {
          "type": {
            "names": [
              "array"
            ]
          },
          "description": "The array of values to transfer.",
          "name": "newConfig"
        },
        {
          "type": {
            "names": [
              "array"
            ]
          },
          "description": "The array of values that are assumed to be currently stored in the device.",
          "name": "oldConfig"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves to the array of values to save."
        }
      ],
      "name": "_optimizeSaveConfiguration",
      "longname": "Customizer#_optimizeSaveConfiguration",
      "kind": "function",
      "memberof": "Customizer",
      "scope": "instance",
      "___id": "T000002R297464",
      "___s": true
    },
    {
      "comment": "/**\n     * An identifier for this customizer.\n     * @type {string}\n     */",
      "meta": {
        "range": [
          5592,
          5600
        ],
        "filename": "customizer.js",
        "lineno": 158,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100666162",
          "name": "id",
          "type": "Literal",
          "value": null
        }
      },
      "description": "An identifier for this customizer.",
      "type": {
        "names": [
          "string"
        ]
      },
      "name": "id",
      "longname": "Customizer#id",
      "kind": "member",
      "memberof": "Customizer",
      "scope": "instance",
      "___id": "T000002R297465",
      "___s": true
    },
    {
      "comment": "/**\n     * The VBus address of the device to customize.\n     * @type {number}\n     */",
      "meta": {
        "range": [
          5697,
          5713
        ],
        "filename": "customizer.js",
        "lineno": 164,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100666164",
          "name": "deviceAddress",
          "type": "Literal",
          "value": 0
        }
      },
      "description": "The VBus address of the device to customize.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "deviceAddress",
      "longname": "Customizer#deviceAddress",
      "kind": "member",
      "memberof": "Customizer",
      "scope": "instance",
      "___id": "T000002R297466",
      "___s": true
    },
    {
      "comment": "/**\n     * A configuration optimizer.\n     * @type {ConfigurationOptimizer}\n     */",
      "meta": {
        "range": [
          5808,
          5823
        ],
        "filename": "customizer.js",
        "lineno": 170,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100666166",
          "name": "optimizer",
          "type": "Literal",
          "value": null
        }
      },
      "description": "A configuration optimizer.",
      "type": {
        "names": [
          "ConfigurationOptimizer"
        ]
      },
      "name": "optimizer",
      "longname": "Customizer#optimizer",
      "kind": "member",
      "memberof": "Customizer",
      "scope": "instance",
      "___id": "T000002R297467",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a new Datagram instance and optionally initializes its members with the given values.\n     *\n     * @constructs\n     * @augments Header\n     * @param {object} options Initialization values for this instance's members\n     * @param {number} options.command {@link Datagram#command}\n     * @param {number} options.valueId {@link Datagram#valueId}\n     * @param {Buffer} options.value {@link Datagram#value}\n     * @see Header#constructor\n     *\n     * @classdesc\n     * The Datagram sub-class provides access to all properties and methods applicable for VBus version 2 datagrams.\n     * In addition to the packet header it may contain a command, a value ID and a value.\n     * The value ID is a device-specific reference to one of the values presented in the device's menu interface.\n     */",
      "meta": {
        "range": [
          1129,
          1235
        ],
        "filename": "datagram.js",
        "lineno": 40,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100666382",
          "name": "Datagram",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new Datagram instance and optionally initializes its members with the given values.",
      "alias": "Datagram",
      "kind": "class",
      "augments": [
        "Header"
      ],
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Initialization values for this instance's members",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "{@link Datagram#command}",
          "name": "options.command"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "{@link Datagram#valueId}",
          "name": "options.valueId"
        },
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "{@link Datagram#value}",
          "name": "options.value"
        }
      ],
      "see": [
        "Header#constructor"
      ],
      "classdesc": "The Datagram sub-class provides access to all properties and methods applicable for VBus version 2 datagrams.\nIn addition to the packet header it may contain a command, a value ID and a value.\nThe value ID is a device-specific reference to one of the values presented in the device's menu interface.",
      "name": "Datagram",
      "longname": "Datagram",
      "scope": "global",
      "___id": "T000002R297496",
      "___s": true
    },
    {
      "comment": "/**\n     * The command field of this VBus datagram. See the VBus Protocol Specification for details.\n     * @type {number}\n     */",
      "meta": {
        "range": [
          3537,
          3547
        ],
        "filename": "datagram.js",
        "lineno": 128,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100666737",
          "name": "command",
          "type": "Literal",
          "value": 0
        }
      },
      "description": "The command field of this VBus datagram. See the VBus Protocol Specification for details.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "command",
      "longname": "Datagram#command",
      "kind": "member",
      "memberof": "Datagram",
      "scope": "instance",
      "___id": "T000002R297524",
      "___s": true
    },
    {
      "comment": "/**\n     * The value ID field of this VBus datagram.\n     * @type {number}\n     */",
      "meta": {
        "range": [
          3641,
          3651
        ],
        "filename": "datagram.js",
        "lineno": 134,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100666739",
          "name": "valueId",
          "type": "Literal",
          "value": 0
        }
      },
      "description": "The value ID field of this VBus datagram.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "valueId",
      "longname": "Datagram#valueId",
      "kind": "member",
      "memberof": "Datagram",
      "scope": "instance",
      "___id": "T000002R297525",
      "___s": true
    },
    {
      "comment": "/**\n     * The value field of this VBus datagram.\n     * @type {number}\n     */",
      "meta": {
        "range": [
          3742,
          3750
        ],
        "filename": "datagram.js",
        "lineno": 140,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100666741",
          "name": "value",
          "type": "Literal",
          "value": 0
        }
      },
      "description": "The value field of this VBus datagram.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "value",
      "longname": "Datagram#value",
      "kind": "member",
      "memberof": "Datagram",
      "scope": "instance",
      "___id": "T000002R297526",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a new DLxJsonConverter instance and optionally initializes its members with the given values.\n     *\n     * @constructs\n     * @augments Converter\n     * @param {object} options Initialization values\n     * @param {object} options.specification See {@link DLxJsonConverter#specification}\n     *\n     * @classdesc\n     * The DLxJsonConverter class takes HeaderSet instances, converts them into JSON\n     * representation and then publishes that on the readable stream side\n     * of itself. The format of the JSON data is similar to the one that is generated\n     * by the Dataloggers DL2 and DL3.\n     *\n     * It does not support parsing JSON content back into HeaderSet instances (the\n     * writable stream side).\n     */",
      "meta": {
        "range": [
          1125,
          1479
        ],
        "filename": "dlx-json-converter.js",
        "lineno": 40,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100666787",
          "name": "DLxJsonConverter",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new DLxJsonConverter instance and optionally initializes its members with the given values.",
      "alias": "DLxJsonConverter",
      "kind": "class",
      "augments": [
        "Converter"
      ],
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Initialization values",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "See {@link DLxJsonConverter#specification}",
          "name": "options.specification"
        }
      ],
      "classdesc": "The DLxJsonConverter class takes HeaderSet instances, converts them into JSON\nrepresentation and then publishes that on the readable stream side\nof itself. The format of the JSON data is similar to the one that is generated\nby the Dataloggers DL2 and DL3.\n\nIt does not support parsing JSON content back into HeaderSet instances (the\nwritable stream side).",
      "name": "DLxJsonConverter",
      "longname": "DLxJsonConverter",
      "scope": "global",
      "___id": "T000002R297534",
      "___s": true
    },
    {
      "comment": "/**\n     * Reference to the Specification instance that is used for the binary -> text conversion.\n     * @type {Specification}\n     */",
      "meta": {
        "range": [
          8678,
          8697
        ],
        "filename": "dlx-json-converter.js",
        "lineno": 288,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100667679",
          "name": "specification",
          "type": "Literal",
          "value": null
        }
      },
      "description": "Reference to the Specification instance that is used for the binary -> text conversion.",
      "type": {
        "names": [
          "Specification"
        ]
      },
      "name": "specification",
      "longname": "DLxJsonConverter#specification",
      "kind": "member",
      "memberof": "DLxJsonConverter",
      "scope": "instance",
      "___id": "T000002R297631",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a new DLxRecorder instance.\n     * @constructs\n     * @augments Recorder\n     *\n     * @classdesc\n     * DLxRecorder is a recorder that can play back data recorded by a Datalogger.\n     */",
      "meta": {
        "range": [
          641,
          747
        ],
        "filename": "dlx-recorder.js",
        "lineno": 35,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100667740",
          "name": "DLxRecorder",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new DLxRecorder instance.",
      "alias": "DLxRecorder",
      "kind": "class",
      "augments": [
        "Recorder"
      ],
      "classdesc": "DLxRecorder is a recorder that can play back data recorded by a Datalogger.",
      "name": "DLxRecorder",
      "longname": "DLxRecorder",
      "scope": "global",
      "params": [],
      "___id": "T000002R297644",
      "___s": true
    },
    {
      "comment": "/**\n     * The root URL to access the DLx.\n     * @type {string}\n     */",
      "meta": {
        "range": [
          8764,
          8779
        ],
        "filename": "dlx-recorder.js",
        "lineno": 307,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100668710",
          "name": "urlPrefix",
          "type": "Literal",
          "value": null
        }
      },
      "description": "The root URL to access the DLx.",
      "type": {
        "names": [
          "string"
        ]
      },
      "name": "urlPrefix",
      "longname": "DLxRecorder#urlPrefix",
      "kind": "member",
      "memberof": "DLxRecorder",
      "scope": "instance",
      "___id": "T000002R297751",
      "___s": true
    },
    {
      "comment": "/**\n     * The username to login to the web interface.\n     * @type {string}\n     */",
      "meta": {
        "range": [
          8875,
          8892
        ],
        "filename": "dlx-recorder.js",
        "lineno": 313,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100668712",
          "name": "username",
          "type": "Literal",
          "value": "admin"
        }
      },
      "description": "The username to login to the web interface.",
      "type": {
        "names": [
          "string"
        ]
      },
      "name": "username",
      "longname": "DLxRecorder#username",
      "kind": "member",
      "memberof": "DLxRecorder",
      "scope": "instance",
      "___id": "T000002R297752",
      "___s": true
    },
    {
      "comment": "/**\n     * The password to login to the web interface.\n     * @type {string}\n     */",
      "meta": {
        "range": [
          8988,
          9005
        ],
        "filename": "dlx-recorder.js",
        "lineno": 319,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100668714",
          "name": "password",
          "type": "Literal",
          "value": "admin"
        }
      },
      "description": "The password to login to the web interface.",
      "type": {
        "names": [
          "string"
        ]
      },
      "name": "password",
      "longname": "DLxRecorder#password",
      "kind": "member",
      "memberof": "DLxRecorder",
      "scope": "instance",
      "___id": "T000002R297753",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a new instances and optionally initializes its members to the given values.\n     *\n     * @constructs\n     * @augments HeaderSet\n     *\n     * @param {object} options\n     * @param {number} options.interval See {@link HeaderSetConsolidator#interval}\n     * @param {number} options.timeToLive See {@link HeaderSetConsolidator#timeToLive}\n     * @param {number} options.minTimestamp See {@link HeaderSetConsolidator#minTimestamp}\n     * @param {number} options.maxTimestamp See {@link HeaderSetConsolidator#maxTimestamp}\n     *\n     * @classdesc\n     * The HeaderSetConsolidator extends the functionality of the HeaderSet class\n     * by allowing to filter and organize the Header instances added to it.\n     *\n     * There are two common use cases for this class:\n     *\n     * The first use case is in combination with a Connection. As live Header instances\n     * are reported by their corresponding event they are aded to the HeaderSetConsolidator\n     * instance using `addHeader` or `addHeaders` methods. The `startTimer` method\n     * is used to start a background timer that fires a `headerSet` event every\n     * time the given interval has passed.\n     *\n     * The second use case is in combination with Recorders. In that case no timer\n     * has to be started because the data is not received in real time. As recorded HeaderSet\n     * instances are played back they are can be handed over to the `processHeaderSet`\n     * method. This method will fire a `headerSet` event every time the recorded data\n     * belong to a different interval.\n     *\n     * @example\n     *\n     * // --- use case 1: live data ---\n     * var connection = createConnection();\n     *\n     * // create a HeaderSetConsolidator that fires a headerSet event every minute\n     * var hsc = new HeaderSetConsolidator({ interval: 1 * 60 * 1000 });\n     *\n     * // add an event handlers to the connection that adds incoming headers to the consolidator\n     * var onHeader = function(header) {\n     *     hsc.addHeader(header);\n     * };\n     *\n     * connection.on('packet', onHeader);\n     * connection.on('datagram', onHeader);\n     * connection.on('telegram', onHeader);\n     *\n     * // add an event handler to the consolidator\n     * hsc.on('headerSet', function(headerSet) {\n     *     console.log(headerSet);\n     * });\n     *\n     * // start the timer\n     * hsc.startTimer();\n     *\n     *\n     *\n     * // --- use case 2: recorded data ---\n     * var stream = getRecordedDataStream();\n     *\n     * var converter = new VBusRecordingConverter();\n     *\n     * // create a HeaderSetConsolidator that sieves incoming headers\n     * var hsc = new HeaderSetConsolidator({ interval: 60 * 60 * 1000 });\n     *\n     * // add an event handler to the converter that processes incoming header sets in the consolidator\n     * converter.on('headerSet', function(headerSet) {\n     *     hsc.processHeaderSet(headerSet);\n     * });\n     *\n     * // add an event handler to the consolidator\n     * hsc.on('headerSet', function(headerSet) {\n     *     console.log(headerSet);\n     * });\n     *\n     * // start the conversion\n     * stream.pipe(converter);\n     */",
      "meta": {
        "range": [
          3486,
          3592
        ],
        "filename": "header-set-consolidator.js",
        "lineno": 100,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670103",
          "name": "HeaderSetConsolidator",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new instances and optionally initializes its members to the given values.",
      "alias": "HeaderSetConsolidator",
      "kind": "class",
      "augments": [
        "HeaderSet"
      ],
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "See {@link HeaderSetConsolidator#interval}",
          "name": "options.interval"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "See {@link HeaderSetConsolidator#timeToLive}",
          "name": "options.timeToLive"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "See {@link HeaderSetConsolidator#minTimestamp}",
          "name": "options.minTimestamp"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "See {@link HeaderSetConsolidator#maxTimestamp}",
          "name": "options.maxTimestamp"
        }
      ],
      "classdesc": "The HeaderSetConsolidator extends the functionality of the HeaderSet class\nby allowing to filter and organize the Header instances added to it.\n\nThere are two common use cases for this class:\n\nThe first use case is in combination with a Connection. As live Header instances\nare reported by their corresponding event they are aded to the HeaderSetConsolidator\ninstance using `addHeader` or `addHeaders` methods. The `startTimer` method\nis used to start a background timer that fires a `headerSet` event every\ntime the given interval has passed.\n\nThe second use case is in combination with Recorders. In that case no timer\nhas to be started because the data is not received in real time. As recorded HeaderSet\ninstances are played back they are can be handed over to the `processHeaderSet`\nmethod. This method will fire a `headerSet` event every time the recorded data\nbelong to a different interval.",
      "examples": [
        "// --- use case 1: live data ---\nvar connection = createConnection();\n\n// create a HeaderSetConsolidator that fires a headerSet event every minute\nvar hsc = new HeaderSetConsolidator({ interval: 1 * 60 * 1000 });\n\n// add an event handlers to the connection that adds incoming headers to the consolidator\nvar onHeader = function(header) {\n    hsc.addHeader(header);\n};\n\nconnection.on('packet', onHeader);\nconnection.on('datagram', onHeader);\nconnection.on('telegram', onHeader);\n\n// add an event handler to the consolidator\nhsc.on('headerSet', function(headerSet) {\n    console.log(headerSet);\n});\n\n// start the timer\nhsc.startTimer();\n\n\n\n// --- use case 2: recorded data ---\nvar stream = getRecordedDataStream();\n\nvar converter = new VBusRecordingConverter();\n\n// create a HeaderSetConsolidator that sieves incoming headers\nvar hsc = new HeaderSetConsolidator({ interval: 60 * 60 * 1000 });\n\n// add an event handler to the converter that processes incoming header sets in the consolidator\nconverter.on('headerSet', function(headerSet) {\n    hsc.processHeaderSet(headerSet);\n});\n\n// add an event handler to the consolidator\nhsc.on('headerSet', function(headerSet) {\n    console.log(headerSet);\n});\n\n// start the conversion\nstream.pipe(converter);"
      ],
      "name": "HeaderSetConsolidator",
      "longname": "HeaderSetConsolidator",
      "scope": "global",
      "___id": "T000002R297884",
      "___s": true
    },
    {
      "comment": "/**\n     * Starts a timer that processes live HeaderSets automatically.\n     */",
      "meta": {
        "range": [
          3682,
          3806
        ],
        "filename": "header-set-consolidator.js",
        "lineno": 109,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670124",
          "name": "HeaderSetConsolidator#startTimer",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Starts a timer that processes live HeaderSets automatically.",
      "name": "startTimer",
      "longname": "HeaderSetConsolidator#startTimer",
      "kind": "function",
      "memberof": "HeaderSetConsolidator",
      "scope": "instance",
      "params": [],
      "___id": "T000002R297885",
      "___s": true
    },
    {
      "comment": "/**\n     * Stops the timer that was started by `startTimer`.\n     */",
      "meta": {
        "range": [
          3885,
          4009
        ],
        "filename": "header-set-consolidator.js",
        "lineno": 120,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670147",
          "name": "HeaderSetConsolidator#stopTimer",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Stops the timer that was started by `startTimer`.",
      "name": "stopTimer",
      "longname": "HeaderSetConsolidator#stopTimer",
      "kind": "function",
      "memberof": "HeaderSetConsolidator",
      "scope": "instance",
      "params": [],
      "___id": "T000002R297887",
      "___s": true
    },
    {
      "comment": "/**\n     * Process the given HeaderSet instance. The Header instances in it are\n     * added to the HeaderSetConsolidator.\n     *\n     * @param {HeaderSet} headerSet The HeaderSet instance to process.\n     */",
      "meta": {
        "range": [
          4228,
          4402
        ],
        "filename": "header-set-consolidator.js",
        "lineno": 133,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670168",
          "name": "HeaderSetConsolidator#processHeaderSet",
          "type": "MethodDefinition",
          "paramnames": [
            "headerSet"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Process the given HeaderSet instance. The Header instances in it are\nadded to the HeaderSetConsolidator.",
      "params": [
        {
          "type": {
            "names": [
              "HeaderSet"
            ]
          },
          "description": "The HeaderSet instance to process.",
          "name": "headerSet"
        }
      ],
      "name": "processHeaderSet",
      "longname": "HeaderSetConsolidator#processHeaderSet",
      "kind": "function",
      "memberof": "HeaderSetConsolidator",
      "scope": "instance",
      "___id": "T000002R297889",
      "___s": true
    },
    {
      "comment": "/**\n     * The interval in which the `headerSet` event should be emitted.\n     * @type {number}\n     */",
      "meta": {
        "range": [
          5857,
          5868
        ],
        "filename": "header-set-consolidator.js",
        "lineno": 200,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670385",
          "name": "interval",
          "type": "Literal",
          "value": 0
        }
      },
      "description": "The interval in which the `headerSet` event should be emitted.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "interval",
      "longname": "HeaderSetConsolidator#interval",
      "kind": "member",
      "memberof": "HeaderSetConsolidator",
      "scope": "instance",
      "___id": "T000002R297906",
      "___s": true
    },
    {
      "comment": "/**\n     * Header instances that are older then this duration are removed from the set.\n     * @type {number}\n     */",
      "meta": {
        "range": [
          5997,
          6010
        ],
        "filename": "header-set-consolidator.js",
        "lineno": 206,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670387",
          "name": "timeToLive",
          "type": "Literal",
          "value": 0
        }
      },
      "description": "Header instances that are older then this duration are removed from the set.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "timeToLive",
      "longname": "HeaderSetConsolidator#timeToLive",
      "kind": "member",
      "memberof": "HeaderSetConsolidator",
      "scope": "instance",
      "___id": "T000002R297907",
      "___s": true
    },
    {
      "comment": "/**\n     * HeaderSet instances from a time before this Date are ignored.\n     * @type {Date}\n     */",
      "meta": {
        "range": [
          6122,
          6140
        ],
        "filename": "header-set-consolidator.js",
        "lineno": 212,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670389",
          "name": "minTimestamp",
          "type": "Literal",
          "value": null
        }
      },
      "description": "HeaderSet instances from a time before this Date are ignored.",
      "type": {
        "names": [
          "Date"
        ]
      },
      "name": "minTimestamp",
      "longname": "HeaderSetConsolidator#minTimestamp",
      "kind": "member",
      "memberof": "HeaderSetConsolidator",
      "scope": "instance",
      "___id": "T000002R297908",
      "___s": true
    },
    {
      "comment": "/**\n     * HeaderSet instances from a time after this Date are ignored.\n     * @type {Date}\n     */",
      "meta": {
        "range": [
          6251,
          6269
        ],
        "filename": "header-set-consolidator.js",
        "lineno": 218,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670391",
          "name": "maxTimestamp",
          "type": "Literal",
          "value": null
        }
      },
      "description": "HeaderSet instances from a time after this Date are ignored.",
      "type": {
        "names": [
          "Date"
        ]
      },
      "name": "maxTimestamp",
      "longname": "HeaderSetConsolidator#maxTimestamp",
      "kind": "member",
      "memberof": "HeaderSetConsolidator",
      "scope": "instance",
      "___id": "T000002R297909",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a new header set instance and optionally initializes its members with the given values.\n     *\n     * @constructs\n     * @augments EventEmitter\n     * @param {object} options Initialization values for this instance's members\n     * @param {Date} options.timestamp {@link HeaderSet#timestamp}\n     * @param {Header[]} options.headers Array of Headers to add to this instance\n     */",
      "meta": {
        "range": [
          726,
          1037
        ],
        "filename": "header-set.js",
        "lineno": 36,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670440",
          "name": "HeaderSet",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new header set instance and optionally initializes its members with the given values.",
      "alias": "HeaderSet",
      "kind": "class",
      "augments": [
        "EventEmitter"
      ],
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Initialization values for this instance's members",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "description": "{@link HeaderSet#timestamp}",
          "name": "options.timestamp"
        },
        {
          "type": {
            "names": [
              "Array.<Header>"
            ]
          },
          "description": "Array of Headers to add to this instance",
          "name": "options.headers"
        }
      ],
      "name": "HeaderSet",
      "longname": "HeaderSet",
      "scope": "global",
      "___id": "T000002R297919",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns `true` if a Header of the same kind is already added to the HeaderSet.\n     *\n     * @param {Header} header The Header instance to check for.\n     * @returns {boolean} `true` if a Header of the same kind is already in the HeaderSet, `false` otherwise.\n     */",
      "meta": {
        "range": [
          1487,
          1594
        ],
        "filename": "header-set.js",
        "lineno": 64,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670519",
          "name": "HeaderSet#containsHeader",
          "type": "MethodDefinition",
          "paramnames": [
            "header"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns `true` if a Header of the same kind is already added to the HeaderSet.",
      "params": [
        {
          "type": {
            "names": [
              "Header"
            ]
          },
          "description": "The Header instance to check for.",
          "name": "header"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "`true` if a Header of the same kind is already in the HeaderSet, `false` otherwise."
        }
      ],
      "name": "containsHeader",
      "longname": "HeaderSet#containsHeader",
      "kind": "function",
      "memberof": "HeaderSet",
      "scope": "instance",
      "___id": "T000002R297923",
      "___s": true
    },
    {
      "comment": "/**\n     * Adds a Header instance to this set, replacing a previously added Header of same kind.\n     *\n     * @param {Header} header The Header instance to add to this set.\n     */",
      "meta": {
        "range": [
          1786,
          2346
        ],
        "filename": "header-set.js",
        "lineno": 75,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670536",
          "name": "HeaderSet#addHeader",
          "type": "MethodDefinition",
          "paramnames": [
            "header"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Adds a Header instance to this set, replacing a previously added Header of same kind.",
      "params": [
        {
          "type": {
            "names": [
              "Header"
            ]
          },
          "description": "The Header instance to add to this set.",
          "name": "header"
        }
      ],
      "name": "addHeader",
      "longname": "HeaderSet#addHeader",
      "kind": "function",
      "memberof": "HeaderSet",
      "scope": "instance",
      "___id": "T000002R297925",
      "___s": true
    },
    {
      "comment": "/**\n         * This event is fired whenever a Header instance is added to this set.\n         *\n         * @event HeaderSet#addHeader\n         * @type {Header}\n         */",
      "meta": {
        "filename": "header-set.js",
        "lineno": 87,
        "columnno": 8,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {}
      },
      "description": "This event is fired whenever a Header instance is added to this set.",
      "kind": "event",
      "name": "addHeader",
      "type": {
        "names": [
          "Header"
        ]
      },
      "memberof": "HeaderSet",
      "longname": "HeaderSet#event:addHeader",
      "scope": "instance",
      "___id": "T000002R297929",
      "___s": true
    },
    {
      "comment": "/**\n     * Adds a list of Header instances to this set, replacing previously added Headers of same kind.\n     *\n     * @param {Header[]} headers The list of Header instances to add.\n     */",
      "meta": {
        "range": [
          2546,
          2692
        ],
        "filename": "header-set.js",
        "lineno": 101,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670601",
          "name": "HeaderSet#addHeaders",
          "type": "MethodDefinition",
          "paramnames": [
            "headers"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Adds a list of Header instances to this set, replacing previously added Headers of same kind.",
      "params": [
        {
          "type": {
            "names": [
              "Array.<Header>"
            ]
          },
          "description": "The list of Header instances to add.",
          "name": "headers"
        }
      ],
      "name": "addHeaders",
      "longname": "HeaderSet#addHeaders",
      "kind": "function",
      "memberof": "HeaderSet",
      "scope": "instance",
      "___id": "T000002R297930",
      "___s": true
    },
    {
      "comment": "/**\n             * This event is fired whenever a Header is removed from this set.\n             *\n             * @event HeaderSet#removeHeader\n             * @type {Header}\n             */",
      "meta": {
        "filename": "header-set.js",
        "lineno": 112,
        "columnno": 12,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {}
      },
      "description": "This event is fired whenever a Header is removed from this set.",
      "kind": "event",
      "name": "removeHeader",
      "type": {
        "names": [
          "Header"
        ]
      },
      "memberof": "HeaderSet",
      "longname": "HeaderSet#event:removeHeader",
      "scope": "instance",
      "___id": "T000002R297934",
      "___s": true
    },
    {
      "comment": "/**\n     * Removes all Header instances from this set.\n     */",
      "meta": {
        "range": [
          3355,
          3436
        ],
        "filename": "header-set.js",
        "lineno": 135,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670687",
          "name": "HeaderSet#removeAllHeaders",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Removes all Header instances from this set.",
      "name": "removeAllHeaders",
      "longname": "HeaderSet#removeAllHeaders",
      "kind": "function",
      "memberof": "HeaderSet",
      "scope": "instance",
      "params": [],
      "___id": "T000002R297937",
      "___s": true
    },
    {
      "comment": "/**\n     * Removes all Header instances from this set which are older than the given timestamp.\n     *\n     * @param {number|Date} timestamp Timestamp to compare Header instances against.\n     */",
      "meta": {
        "range": [
          3642,
          4077
        ],
        "filename": "header-set.js",
        "lineno": 144,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670703",
          "name": "HeaderSet#removeHeadersOlderThan",
          "type": "MethodDefinition",
          "paramnames": [
            "timestamp"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Removes all Header instances from this set which are older than the given timestamp.",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Date"
            ]
          },
          "description": "Timestamp to compare Header instances against.",
          "name": "timestamp"
        }
      ],
      "name": "removeHeadersOlderThan",
      "longname": "HeaderSet#removeHeadersOlderThan",
      "kind": "function",
      "memberof": "HeaderSet",
      "scope": "instance",
      "___id": "T000002R297938",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns the count of Header instances currently stored in this set.\n     *\n     * @returns {number} Number of Header instances in this set.\n     */",
      "meta": {
        "range": [
          4246,
          4309
        ],
        "filename": "header-set.js",
        "lineno": 167,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670766",
          "name": "HeaderSet#getHeaderCount",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns the count of Header instances currently stored in this set.",
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Number of Header instances in this set."
        }
      ],
      "name": "getHeaderCount",
      "longname": "HeaderSet#getHeaderCount",
      "kind": "function",
      "memberof": "HeaderSet",
      "scope": "instance",
      "params": [],
      "___id": "T000002R297943",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns an unsorted list of Header instances stored in this set.\n     *\n     * @returns {Header[]} List of headers stored in this set.\n     */",
      "meta": {
        "range": [
          4473,
          4534
        ],
        "filename": "header-set.js",
        "lineno": 176,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670776",
          "name": "HeaderSet#getHeaders",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns an unsorted list of Header instances stored in this set.",
      "returns": [
        {
          "type": {
            "names": [
              "Array.<Header>"
            ]
          },
          "description": "List of headers stored in this set."
        }
      ],
      "name": "getHeaders",
      "longname": "HeaderSet#getHeaders",
      "kind": "function",
      "memberof": "HeaderSet",
      "scope": "instance",
      "params": [],
      "___id": "T000002R297944",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns a sorted list of Header instances stored in this set.\n     *\n     * @returns {Header[]} List of headers stored in this set.\n     */",
      "meta": {
        "range": [
          4695,
          4885
        ],
        "filename": "header-set.js",
        "lineno": 185,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670788",
          "name": "HeaderSet#getSortedHeaders",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns a sorted list of Header instances stored in this set.",
      "returns": [
        {
          "type": {
            "names": [
              "Array.<Header>"
            ]
          },
          "description": "List of headers stored in this set."
        }
      ],
      "name": "getSortedHeaders",
      "longname": "HeaderSet#getSortedHeaders",
      "kind": "function",
      "memberof": "HeaderSet",
      "scope": "instance",
      "params": [],
      "___id": "T000002R297945",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns an ID composed of the IDs of all headers stored in this set.\n     *\n     * @returns {string} ID of this HeaderSet.\n     */",
      "meta": {
        "range": [
          5245,
          5485
        ],
        "filename": "header-set.js",
        "lineno": 208,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670842",
          "name": "HeaderSet#getId",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns an ID composed of the IDs of all headers stored in this set.",
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "ID of this HeaderSet."
        }
      ],
      "name": "getId",
      "longname": "HeaderSet#getId",
      "kind": "function",
      "memberof": "HeaderSet",
      "scope": "instance",
      "params": [],
      "___id": "T000002R297951",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns an ID hash for this HeaderSet instance.\n     *\n     * @returns {string} ID hash for this HeaderSet\n     */",
      "meta": {
        "range": [
          5621,
          5890
        ],
        "filename": "header-set.js",
        "lineno": 225,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670879",
          "name": "HeaderSet#getIdHash",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns an ID hash for this HeaderSet instance.",
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "ID hash for this HeaderSet"
        }
      ],
      "name": "getIdHash",
      "longname": "HeaderSet#getIdHash",
      "kind": "function",
      "memberof": "HeaderSet",
      "scope": "instance",
      "params": [],
      "___id": "T000002R297955",
      "___s": true
    },
    {
      "comment": "/**\n     * Timestamp of the youngest Header instance added to this set.\n     * @type {Date}\n     */",
      "meta": {
        "range": [
          6076,
          6091
        ],
        "filename": "header-set.js",
        "lineno": 248,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670936",
          "name": "timestamp",
          "type": "Literal",
          "value": null
        }
      },
      "description": "Timestamp of the youngest Header instance added to this set.",
      "type": {
        "names": [
          "Date"
        ]
      },
      "name": "timestamp",
      "longname": "HeaderSet#timestamp",
      "kind": "member",
      "memberof": "HeaderSet",
      "scope": "instance",
      "___id": "T000002R297959",
      "___s": true
    },
    {
      "comment": "/**\n     * Array of Header instances in this set.\n     * @type {Header[]}\n     */",
      "meta": {
        "range": [
          6184,
          6200
        ],
        "filename": "header-set.js",
        "lineno": 254,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670938",
          "name": "headerList",
          "type": "Literal",
          "value": null
        }
      },
      "description": "Array of Header instances in this set.",
      "type": {
        "names": [
          "Array.<Header>"
        ]
      },
      "name": "headerList",
      "longname": "HeaderSet#headerList",
      "kind": "member",
      "memberof": "HeaderSet",
      "scope": "instance",
      "___id": "T000002R297960",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a new Header instance and optionally initializes its members\n     * with the given values\n     *\n     * @constructs\n     * @param {object} [options] Initialization values for this instance's members\n     * @param {Date} [options.timestamp] {@link Header#timestamp}\n     * @param {number} [options.channel] {@link Header#channel}\n     * @param {number} [options.destinationAddress] {@link Header#destinationAddress}\n     * @param {number} [options.sourceAddress] {@link Header#sourceAddress}\n     *\n     * @classdesc\n     * All VBus models are sub-classes of this Header class. The Header class provides\n     * a generic interface and the common properties that all (currently three)\n     * different types of VBus models can use.\n     *\n     * Header instances can either be created by calling the constructor function or\n     * by passing a Buffer object containing the binary VBus data to the class method\n     * `HeaderSubClass.fromLiveBuffer`.\n     *\n     * @see Packet\n     * @see Datagram\n     * @see Telegram\n     */",
      "meta": {
        "range": [
          1346,
          1510
        ],
        "filename": "header.js",
        "lineno": 48,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670975",
          "name": "Header",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new Header instance and optionally initializes its members\nwith the given values",
      "alias": "Header",
      "kind": "class",
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "optional": true,
          "description": "Initialization values for this instance's members",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "optional": true,
          "description": "{@link Header#timestamp}",
          "name": "options.timestamp"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "{@link Header#channel}",
          "name": "options.channel"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "{@link Header#destinationAddress}",
          "name": "options.destinationAddress"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "{@link Header#sourceAddress}",
          "name": "options.sourceAddress"
        }
      ],
      "classdesc": "All VBus models are sub-classes of this Header class. The Header class provides\na generic interface and the common properties that all (currently three)\ndifferent types of VBus models can use.\n\nHeader instances can either be created by calling the constructor function or\nby passing a Buffer object containing the binary VBus data to the class method\n`HeaderSubClass.fromLiveBuffer`.",
      "see": [
        "Packet",
        "Datagram",
        "Telegram"
      ],
      "name": "Header",
      "longname": "Header",
      "scope": "global",
      "___id": "T000002R297966",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a representation of this Header instance that can be\n     * transmitted over a Connection. If no buffer is given as an\n     * arguments, it creates a new one that is big enough to hold\n     * the representation.\n     *\n     * Must be implemented by sub-class.\n     *\n     * @abstract\n     * @param {Buffer} [buffer] Buffer object to store data in\n     * @param {number} [start] Start index in the buffer\n     * @param {number} [end] End index in the buffer\n     * @returns {Buffer} Buffer object containing the data\n     */",
      "meta": {
        "range": [
          2063,
          2170
        ],
        "filename": "header.js",
        "lineno": 70,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671005",
          "name": "Header#toLiveBuffer",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a representation of this Header instance that can be\ntransmitted over a Connection. If no buffer is given as an\narguments, it creates a new one that is big enough to hold\nthe representation.\n\nMust be implemented by sub-class.",
      "virtual": true,
      "params": [
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "optional": true,
          "description": "Buffer object to store data in",
          "name": "buffer"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "Start index in the buffer",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "End index in the buffer",
          "name": "end"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "Buffer object containing the data"
        }
      ],
      "name": "toLiveBuffer",
      "longname": "Header#toLiveBuffer",
      "kind": "function",
      "memberof": "Header",
      "scope": "instance",
      "___id": "T000002R297968",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns the protocol version of this Header instance as a 8-bit\n     * number. The high nibble is used for the major version, the low\n     * nibble for the minor version. For example: a header with protocol\n     * version 2.0 would return `0x20`.\n     *\n     * Must be implemented by sub-class.\n     *\n     * @abstract\n     * @returns {number} Protocol version\n     */",
      "meta": {
        "range": [
          2560,
          2649
        ],
        "filename": "header.js",
        "lineno": 85,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671013",
          "name": "Header#getProtocolVersion",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns the protocol version of this Header instance as a 8-bit\nnumber. The high nibble is used for the major version, the low\nnibble for the minor version. For example: a header with protocol\nversion 2.0 would return `0x20`.\n\nMust be implemented by sub-class.",
      "virtual": true,
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Protocol version"
        }
      ],
      "name": "getProtocolVersion",
      "longname": "Header#getProtocolVersion",
      "kind": "function",
      "memberof": "Header",
      "scope": "instance",
      "params": [],
      "___id": "T000002R297969",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns an info number about this Header instance. It can be used\n     * for sorting purposes (to distinguish Header objects that would\n     * otherwise compare as equal).\n     *\n     * @returns {number} Info value\n     */",
      "meta": {
        "range": [
          2893,
          2928
        ],
        "filename": "header.js",
        "lineno": 96,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671021",
          "name": "Header#getInfo",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns an info number about this Header instance. It can be used\nfor sorting purposes (to distinguish Header objects that would\notherwise compare as equal).",
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Info value"
        }
      ],
      "name": "getInfo",
      "longname": "Header#getInfo",
      "kind": "function",
      "memberof": "Header",
      "scope": "instance",
      "params": [],
      "___id": "T000002R297970",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns a string identifier describing this Header instance.\n     * It contains at least:\n     *\n     *   - channel\n     *   - destination address\n     *   - source address\n     *   - protocol version\n     *\n     * Sub-classes can extend that information. The structure of this\n     * identifier is implementation specific, do not rely on it!\n     *\n     * @returns {string} Identifier\n     */",
      "meta": {
        "range": [
          3343,
          3491
        ],
        "filename": "header.js",
        "lineno": 114,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671027",
          "name": "Header#getId",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Returns a string identifier describing this Header instance.\nIt contains at least:\n\n  - channel\n  - destination address\n  - source address\n  - protocol version\n\nSub-classes can extend that information. The structure of this\nidentifier is implementation specific, do not rely on it!",
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Identifier"
        }
      ],
      "name": "getId",
      "longname": "Header#getId",
      "kind": "function",
      "memberof": "Header",
      "scope": "instance",
      "params": [],
      "___id": "T000002R297971",
      "___s": true
    },
    {
      "comment": "/**\n     * Compares this Header instance to another one.\n     *\n     * Sub-classes can extend the comparison to include specific\n     * information.\n     *\n     * @param {Header} that Another Header instance to compare to.\n     * @returns {number} Returns a number\n     *\n     *   - less than 0 if `this < that`\n     *   - greater than 0 if `this > that`\n     *   - equal to to if `this == that`\n     */",
      "meta": {
        "range": [
          3905,
          4325
        ],
        "filename": "header.js",
        "lineno": 131,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671048",
          "name": "Header#compareTo",
          "type": "MethodDefinition",
          "paramnames": [
            "that"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Compares this Header instance to another one.\n\nSub-classes can extend the comparison to include specific\ninformation.",
      "params": [
        {
          "type": {
            "names": [
              "Header"
            ]
          },
          "description": "Another Header instance to compare to.",
          "name": "that"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns a number\n\n  - less than 0 if `this < that`\n  - greater than 0 if `this > that`\n  - equal to to if `this == that`"
        }
      ],
      "name": "compareTo",
      "longname": "Header#compareTo",
      "kind": "function",
      "memberof": "Header",
      "scope": "instance",
      "___id": "T000002R297972",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a Header instance from a representation that was\n     * received over a Connection.\n     *\n     * Must be implemented by sub-class.\n     *\n     * @abstract\n     * @param {Buffer} buffer Buffer that contains the representation\n     * @param {number} start Start index in the buffer\n     * @param {number} end End index in the buffer\n     * @returns {Header} Header instance created from the representation\n     */",
      "meta": {
        "range": [
          4767,
          4883
        ],
        "filename": "header.js",
        "lineno": 157,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671112",
          "name": "Header.fromLiveBuffer",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a Header instance from a representation that was\nreceived over a Connection.\n\nMust be implemented by sub-class.",
      "virtual": true,
      "params": [
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "Buffer that contains the representation",
          "name": "buffer"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Start index in the buffer",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "End index in the buffer",
          "name": "end"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Header"
            ]
          },
          "description": "Header instance created from the representation"
        }
      ],
      "name": "fromLiveBuffer",
      "longname": "Header.fromLiveBuffer",
      "kind": "function",
      "memberof": "Header",
      "scope": "static",
      "___id": "T000002R297977",
      "___s": true
    },
    {
      "comment": "/**\n     * Calculates the VBus checksum (according to version x.0 specification)\n     * over a part of a Buffer instance.\n     *\n     * @param {Buffer} buffer Buffer to calc checksum for\n     * @param {number} start Start index in the buffer\n     * @param {number} end End index in the buffer\n     * @returns {number} Calculated checksum\n     */",
      "meta": {
        "range": [
          5239,
          5502
        ],
        "filename": "header.js",
        "lineno": 170,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671120",
          "name": "Header.calcChecksumV0",
          "type": "MethodDefinition",
          "paramnames": [
            "buffer",
            "start",
            "end"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Calculates the VBus checksum (according to version x.0 specification)\nover a part of a Buffer instance.",
      "params": [
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "Buffer to calc checksum for",
          "name": "buffer"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Start index in the buffer",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "End index in the buffer",
          "name": "end"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Calculated checksum"
        }
      ],
      "name": "calcChecksumV0",
      "longname": "Header.calcChecksumV0",
      "kind": "function",
      "memberof": "Header",
      "scope": "static",
      "___id": "T000002R297978",
      "___s": true
    },
    {
      "comment": "/**\n     * Calculates the VBus checksum (according to version x.0 specification)\n     * over a part of a Buffer instance and compares it the checksum byte\n     * stored at the `end` position.\n     *\n     * @param {Buffer} buffer Buffer to calc and compare checksum for\n     * @param {number} start Start index in the buffer\n     * @param {number} end End index in the buffer\n     * @returns {boolean} Result whether calculated and stored checksum match\n     */",
      "meta": {
        "range": [
          5973,
          6142
        ],
        "filename": "header.js",
        "lineno": 189,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671160",
          "name": "Header.calcAndCompareChecksumV0",
          "type": "MethodDefinition",
          "paramnames": [
            "buffer",
            "start",
            "end"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Calculates the VBus checksum (according to version x.0 specification)\nover a part of a Buffer instance and compares it the checksum byte\nstored at the `end` position.",
      "params": [
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "Buffer to calc and compare checksum for",
          "name": "buffer"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Start index in the buffer",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "End index in the buffer",
          "name": "end"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Result whether calculated and stored checksum match"
        }
      ],
      "name": "calcAndCompareChecksumV0",
      "longname": "Header.calcAndCompareChecksumV0",
      "kind": "function",
      "memberof": "Header",
      "scope": "static",
      "___id": "T000002R297983",
      "___s": true
    },
    {
      "comment": "/**\n     * Calculates the VBus checksum (according to version x.0 specification)\n     * over a part of the Buffer instance and stores it at the `end` position.\n     *\n     * @param {Buffer} buffer Buffer to calc and store checksum for\n     * @param {number} start Start index in the buffer\n     * @param {number} end End index in the buffer\n     * @returns {number} Calculated checksum\n     */",
      "meta": {
        "range": [
          6546,
          6725
        ],
        "filename": "header.js",
        "lineno": 203,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671183",
          "name": "Header.calcAndSetChecksumV0",
          "type": "MethodDefinition",
          "paramnames": [
            "buffer",
            "start",
            "end"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Calculates the VBus checksum (according to version x.0 specification)\nover a part of the Buffer instance and stores it at the `end` position.",
      "params": [
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "Buffer to calc and store checksum for",
          "name": "buffer"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Start index in the buffer",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "End index in the buffer",
          "name": "end"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Calculated checksum"
        }
      ],
      "name": "calcAndSetChecksumV0",
      "longname": "Header.calcAndSetChecksumV0",
      "kind": "function",
      "memberof": "Header",
      "scope": "static",
      "___id": "T000002R297985",
      "___s": true
    },
    {
      "comment": "/**\n     * Copies a part of the source Buffer instance to the destination Buffer\n     * instance, injecting the MSBs stored in the septett byte during the process.\n     *\n     * @param {Buffer} srcBuffer Buffer to copy from\n     * @param {number} srcStart Start index in the source buffer\n     * @param {number} srcEnd End index in the source buffer\n     * @param {Buffer} dstBuffer Buffer to copy to\n     * @param {number} dstStart Start index in the destination buffer\n     */",
      "meta": {
        "range": [
          7214,
          7680
        ],
        "filename": "header.js",
        "lineno": 219,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671208",
          "name": "Header.injectSeptett",
          "type": "MethodDefinition",
          "paramnames": [
            "srcBuffer",
            "srcStart",
            "srcEnd",
            "dstBuffer",
            "dstStart"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Copies a part of the source Buffer instance to the destination Buffer\ninstance, injecting the MSBs stored in the septett byte during the process.",
      "params": [
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "Buffer to copy from",
          "name": "srcBuffer"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Start index in the source buffer",
          "name": "srcStart"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "End index in the source buffer",
          "name": "srcEnd"
        },
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "Buffer to copy to",
          "name": "dstBuffer"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Start index in the destination buffer",
          "name": "dstStart"
        }
      ],
      "name": "injectSeptett",
      "longname": "Header.injectSeptett",
      "kind": "function",
      "memberof": "Header",
      "scope": "static",
      "___id": "T000002R297988",
      "___s": true
    },
    {
      "comment": "/**\n     * Copies a part of the source Buffer instance to the destination Buffer\n     * instance, extracting the MSBs during the process and storing the septett\n     * byte to the destination buffer's end position.\n     *\n     * @param {Buffer} srcBuffer Buffer to copy from\n     * @param {number} srcStart Start index in the source buffer\n     * @param {number} srcEnd End index in the source buffer\n     * @param {Buffer} dstBuffer Buffer to copy to\n     * @param {number} dstStart Start index in the destination buffer\n     */",
      "meta": {
        "range": [
          8220,
          8724
        ],
        "filename": "header.js",
        "lineno": 246,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671271",
          "name": "Header.extractSeptett",
          "type": "MethodDefinition",
          "paramnames": [
            "srcBuffer",
            "srcStart",
            "srcEnd",
            "dstBuffer",
            "dstStart"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Copies a part of the source Buffer instance to the destination Buffer\ninstance, extracting the MSBs during the process and storing the septett\nbyte to the destination buffer's end position.",
      "params": [
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "Buffer to copy from",
          "name": "srcBuffer"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Start index in the source buffer",
          "name": "srcStart"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "End index in the source buffer",
          "name": "srcEnd"
        },
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "Buffer to copy to",
          "name": "dstBuffer"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Start index in the destination buffer",
          "name": "dstStart"
        }
      ],
      "name": "extractSeptett",
      "longname": "Header.extractSeptett",
      "kind": "function",
      "memberof": "Header",
      "scope": "static",
      "___id": "T000002R297997",
      "___s": true
    },
    {
      "comment": "/**\n     * Timestamp of this header\n     * @type {Date}\n     * @default now\n     */",
      "meta": {
        "range": [
          8888,
          8903
        ],
        "filename": "header.js",
        "lineno": 274,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671350",
          "name": "timestamp",
          "type": "Literal",
          "value": null
        }
      },
      "description": "Timestamp of this header",
      "type": {
        "names": [
          "Date"
        ]
      },
      "defaultvalue": "now",
      "name": "timestamp",
      "longname": "Header#timestamp",
      "kind": "member",
      "memberof": "Header",
      "scope": "instance",
      "___id": "T000002R298008",
      "___s": true
    },
    {
      "comment": "/**\n     * VBus channel of this header\n     * @type {number}\n     * @default 0\n     */",
      "meta": {
        "range": [
          9001,
          9011
        ],
        "filename": "header.js",
        "lineno": 281,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671352",
          "name": "channel",
          "type": "Literal",
          "value": 0
        }
      },
      "description": "VBus channel of this header",
      "type": {
        "names": [
          "number"
        ]
      },
      "defaultvalue": "0",
      "name": "channel",
      "longname": "Header#channel",
      "kind": "member",
      "memberof": "Header",
      "scope": "instance",
      "___id": "T000002R298009",
      "___s": true
    },
    {
      "comment": "/**\n     * VBus address of this header's destination\n     * @type {number}\n     * @default 0\n     */",
      "meta": {
        "range": [
          9123,
          9144
        ],
        "filename": "header.js",
        "lineno": 288,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671354",
          "name": "destinationAddress",
          "type": "Literal",
          "value": 0
        }
      },
      "description": "VBus address of this header's destination",
      "type": {
        "names": [
          "number"
        ]
      },
      "defaultvalue": "0",
      "name": "destinationAddress",
      "longname": "Header#destinationAddress",
      "kind": "member",
      "memberof": "Header",
      "scope": "instance",
      "___id": "T000002R298010",
      "___s": true
    },
    {
      "comment": "/**\n     * VBus address of this header's source\n     * @type {number}\n     * @default\n     */",
      "meta": {
        "range": [
          9249,
          9265
        ],
        "filename": "header.js",
        "lineno": 295,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671356",
          "name": "sourceAddress",
          "type": "Literal",
          "value": 0
        }
      },
      "description": "VBus address of this header's source",
      "type": {
        "names": [
          "number"
        ]
      },
      "defaultvalue": 0,
      "name": "sourceAddress",
      "longname": "Header#sourceAddress",
      "kind": "member",
      "memberof": "Header",
      "scope": "instance",
      "___id": "T000002R298011",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a new I18N instance for the given language code.\n     *\n     * @constructs\n     * @param {string} [language='en'] Language code (ISO 639-1)\n     */",
      "meta": {
        "range": [
          765,
          984
        ],
        "filename": "i18n.js",
        "lineno": 44,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671433",
          "name": "I18N",
          "type": "MethodDefinition",
          "paramnames": [
            "language"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new I18N instance for the given language code.",
      "alias": "I18N",
      "kind": "class",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "'en'",
          "description": "Language code (ISO 639-1)",
          "name": "language"
        }
      ],
      "name": "I18N",
      "longname": "I18N",
      "scope": "global",
      "___id": "T000002R298030",
      "___s": true
    },
    {
      "comment": "/**\n     * Formats a string using a `printf(3)` compatible format string and\n     * variadic arguments (comparable to `sprintf(3)`) and returns it.\n     *\n     * @param {string} fmt Format string\n     * @param {...mixed} args Arguments to format\n     * @returns {string} Formatted string\n     *\n     * @see http://linux.die.net/man/3/sprintf\n     * @see http://www.diveintojavascript.com/projects/javascript-sprintf\n     *\n     * @example\n     * // outputs: VBus #3: DeltaSol MX\n     * console.log(i18n.sprintf('VBus #%d: %s', 3, 'DeltaSol MX'));\n     *\n     * // outputs: DeltaSol MX\n     * console.log(i18n.sprintf('%2$s', 3, 'DeltaSol MX'));\n     */",
      "meta": {
        "range": [
          1647,
          1711
        ],
        "filename": "i18n.js",
        "lineno": 71,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671468",
          "name": "I18N#sprintf",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Formats a string using a `printf(3)` compatible format string and\nvariadic arguments (comparable to `sprintf(3)`) and returns it.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Format string",
          "name": "fmt"
        },
        {
          "type": {
            "names": [
              "mixed"
            ]
          },
          "variable": true,
          "description": "Arguments to format",
          "name": "args"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Formatted string"
        }
      ],
      "see": [
        "http://linux.die.net/man/3/sprintf",
        "http://www.diveintojavascript.com/projects/javascript-sprintf"
      ],
      "examples": [
        "// outputs: VBus #3: DeltaSol MX\nconsole.log(i18n.sprintf('VBus #%d: %s', 3, 'DeltaSol MX'));\n\n// outputs: DeltaSol MX\nconsole.log(i18n.sprintf('%2$s', 3, 'DeltaSol MX'));"
      ],
      "name": "sprintf",
      "longname": "I18N#sprintf",
      "kind": "function",
      "memberof": "I18N",
      "scope": "instance",
      "___id": "T000002R298034",
      "___s": true
    },
    {
      "comment": "/**\n     * Formats a string using a `printf(3)` compatible format string and\n     * a arguments array (comparable to `vsprintf(3)`) and returns it.\n     *\n     * @param {string} fmt Format string\n     * @param {Array} argv Arguments to format\n     * @returns {string} Formatted string\n     *\n     * @example\n     * // outputs: VBus #3: DeltaSol MX\n     * console.log(i18n.vsprintf('VBus #%d: %s', [ 3, 'DeltaSol MX' ]));\n     *\n     * // outputs: DeltaSol MX\n     * console.log(i18n.vsprintf('%2$s', [ 3, 'DeltaSol MX' ]));\n     */",
      "meta": {
        "range": [
          2253,
          2390
        ],
        "filename": "i18n.js",
        "lineno": 90,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671479",
          "name": "I18N#vsprintf",
          "type": "MethodDefinition",
          "paramnames": [
            "fmt",
            "argv"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Formats a string using a `printf(3)` compatible format string and\na arguments array (comparable to `vsprintf(3)`) and returns it.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Format string",
          "name": "fmt"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Arguments to format",
          "name": "argv"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Formatted string"
        }
      ],
      "examples": [
        "// outputs: VBus #3: DeltaSol MX\nconsole.log(i18n.vsprintf('VBus #%d: %s', [ 3, 'DeltaSol MX' ]));\n\n// outputs: DeltaSol MX\nconsole.log(i18n.vsprintf('%2$s', [ 3, 'DeltaSol MX' ]));"
      ],
      "name": "vsprintf",
      "longname": "I18N#vsprintf",
      "kind": "function",
      "memberof": "I18N",
      "scope": "instance",
      "___id": "T000002R298035",
      "___s": true
    },
    {
      "comment": "/**\n     * Get a translation for the given key. If more than one argument is\n     * given, the translation is then used as a format string for the\n     * {@link I18N#sprintf} method.\n     *\n     * @param {string} key Key for the translation\n     * @param {...mixed} args Arguments to format\n     * @return {string} Formatted string\n     *\n     * @example\n     * var i18n = new I18N('de');\n     *\n     * // outputs: Unbekanntes Gerät (0x%1$04X)\n     * console.log(i18n.t('specification.unknownDevice'));\n     *\n     * // outputs: Unbekanntes Gerät (0x7E11)\n     * console.log(i18n.t('specification.unknownDevice', 0x7e11));\n     */",
      "meta": {
        "range": [
          3031,
          3731
        ],
        "filename": "i18n.js",
        "lineno": 114,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671508",
          "name": "I18N#t",
          "type": "MethodDefinition",
          "paramnames": [
            "key"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Get a translation for the given key. If more than one argument is\ngiven, the translation is then used as a format string for the\n{@link I18N#sprintf} method.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Key for the translation",
          "name": "key"
        },
        {
          "type": {
            "names": [
              "mixed"
            ]
          },
          "variable": true,
          "description": "Arguments to format",
          "name": "args"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Formatted string"
        }
      ],
      "examples": [
        "var i18n = new I18N('de');\n\n// outputs: Unbekanntes Gerät (0x%1$04X)\nconsole.log(i18n.t('specification.unknownDevice'));\n\n// outputs: Unbekanntes Gerät (0x7E11)\nconsole.log(i18n.t('specification.unknownDevice', 0x7e11));"
      ],
      "name": "t",
      "longname": "I18N#t",
      "kind": "function",
      "memberof": "I18N",
      "scope": "instance",
      "___id": "T000002R298037",
      "___s": true
    },
    {
      "comment": "/**\n     * Wrapper for a moment.js date object that is setup to use this\n     * instance's language code.\n     *\n     * @param {...mixed} args Arguments to be passed to `moment()` function\n     * @returns {mixed} Result of calling the `moment()` function\n     *\n     * @see http://momentjs.com/docs/\n     */",
      "meta": {
        "range": [
          4049,
          4239
        ],
        "filename": "i18n.js",
        "lineno": 151,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671625",
          "name": "I18N#moment",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Wrapper for a moment.js date object that is setup to use this\ninstance's language code.",
      "params": [
        {
          "type": {
            "names": [
              "mixed"
            ]
          },
          "variable": true,
          "description": "Arguments to be passed to `moment()` function",
          "name": "args"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "mixed"
            ]
          },
          "description": "Result of calling the `moment()` function"
        }
      ],
      "see": [
        "http://momentjs.com/docs/"
      ],
      "name": "moment",
      "longname": "I18N#moment",
      "kind": "function",
      "memberof": "I18N",
      "scope": "instance",
      "___id": "T000002R298049",
      "___s": true
    },
    {
      "comment": "/**\n     * Wrapper for a moment.js UTC date object that is setup to use this\n     * instance's language code.\n     *\n     * @param {...mixed} args Arguments to be passed to `moment.utc()` function\n     * @returns {mixed} Result of calling the `moment.utc()` function\n     *\n     * @see http://momentjs.com/docs/\n     */",
      "meta": {
        "range": [
          4569,
          4692
        ],
        "filename": "i18n.js",
        "lineno": 168,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671663",
          "name": "I18N#momentUtc",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Wrapper for a moment.js UTC date object that is setup to use this\ninstance's language code.",
      "params": [
        {
          "type": {
            "names": [
              "mixed"
            ]
          },
          "variable": true,
          "description": "Arguments to be passed to `moment.utc()` function",
          "name": "args"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "mixed"
            ]
          },
          "description": "Result of calling the `moment.utc()` function"
        }
      ],
      "see": [
        "http://momentjs.com/docs/"
      ],
      "name": "momentUtc",
      "longname": "I18N#momentUtc",
      "kind": "function",
      "memberof": "I18N",
      "scope": "instance",
      "___id": "T000002R298052",
      "___s": true
    },
    {
      "comment": "/**\n     * Wrapper for a numeral.js number object that is setup to use this\n     * instance's language code.\n     *\n     * @param {...mixed} args Arguments to be passes to `numeral()` function\n     * @returns {mixes} Result of calling the `numeral()` function\n     *\n     * @see http://numeraljs.com/\n     */",
      "meta": {
        "range": [
          5248,
          5364
        ],
        "filename": "i18n.js",
        "lineno": 192,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671734",
          "name": "I18N#numeral",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Wrapper for a numeral.js number object that is setup to use this\ninstance's language code.",
      "params": [
        {
          "type": {
            "names": [
              "mixed"
            ]
          },
          "variable": true,
          "description": "Arguments to be passes to `numeral()` function",
          "name": "args"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "mixes"
            ]
          },
          "description": "Result of calling the `numeral()` function"
        }
      ],
      "see": [
        "http://numeraljs.com/"
      ],
      "name": "numeral",
      "longname": "I18N#numeral",
      "kind": "function",
      "memberof": "I18N",
      "scope": "instance",
      "___id": "T000002R298058",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a new Packet instance and optionally initializes its members with the given values.\n     *\n     * @constructs\n     * @augments Header\n     * @param {object} options Initialization values for this instance's members\n     * @param {number} options.command {@link Packet#command}\n     * @param {number} options.frameCount {@link Packet#frameCount}\n     * @param {Buffer} options.frameData {@link Packet#frameData}\n     * @see Header#constructor\n     *\n     * @classdesc\n     * The Packet sub-class provides access to all properties and methods applicable for VBus version 1 packets.\n     * In addition to the packet header it may contain up to 508 bytes of payload data.\n     * The structure of the payload depends on the combination of destination and source addresses as well as\n     * the command of the packet. The different payloads are described in further detail\n     * in Chapter H of the VBus Protocol Specification and can be decoded using a Specification instance.\n     *\n     * @see Specification\n     */",
      "meta": {
        "range": [
          1341,
          1950
        ],
        "filename": "packet.js",
        "lineno": 43,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100672096",
          "name": "Packet",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new Packet instance and optionally initializes its members with the given values.",
      "alias": "Packet",
      "kind": "class",
      "augments": [
        "Header"
      ],
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Initialization values for this instance's members",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "{@link Packet#command}",
          "name": "options.command"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "{@link Packet#frameCount}",
          "name": "options.frameCount"
        },
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "{@link Packet#frameData}",
          "name": "options.frameData"
        }
      ],
      "see": [
        "Header#constructor",
        "Specification"
      ],
      "classdesc": "The Packet sub-class provides access to all properties and methods applicable for VBus version 1 packets.\nIn addition to the packet header it may contain up to 508 bytes of payload data.\nThe structure of the payload depends on the combination of destination and source addresses as well as\nthe command of the packet. The different payloads are described in further detail\nin Chapter H of the VBus Protocol Specification and can be decoded using a Specification instance.",
      "name": "Packet",
      "longname": "Packet",
      "scope": "global",
      "___id": "T000002R298136",
      "___s": true
    },
    {
      "comment": "/**\n     * The command field of this VBus packet. See the VBus Protocol specification for details.\n     * @type {number}\n     */",
      "meta": {
        "range": [
          4382,
          4392
        ],
        "filename": "packet.js",
        "lineno": 139,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100672553",
          "name": "command",
          "type": "Literal",
          "value": 0
        }
      },
      "description": "The command field of this VBus packet. See the VBus Protocol specification for details.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "command",
      "longname": "Packet#command",
      "kind": "member",
      "memberof": "Packet",
      "scope": "instance",
      "___id": "T000002R298169",
      "___s": true
    },
    {
      "comment": "/**\n     * The number of frames of this VBus packet. Each frame can hold four bytes of payload.\n     * @type {number}\n     */",
      "meta": {
        "range": [
          4529,
          4542
        ],
        "filename": "packet.js",
        "lineno": 145,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100672555",
          "name": "frameCount",
          "type": "Literal",
          "value": 0
        }
      },
      "description": "The number of frames of this VBus packet. Each frame can hold four bytes of payload.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "frameCount",
      "longname": "Packet#frameCount",
      "kind": "member",
      "memberof": "Packet",
      "scope": "instance",
      "___id": "T000002R298170",
      "___s": true
    },
    {
      "comment": "/**\n     * The buffer containing the frame data of this VBus packet.\n     */",
      "meta": {
        "range": [
          4630,
          4645
        ],
        "filename": "packet.js",
        "lineno": 150,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100672557",
          "name": "frameData",
          "type": "Literal",
          "value": null
        }
      },
      "description": "The buffer containing the frame data of this VBus packet.",
      "name": "frameData",
      "longname": "Packet#frameData",
      "kind": "member",
      "memberof": "Packet",
      "scope": "instance",
      "___id": "T000002R298171",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a new Recorder instance and optionally initializes\n     * its members with the given values.\n     *\n     * @constructs\n     * @param {object} options Initialization values for this instance's members\n     * @param {string} options.id {@link Recorder#id}\n     * @param {Date} options.minTimestamp {@link Recorder#minTimestamp}\n     * @param {Date} options.maxTimestamp {@link Recorder#maxTimestamp}\n     * @param {number} options.interval {@link Recorder#interval}\n     *\n     * @classdesc\n     * A Recorder provides access to HeaderSet stores (e.g. dataloggers) by\n     * allowing to either playback the HeaderSets in the store, record\n     * HeaderSets to the store or synchronize two Recorders.\n     *\n     * The playback and record operation both use the VBusRecordingConverter\n     * to serialize the HeaderSets to and from Node.js streams.\n     *\n     * The synchronization operation builds on top of this two operations\n     * and is able to find unsynced HeaderSets in the source Recorder.\n     * Thoses unsynced HeaderSets are then played back from the source Recorder\n     * and recorded in the destination Recorder.\n     *\n     * The storage mechanism and format of the Recorder sub-classes is\n     * implementation-specific to this class.\n     */",
      "meta": {
        "range": [
          1801,
          2183
        ],
        "filename": "recorder.js",
        "lineno": 56,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100672622",
          "name": "Recorder",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new Recorder instance and optionally initializes\nits members with the given values.",
      "alias": "Recorder",
      "kind": "class",
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Initialization values for this instance's members",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "{@link Recorder#id}",
          "name": "options.id"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "description": "{@link Recorder#minTimestamp}",
          "name": "options.minTimestamp"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "description": "{@link Recorder#maxTimestamp}",
          "name": "options.maxTimestamp"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "{@link Recorder#interval}",
          "name": "options.interval"
        }
      ],
      "classdesc": "A Recorder provides access to HeaderSet stores (e.g. dataloggers) by\nallowing to either playback the HeaderSets in the store, record\nHeaderSets to the store or synchronize two Recorders.\n\nThe playback and record operation both use the VBusRecordingConverter\nto serialize the HeaderSets to and from Node.js streams.\n\nThe synchronization operation builds on top of this two operations\nand is able to find unsynced HeaderSets in the source Recorder.\nThoses unsynced HeaderSets are then played back from the source Recorder\nand recorded in the destination Recorder.\n\nThe storage mechanism and format of the Recorder sub-classes is\nimplementation-specific to this class.",
      "name": "Recorder",
      "longname": "Recorder",
      "scope": "global",
      "___id": "T000002R298181",
      "___s": true
    },
    {
      "comment": "/**\n     * Plays back a given range of HeaderSets. The stream must be in object mode.\n     *\n     * @param {Writable} stream A writable stream\n     * @param {object} options Options to select and filter HeaderSets\n     * @param {Date} [options.minTimestamp] {@link Recorder#minTimestamp}\n     * @param {Date} [options.maxTimestamp] {@link Recorder#maxTimestamp}\n     * @param {number} [options.interval] {@link Recorder#interval}\n     * @param {boolean} [options.end=true] Whether the stream should be `end()`ed when the playback is complete\n     */",
      "meta": {
        "range": [
          2825,
          4058
        ],
        "filename": "recorder.js",
        "lineno": 86,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100672709",
          "name": "Recorder#playback",
          "type": "MethodDefinition",
          "paramnames": [
            "stream",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Plays back a given range of HeaderSets. The stream must be in object mode.",
      "params": [
        {
          "type": {
            "names": [
              "Writable"
            ]
          },
          "description": "A writable stream",
          "name": "stream"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Options to select and filter HeaderSets",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "optional": true,
          "description": "{@link Recorder#minTimestamp}",
          "name": "options.minTimestamp"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "optional": true,
          "description": "{@link Recorder#maxTimestamp}",
          "name": "options.maxTimestamp"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "{@link Recorder#interval}",
          "name": "options.interval"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "defaultvalue": true,
          "description": "Whether the stream should be `end()`ed when the playback is complete",
          "name": "options.end"
        }
      ],
      "name": "playback",
      "longname": "Recorder#playback",
      "kind": "function",
      "memberof": "Recorder",
      "scope": "instance",
      "async": true,
      "___id": "T000002R298186",
      "___s": true
    },
    {
      "comment": "/**\n     * Records a given range of HeaderSet instances. The stream must be in object mode.\n     *\n     * @param {Readable} stream A readable stream in object mode.\n     * @param {object} options Options to select and filter HeaderSet instances.\n     * @param {Date} [options.minTimestamp] See {@link Recorder#minTimestamp}\n     * @param {Date} [options.maxTimestamp] See {@link Recorder#maxTimestamp}\n     * @param {number} [options.interval] See {@link Recorder#interval}\n     * @return {Promise} A Promise that resolves to the recorded ranges.\n     */",
      "meta": {
        "range": [
          4739,
          7254
        ],
        "filename": "recorder.js",
        "lineno": 145,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100672852",
          "name": "Recorder#record",
          "type": "MethodDefinition",
          "paramnames": [
            "stream",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Records a given range of HeaderSet instances. The stream must be in object mode.",
      "params": [
        {
          "type": {
            "names": [
              "Readable"
            ]
          },
          "description": "A readable stream in object mode.",
          "name": "stream"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Options to select and filter HeaderSet instances.",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "optional": true,
          "description": "See {@link Recorder#minTimestamp}",
          "name": "options.minTimestamp"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "optional": true,
          "description": "See {@link Recorder#maxTimestamp}",
          "name": "options.maxTimestamp"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "See {@link Recorder#interval}",
          "name": "options.interval"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves to the recorded ranges."
        }
      ],
      "name": "record",
      "longname": "Recorder#record",
      "kind": "function",
      "memberof": "Recorder",
      "scope": "instance",
      "async": true,
      "___id": "T000002R298201",
      "___s": true
    },
    {
      "comment": "/**\n     * Synchronize this Recorder's HeaderSets to another Recorder.\n     *\n     * @param {Recorder} recorder Destination Recorder\n     * @param {object} options Options to select and filter HeaderSets\n     * @param {Date} [options.minTimestamp] {@link Recorder#minTimestamp}\n     * @param {Date} [options.maxTimestamp] {@link Recorder#maxTimestamp}\n     * @param {number} [options.interval] {@link Recorder#interval}\n     * @returns {Promise} Promise resolving with a list of ranges that were synchronized.\n     */",
      "meta": {
        "range": [
          8045,
          8651
        ],
        "filename": "recorder.js",
        "lineno": 243,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100673133",
          "name": "Recorder#synchronizeTo",
          "type": "MethodDefinition",
          "paramnames": [
            "recorder",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Synchronize this Recorder's HeaderSets to another Recorder.",
      "params": [
        {
          "type": {
            "names": [
              "Recorder"
            ]
          },
          "description": "Destination Recorder",
          "name": "recorder"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Options to select and filter HeaderSets",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "optional": true,
          "description": "{@link Recorder#minTimestamp}",
          "name": "options.minTimestamp"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "optional": true,
          "description": "{@link Recorder#maxTimestamp}",
          "name": "options.maxTimestamp"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "{@link Recorder#interval}",
          "name": "options.interval"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "Promise resolving with a list of ranges that were synchronized."
        }
      ],
      "name": "synchronizeTo",
      "longname": "Recorder#synchronizeTo",
      "kind": "function",
      "memberof": "Recorder",
      "scope": "instance",
      "async": true,
      "___id": "T000002R298227",
      "___s": true
    },
    {
      "comment": "/**\n     * Starts a playback of the provided recorder, recording its data and returning a\n     * Promise that resolves to the recorded ranges.\n     *\n     * @param {Recorder} recorder The recorder to use for playback\n     * @param {RecorderSyncJob} syncJob The synchronization job to perform.\n     * @returns {Promise} Promise resolving with a list of ranges that were synchronized.\n     */",
      "meta": {
        "range": [
          10762,
          10864
        ],
        "filename": "recorder.js",
        "lineno": 323,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100673408",
          "name": "Recorder#_recordSyncJob",
          "type": "MethodDefinition",
          "paramnames": [
            "recorder",
            "syncJob"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Starts a playback of the provided recorder, recording its data and returning a\nPromise that resolves to the recorded ranges.",
      "params": [
        {
          "type": {
            "names": [
              "Recorder"
            ]
          },
          "description": "The recorder to use for playback",
          "name": "recorder"
        },
        {
          "type": {
            "names": [
              "RecorderSyncJob"
            ]
          },
          "description": "The synchronization job to perform.",
          "name": "syncJob"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "Promise resolving with a list of ranges that were synchronized."
        }
      ],
      "name": "_recordSyncJob",
      "longname": "Recorder#_recordSyncJob",
      "kind": "function",
      "memberof": "Recorder",
      "scope": "instance",
      "___id": "T000002R298256",
      "___s": true
    },
    {
      "comment": "/**\n     * Plays back the requested synchronization job, piping the resulting data into the\n     * provided stream. Returns a Promise that resolves to the played back ranges.\n     *\n     * @param {Stream} stream The stream (in object mode) to pipe data into\n     * @param {RecorderSyncJob} syncJob The synchronization job to perform.\n     * @returns {Promise} Promise resolving with a list of ranges that were synchronized.\n     */",
      "meta": {
        "range": [
          11306,
          11408
        ],
        "filename": "recorder.js",
        "lineno": 335,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100673418",
          "name": "Recorder#_playbackSyncJob",
          "type": "MethodDefinition",
          "paramnames": [
            "stream",
            "syncJob"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Plays back the requested synchronization job, piping the resulting data into the\nprovided stream. Returns a Promise that resolves to the played back ranges.",
      "params": [
        {
          "type": {
            "names": [
              "Stream"
            ]
          },
          "description": "The stream (in object mode) to pipe data into",
          "name": "stream"
        },
        {
          "type": {
            "names": [
              "RecorderSyncJob"
            ]
          },
          "description": "The synchronization job to perform.",
          "name": "syncJob"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "Promise resolving with a list of ranges that were synchronized."
        }
      ],
      "name": "_playbackSyncJob",
      "longname": "Recorder#_playbackSyncJob",
      "kind": "function",
      "memberof": "Recorder",
      "scope": "instance",
      "___id": "T000002R298257",
      "___s": true
    },
    {
      "comment": "/**\n     * Performs operations on two sets of timestamp ranges.\n     *\n     * Timestamp ranges are objects with two properties: `minTimestamp` and `maxTimestamp`.\n     *\n     * The operations correspond to the operations in mathematic's set theory.\n     * Currently supported are union, difference and intersection.\n     *\n     * See [http://en.wikipedia.org/wiki/Set_theory]() for details.\n     *\n     * @param {Array} rangesA Set A containing timestamp ranges\n     * @param {Array} rangesB Set B containing timestamp ranges\n     * @param {number} interval Interval to allow between adjacent timestamp ranges\n     * @param {string} operation Operation to perform, can be `'union'`, `'difference'` or `'intersection'`\n     * @returns {Array} Set containing timestamp ranges after the operation\n     */",
      "meta": {
        "range": [
          13838,
          22135
        ],
        "filename": "recorder.js",
        "lineno": 404,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100673638",
          "name": "Recorder.performRangeSetOperation",
          "type": "MethodDefinition",
          "paramnames": [
            "rangesA",
            "rangesB",
            "interval",
            "operation"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Performs operations on two sets of timestamp ranges.\n\nTimestamp ranges are objects with two properties: `minTimestamp` and `maxTimestamp`.\n\nThe operations correspond to the operations in mathematic's set theory.\nCurrently supported are union, difference and intersection.\n\nSee [http://en.wikipedia.org/wiki/Set_theory]() for details.",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Set A containing timestamp ranges",
          "name": "rangesA"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Set B containing timestamp ranges",
          "name": "rangesB"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Interval to allow between adjacent timestamp ranges",
          "name": "interval"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Operation to perform, can be `'union'`, `'difference'` or `'intersection'`",
          "name": "operation"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "Set containing timestamp ranges after the operation"
        }
      ],
      "name": "performRangeSetOperation",
      "longname": "Recorder.performRangeSetOperation",
      "kind": "function",
      "memberof": "Recorder",
      "scope": "static",
      "___id": "T000002R298274",
      "___s": true
    },
    {
      "comment": "/**\n     * Identifier for this recorder instance. It may be used to reference\n     * recorders, for example in sync data storage.\n     * @type {string}\n     */",
      "meta": {
        "range": [
          22379,
          22387
        ],
        "filename": "recorder.js",
        "lineno": 619,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100674487",
          "name": "id",
          "type": "Literal",
          "value": null
        }
      },
      "description": "Identifier for this recorder instance. It may be used to reference\nrecorders, for example in sync data storage.",
      "type": {
        "names": [
          "string"
        ]
      },
      "name": "id",
      "longname": "Recorder#id",
      "kind": "member",
      "memberof": "Recorder",
      "scope": "instance",
      "___id": "T000002R298336",
      "___s": true
    },
    {
      "comment": "/**\n     * Minimum timestamp to use as a default during playback and\n     * synchronization.\n     * @type {Date}\n     * @default '2001-01-01T00:00:00.000Z'\n     */",
      "meta": {
        "range": [
          22562,
          22580
        ],
        "filename": "recorder.js",
        "lineno": 627,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100674489",
          "name": "minTimestamp",
          "type": "Literal",
          "value": null
        }
      },
      "description": "Minimum timestamp to use as a default during playback and\nsynchronization.",
      "type": {
        "names": [
          "Date"
        ]
      },
      "defaultvalue": "'2001-01-01T00:00:00.000Z'",
      "name": "minTimestamp",
      "longname": "Recorder#minTimestamp",
      "kind": "member",
      "memberof": "Recorder",
      "scope": "instance",
      "___id": "T000002R298337",
      "___s": true
    },
    {
      "comment": "/**\n     * Maximum timestamp to use as a default during playback and\n     * synchronization.\n     * @type {Date}\n     * @default '2038-01-01T00:00:00.000Z'\n     */",
      "meta": {
        "range": [
          22755,
          22773
        ],
        "filename": "recorder.js",
        "lineno": 635,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100674491",
          "name": "maxTimestamp",
          "type": "Literal",
          "value": null
        }
      },
      "description": "Maximum timestamp to use as a default during playback and\nsynchronization.",
      "type": {
        "names": [
          "Date"
        ]
      },
      "defaultvalue": "'2038-01-01T00:00:00.000Z'",
      "name": "maxTimestamp",
      "longname": "Recorder#maxTimestamp",
      "kind": "member",
      "memberof": "Recorder",
      "scope": "instance",
      "___id": "T000002R298338",
      "___s": true
    },
    {
      "comment": "/**\n     * Interval to be used as a default during playback and\n     * synchronization.\n     * @type {number}\n     * @default 0\n     */",
      "meta": {
        "range": [
          22920,
          22931
        ],
        "filename": "recorder.js",
        "lineno": 643,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100674493",
          "name": "interval",
          "type": "Literal",
          "value": 0
        }
      },
      "description": "Interval to be used as a default during playback and\nsynchronization.",
      "type": {
        "names": [
          "number"
        ]
      },
      "defaultvalue": "0",
      "name": "interval",
      "longname": "Recorder#interval",
      "kind": "member",
      "memberof": "Recorder",
      "scope": "instance",
      "___id": "T000002R298339",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a new SerialConnection instance and optionally initialized its member with the given values.\n     *\n     * @constructs\n     * @augments Connection\n     * @param {object} options Initialization values\n     * @param {string} options.path See {@link SerialConnection#path}\n     *\n     * @classdesc\n     * The SerialConnection class provides asscess to a VBus live data stream using a serial port.\n     */",
      "meta": {
        "range": [
          796,
          902
        ],
        "filename": "serial-connection.js",
        "lineno": 39,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100674539",
          "name": "SerialConnection",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new SerialConnection instance and optionally initialized its member with the given values.",
      "alias": "SerialConnection",
      "kind": "class",
      "augments": [
        "Connection"
      ],
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Initialization values",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "See {@link SerialConnection#path}",
          "name": "options.path"
        }
      ],
      "classdesc": "The SerialConnection class provides asscess to a VBus live data stream using a serial port.",
      "name": "SerialConnection",
      "longname": "SerialConnection",
      "scope": "global",
      "___id": "T000002R298347",
      "___s": true
    },
    {
      "comment": "/**\n     * The path to the serial port.\n     * @type {string}\n     */",
      "meta": {
        "range": [
          5274,
          5284
        ],
        "filename": "serial-connection.js",
        "lineno": 188,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100675000",
          "name": "path",
          "type": "Literal",
          "value": null
        }
      },
      "description": "The path to the serial port.",
      "type": {
        "names": [
          "string"
        ]
      },
      "name": "path",
      "longname": "SerialConnection#path",
      "kind": "member",
      "memberof": "SerialConnection",
      "scope": "instance",
      "___id": "T000002R298378",
      "___s": true
    },
    {
      "comment": "/**\n     * Timeout in milliseconds to way between reconnection retries.\n     * @type {number}\n     */",
      "meta": {
        "range": [
          5418,
          5437
        ],
        "filename": "serial-connection.js",
        "lineno": 196,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100675004",
          "name": "reconnectTimeout",
          "type": "Literal",
          "value": 0
        }
      },
      "description": "Timeout in milliseconds to way between reconnection retries.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "reconnectTimeout",
      "longname": "SerialConnection#reconnectTimeout",
      "kind": "member",
      "memberof": "SerialConnection",
      "scope": "instance",
      "___id": "T000002R298380",
      "___s": true
    },
    {
      "comment": "/**\n     * Value to increment timeout after every unsuccessful reconnection retry.\n     * @type {number}\n     */",
      "meta": {
        "range": [
          5561,
          5588
        ],
        "filename": "serial-connection.js",
        "lineno": 202,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100675006",
          "name": "reconnectTimeoutIncr",
          "type": "Literal",
          "value": 10000
        }
      },
      "description": "Value to increment timeout after every unsuccessful reconnection retry.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "reconnectTimeoutIncr",
      "longname": "SerialConnection#reconnectTimeoutIncr",
      "kind": "member",
      "memberof": "SerialConnection",
      "scope": "instance",
      "___id": "T000002R298381",
      "___s": true
    },
    {
      "comment": "/**\n     * Maximum timeout value between unsuccessful reconnection retry.\n     * @type {number}\n     */",
      "meta": {
        "range": [
          5703,
          5729
        ],
        "filename": "serial-connection.js",
        "lineno": 208,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100675008",
          "name": "reconnectTimeoutMax",
          "type": "Literal",
          "value": 60000
        }
      },
      "description": "Maximum timeout value between unsuccessful reconnection retry.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "reconnectTimeoutMax",
      "longname": "SerialConnection#reconnectTimeoutMax",
      "kind": "member",
      "memberof": "SerialConnection",
      "scope": "instance",
      "___id": "T000002R298382",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a new SerialDataSource.\n     *\n     * @constructs\n     * @augments DataSource\n     */",
      "meta": {
        "range": [
          428,
          534
        ],
        "filename": "serial-data-source.js",
        "lineno": 27,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100675264",
          "name": "SerialDataSource",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new SerialDataSource.",
      "alias": "SerialDataSource",
      "kind": "class",
      "augments": [
        "DataSource"
      ],
      "name": "SerialDataSource",
      "longname": "SerialDataSource",
      "scope": "global",
      "params": [],
      "___id": "T000002R298416",
      "___s": true
    },
    {
      "comment": "/**\n     * The path to the serial port.\n     */",
      "meta": {
        "range": [
          1056,
          1066
        ],
        "filename": "serial-data-source.js",
        "lineno": 58,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100675339",
          "name": "path",
          "type": "Literal",
          "value": null
        }
      },
      "description": "The path to the serial port.",
      "name": "path",
      "longname": "SerialDataSource#path",
      "kind": "member",
      "memberof": "SerialDataSource",
      "scope": "instance",
      "___id": "T000002R298424",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef UnitSpecification\n * @type {object}\n * @property {String} unitId Unit identifier\n * @property {String} unitCode Unit code\n * @property {String} unitFamily Unit family\n * @property {String} unitText Unit text\n */",
      "meta": {
        "filename": "specification.js",
        "lineno": 54,
        "columnno": 0,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {}
      },
      "kind": "typedef",
      "name": "UnitSpecification",
      "type": {
        "names": [
          "object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Unit identifier",
          "name": "unitId"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Unit code",
          "name": "unitCode"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Unit family",
          "name": "unitFamily"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Unit text",
          "name": "unitText"
        }
      ],
      "longname": "UnitSpecification",
      "scope": "global",
      "___id": "T000002R298733",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef TypeSpecification\n * @type {object}\n * @property {String} typeId Type identifier\n * @property {String} rootTypeId Root type identifier\n * @property {number} precision Precision for numeral values\n * @property {UnitSpecification} unit Unit object\n */",
      "meta": {
        "filename": "specification.js",
        "lineno": 63,
        "columnno": 0,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {}
      },
      "kind": "typedef",
      "name": "TypeSpecification",
      "type": {
        "names": [
          "object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Type identifier",
          "name": "typeId"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "Root type identifier",
          "name": "rootTypeId"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Precision for numeral values",
          "name": "precision"
        },
        {
          "type": {
            "names": [
              "UnitSpecification"
            ]
          },
          "description": "Unit object",
          "name": "unit"
        }
      ],
      "longname": "TypeSpecification",
      "scope": "global",
      "___id": "T000002R298734",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef DeviceSpecification\n * @type {object}\n * @property {string} deviceId Device identifier\n * @property {number} channel VBus channel\n * @property {number} selfAddress VBus address of the device itself\n * @property {number} peerAddress VBus address of the device's peer\n * @property {string} name Name of the device\n * @property {string} fullName Name of the device optionally prefixed with VBus channel (if it is not 0)\n */",
      "meta": {
        "filename": "specification.js",
        "lineno": 72,
        "columnno": 0,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {}
      },
      "kind": "typedef",
      "name": "DeviceSpecification",
      "type": {
        "names": [
          "object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Device identifier",
          "name": "deviceId"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "VBus channel",
          "name": "channel"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "VBus address of the device itself",
          "name": "selfAddress"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "VBus address of the device's peer",
          "name": "peerAddress"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Name of the device",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Name of the device optionally prefixed with VBus channel (if it is not 0)",
          "name": "fullName"
        }
      ],
      "longname": "DeviceSpecification",
      "scope": "global",
      "___id": "T000002R298735",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef PacketSpecification\n * @type {object}\n * @property {string} packetId Packet identifier\n * @property {number} channel VBus channel\n * @property {number} destinationAddress VBus address of the destination device\n * @property {number} sourceAddress VBus address of the source device\n * @property {number} protocolVersion VBus protocol version\n * @property {number} command VBus command\n * @property {number} info Additional info for sorting purposes\n * @property {DeviceSpecification} destinationDevice DeviceSpecification object of the destination device\n * @property {DeviceSpecification} sourceDevice DeviceSpecification object of the source device\n * @property {PacketFieldSpecification[]} packetFields Array of PacketFieldSpecification objects\n */",
      "meta": {
        "filename": "specification.js",
        "lineno": 83,
        "columnno": 0,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {}
      },
      "kind": "typedef",
      "name": "PacketSpecification",
      "type": {
        "names": [
          "object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Packet identifier",
          "name": "packetId"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "VBus channel",
          "name": "channel"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "VBus address of the destination device",
          "name": "destinationAddress"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "VBus address of the source device",
          "name": "sourceAddress"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "VBus protocol version",
          "name": "protocolVersion"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "VBus command",
          "name": "command"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Additional info for sorting purposes",
          "name": "info"
        },
        {
          "type": {
            "names": [
              "DeviceSpecification"
            ]
          },
          "description": "DeviceSpecification object of the destination device",
          "name": "destinationDevice"
        },
        {
          "type": {
            "names": [
              "DeviceSpecification"
            ]
          },
          "description": "DeviceSpecification object of the source device",
          "name": "sourceDevice"
        },
        {
          "type": {
            "names": [
              "Array.<PacketFieldSpecification>"
            ]
          },
          "description": "Array of PacketFieldSpecification objects",
          "name": "packetFields"
        }
      ],
      "longname": "PacketSpecification",
      "scope": "global",
      "___id": "T000002R298736",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef packetFieldGetRawValue\n * @type {function}\n * @param {Buffer} buffer Buffer object\n * @param {number} start Start index in the buffer\n * @param {number} end End index in the buffer\n */",
      "meta": {
        "filename": "specification.js",
        "lineno": 98,
        "columnno": 0,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {}
      },
      "kind": "typedef",
      "name": "packetFieldGetRawValue",
      "type": {
        "names": [
          "function"
        ]
      },
      "params": [
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "Buffer object",
          "name": "buffer"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Start index in the buffer",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "End index in the buffer",
          "name": "end"
        }
      ],
      "longname": "packetFieldGetRawValue",
      "scope": "global",
      "___id": "T000002R298737",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef PacketFieldSpecification\n * @type {object}\n * @property {string} fieldId Field identifier\n * @property {object} name Object containing names by language code\n * @property {TypeSpecification} type TypeSpecification object\n * @property {packetFieldGetRawValue} getRawValue Function to get raw value from a buffer\n */",
      "meta": {
        "filename": "specification.js",
        "lineno": 106,
        "columnno": 0,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {}
      },
      "kind": "typedef",
      "name": "PacketFieldSpecification",
      "type": {
        "names": [
          "object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Field identifier",
          "name": "fieldId"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Object containing names by language code",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "TypeSpecification"
            ]
          },
          "description": "TypeSpecification object",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "packetFieldGetRawValue"
            ]
          },
          "description": "Function to get raw value from a buffer",
          "name": "getRawValue"
        }
      ],
      "longname": "PacketFieldSpecification",
      "scope": "global",
      "___id": "T000002R298738",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef PacketField\n * @type {object}\n * @property {string} id Packet field identifier\n * @property {Packet} packet Packet\n * @property {PacketSpecification} packetSpec\n * @property {PacketFieldSpecification} packetFieldSpec\n * @property {PacketFieldSpecification} origPacketFieldSpec\n * @property {string} name\n * @property {number} rawValue Raw value\n * @property {function} formatTextValue Function to format this packet field's raw value into textual form\n */",
      "meta": {
        "filename": "specification.js",
        "lineno": 115,
        "columnno": 0,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {}
      },
      "kind": "typedef",
      "name": "PacketField",
      "type": {
        "names": [
          "object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Packet field identifier",
          "name": "id"
        },
        {
          "type": {
            "names": [
              "Packet"
            ]
          },
          "description": "Packet",
          "name": "packet"
        },
        {
          "type": {
            "names": [
              "PacketSpecification"
            ]
          },
          "name": "packetSpec"
        },
        {
          "type": {
            "names": [
              "PacketFieldSpecification"
            ]
          },
          "name": "packetFieldSpec"
        },
        {
          "type": {
            "names": [
              "PacketFieldSpecification"
            ]
          },
          "name": "origPacketFieldSpec"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "name"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Raw value",
          "name": "rawValue"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Function to format this packet field's raw value into textual form",
          "name": "formatTextValue"
        }
      ],
      "longname": "PacketField",
      "scope": "global",
      "___id": "T000002R298739",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef FilteredPacketFieldSpecification\n * @type {object}\n * @property {string} filteredPacketFieldId\n * @property {string} packetId\n * @property {string} fieldId\n * @property {string} name\n * @property {string} type\n * @property {string} getRawValue\n */",
      "meta": {
        "filename": "specification.js",
        "lineno": 128,
        "columnno": 0,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {}
      },
      "kind": "typedef",
      "name": "FilteredPacketFieldSpecification",
      "type": {
        "names": [
          "object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "filteredPacketFieldId"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "packetId"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "fieldId"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "name"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "type"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "getRawValue"
        }
      ],
      "longname": "FilteredPacketFieldSpecification",
      "scope": "global",
      "___id": "T000002R298740",
      "___s": true
    },
    {
      "comment": "/**\n * @typedef BlockTypeSection\n * @type {object}\n * @property {string} sectionId Section identifier\n * @property {string} surrogatePacketId Surrogate packet identifier\n * @property {Packet} packet Packet object\n * @property {PacketSpecification} packetSpec PacketSpecification object\n * @property {number} startOffset Offset of section start within Packet frame data\n * @property {number} endOffset Offset of section end within Packet frame data\n * @property {number} type Section type\n * @property {number} payloadCount Count of payload elements\n * @property {number} frameCount Count of frames\n * @property {Buffer} frameData Frame data\n */",
      "meta": {
        "filename": "specification.js",
        "lineno": 139,
        "columnno": 0,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {}
      },
      "kind": "typedef",
      "name": "BlockTypeSection",
      "type": {
        "names": [
          "object"
        ]
      },
      "properties": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Section identifier",
          "name": "sectionId"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Surrogate packet identifier",
          "name": "surrogatePacketId"
        },
        {
          "type": {
            "names": [
              "Packet"
            ]
          },
          "description": "Packet object",
          "name": "packet"
        },
        {
          "type": {
            "names": [
              "PacketSpecification"
            ]
          },
          "description": "PacketSpecification object",
          "name": "packetSpec"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Offset of section start within Packet frame data",
          "name": "startOffset"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Offset of section end within Packet frame data",
          "name": "endOffset"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Section type",
          "name": "type"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Count of payload elements",
          "name": "payloadCount"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Count of frames",
          "name": "frameCount"
        },
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "Frame data",
          "name": "frameData"
        }
      ],
      "longname": "BlockTypeSection",
      "scope": "global",
      "___id": "T000002R298741",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a new Specification instance and optionally initializes its members with the given values.\n     *\n     * @constructs\n     * @param {object} options Initialization values for this instance's members\n     * @param {string} options.language {@link Specification#language}\n     * @param {string} options.specificationData {@link Specification#specificationData}\n     */",
      "meta": {
        "range": [
          4995,
          5765
        ],
        "filename": "specification.js",
        "lineno": 166,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100678257",
          "name": "Specification",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new Specification instance and optionally initializes its members with the given values.",
      "alias": "Specification",
      "kind": "class",
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Initialization values for this instance's members",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "{@link Specification#language}",
          "name": "options.language"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "{@link Specification#specificationData}",
          "name": "options.specificationData"
        }
      ],
      "name": "Specification",
      "longname": "Specification",
      "scope": "global",
      "___id": "T000002R298743",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the UnitSpecification object matching the given identifier.\n     *\n     * @param {string} id Unit identifier\n     * @returns {UnitSpecification} Unit object\n     *\n     * @example\n     * > console.log(spec.getUnitById('DegreesCelsius'));\n     * { unitId: 'DegreesCelsius',\n     *   unitCode: 'DegreesCelsius',\n     *   unitText: ' °C' }\n     * undefined\n     * >\n     */",
      "meta": {
        "range": [
          6162,
          6235
        ],
        "filename": "specification.js",
        "lineno": 201,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100678351",
          "name": "Specification#getUnitById",
          "type": "MethodDefinition",
          "paramnames": [
            "id"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Gets the UnitSpecification object matching the given identifier.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Unit identifier",
          "name": "id"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "UnitSpecification"
            ]
          },
          "description": "Unit object"
        }
      ],
      "examples": [
        "> console.log(spec.getUnitById('DegreesCelsius'));\n{ unitId: 'DegreesCelsius',\n  unitCode: 'DegreesCelsius',\n  unitText: ' °C' }\nundefined\n>"
      ],
      "name": "getUnitById",
      "longname": "Specification#getUnitById",
      "kind": "function",
      "memberof": "Specification",
      "scope": "instance",
      "___id": "T000002R298753",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the TypeSpecification object matching the given identifier.\n     *\n     * @param {string} id Type identifier\n     * @returns {TypeSpecification} Type object\n     *\n     * @example\n     * > console.log(spec.getTypeById('Number_0_1_DegreesCelsius'));\n     * { typeId: 'Number_0_1_DegreesCelsius',\n     *   rootTypeId: 'Number',\n     *   precision: 1,\n     *   unit:\n     *    { unitId: 'DegreesCelsius',\n     *      unitCode: 'DegreesCelsius',\n     *      unitText: ' °C' } }\n     * undefined\n     * >\n     */",
      "meta": {
        "range": [
          6769,
          6842
        ],
        "filename": "specification.js",
        "lineno": 223,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100678364",
          "name": "Specification#getTypeById",
          "type": "MethodDefinition",
          "paramnames": [
            "id"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Gets the TypeSpecification object matching the given identifier.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Type identifier",
          "name": "id"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "TypeSpecification"
            ]
          },
          "description": "Type object"
        }
      ],
      "examples": [
        "> console.log(spec.getTypeById('Number_0_1_DegreesCelsius'));\n{ typeId: 'Number_0_1_DegreesCelsius',\n  rootTypeId: 'Number',\n  precision: 1,\n  unit:\n   { unitId: 'DegreesCelsius',\n     unitCode: 'DegreesCelsius',\n     unitText: ' °C' } }\nundefined\n>"
      ],
      "name": "getTypeById",
      "longname": "Specification#getTypeById",
      "kind": "function",
      "memberof": "Specification",
      "scope": "instance",
      "___id": "T000002R298754",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the DeviceSpecification object matching the given arguments.\n     *\n     * @memberof Specification#\n     * @name getDeviceSpecification\n     * @method\n     *\n     * @param {number} selfAddress VBus address of the device itself\n     * @param {number} peerAddress VBus address of the device's peer\n     * @param {number} [channel=0] VBus channel of the device\n     * @returns {DeviceSpecification} DeviceSpecification object\n     *\n     * @example\n     * > console.log(spec.getDeviceSpecification(0x7E11, 0x0000, 1));\n     * { name: 'DeltaSol MX [Regler]',\n     *   deviceId: '01_7E11_0000',\n     *   channel: 1,\n     *   selfAddress: 32273,\n     *   peerAddress: 0,\n     *   fullName: 'VBus #1: DeltaSol MX [Regler]' }\n     * undefined\n     * >\n     */",
      "meta": {
        "filename": "specification.js",
        "lineno": 227,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {}
      },
      "description": "Gets the DeviceSpecification object matching the given arguments.",
      "memberof": "Specification",
      "name": "getDeviceSpecification",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "VBus address of the device itself",
          "name": "selfAddress"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "VBus address of the device's peer",
          "name": "peerAddress"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "VBus channel of the device",
          "name": "channel"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "DeviceSpecification"
            ]
          },
          "description": "DeviceSpecification object"
        }
      ],
      "examples": [
        "> console.log(spec.getDeviceSpecification(0x7E11, 0x0000, 1));\n{ name: 'DeltaSol MX [Regler]',\n  deviceId: '01_7E11_0000',\n  channel: 1,\n  selfAddress: 32273,\n  peerAddress: 0,\n  fullName: 'VBus #1: DeltaSol MX [Regler]' }\nundefined\n>"
      ],
      "longname": "Specification#getDeviceSpecification",
      "scope": "instance",
      "___id": "T000002R298755",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the DeviceSpecification object matching the given header and direction.\n     *\n     * @param {Header} header Header instance\n     * @param {string} which Either `'source'` or `'destination'`\n     * @returns {DeviceSpecification} DeviceSpecification object\n     */",
      "meta": {
        "range": [
          7905,
          10467
        ],
        "filename": "specification.js",
        "lineno": 258,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100678377",
          "name": "Specification#getDeviceSpecification",
          "type": "MethodDefinition",
          "paramnames": [
            "selfAddress",
            "peerAddress",
            "channel"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Gets the DeviceSpecification object matching the given header and direction.",
      "params": [
        {
          "type": {
            "names": [
              "Header"
            ]
          },
          "description": "Header instance",
          "name": "header"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Either `'source'` or `'destination'`",
          "name": "which"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "DeviceSpecification"
            ]
          },
          "description": "DeviceSpecification object"
        }
      ],
      "name": "getDeviceSpecification",
      "longname": "Specification#getDeviceSpecification",
      "kind": "function",
      "memberof": "Specification",
      "scope": "instance",
      "___id": "T000002R298756",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the PacketSpecification object matching the given arguments.\n     *\n     * @memberof Specification#\n     * @name getPacketSpecification\n     * @method\n     *\n     * @param {number} channel VBus channel\n     * @param {number} destinationAddress VBus address of destination device\n     * @param {number} sourceAddress VBus address of source device\n     * @param {number} command VBus command\n     * @returns {PacketSpecification} PacketSpecification object\n     *\n     * @example\n     * > console.log(spec.getPacketSpecification(1, 0x0010, 0x7E21, 0x0100));\n     * { packetId: '01_0010_7E21_10_0100',\n     *   packetFields:\n     *    [ { fieldId: '000_2_0',\n     *        name: [Object],\n     *        type: [Object],\n     *        getRawValue: [Function] },\n     *      { fieldId: '002_1_0',\n     *        name: [Object],\n     *        type: [Object],\n     *        getRawValue: [Function] } ],\n     *   channel: 1,\n     *   destinationAddress: 16,\n     *   sourceAddress: 32289,\n     *   protocolVersion: 16,\n     *   command: 256,\n     *   info: 0,\n     *   destinationDevice:\n     *    { name: 'DFA',\n     *      deviceId: '01_0010_7E21',\n     *      channel: 1,\n     *      selfAddress: 16,\n     *      peerAddress: 32289,\n     *      fullName: 'VBus #1: DFA' },\n     *   sourceDevice:\n     *    { name: 'DeltaSol MX [Heizkreis #1]',\n     *      deviceId: '01_7E21_0010',\n     *      channel: 1,\n     *      selfAddress: 32289,\n     *      peerAddress: 16,\n     *      fullName: 'VBus #1: DeltaSol MX [Heizkreis #1]' },\n     *   fullName: 'VBus #1: DeltaSol MX [Heizkreis #1]' }\n     * undefined\n     * >\n     */",
      "meta": {
        "filename": "specification.js",
        "lineno": 324,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {}
      },
      "description": "Gets the PacketSpecification object matching the given arguments.",
      "memberof": "Specification",
      "name": "getPacketSpecification",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "VBus channel",
          "name": "channel"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "VBus address of destination device",
          "name": "destinationAddress"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "VBus address of source device",
          "name": "sourceAddress"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "VBus command",
          "name": "command"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "PacketSpecification"
            ]
          },
          "description": "PacketSpecification object"
        }
      ],
      "examples": [
        "> console.log(spec.getPacketSpecification(1, 0x0010, 0x7E21, 0x0100));\n{ packetId: '01_0010_7E21_10_0100',\n  packetFields:\n   [ { fieldId: '000_2_0',\n       name: [Object],\n       type: [Object],\n       getRawValue: [Function] },\n     { fieldId: '002_1_0',\n       name: [Object],\n       type: [Object],\n       getRawValue: [Function] } ],\n  channel: 1,\n  destinationAddress: 16,\n  sourceAddress: 32289,\n  protocolVersion: 16,\n  command: 256,\n  info: 0,\n  destinationDevice:\n   { name: 'DFA',\n     deviceId: '01_0010_7E21',\n     channel: 1,\n     selfAddress: 16,\n     peerAddress: 32289,\n     fullName: 'VBus #1: DFA' },\n  sourceDevice:\n   { name: 'DeltaSol MX [Heizkreis #1]',\n     deviceId: '01_7E21_0010',\n     channel: 1,\n     selfAddress: 32289,\n     peerAddress: 16,\n     fullName: 'VBus #1: DeltaSol MX [Heizkreis #1]' },\n  fullName: 'VBus #1: DeltaSol MX [Heizkreis #1]' }\nundefined\n>"
      ],
      "longname": "Specification#getPacketSpecification",
      "scope": "instance",
      "___id": "T000002R298783",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the PacketSpecification object matching the given arguments.\n     *\n     * @memberof Specification#\n     * @name getPacketSpecification\n     * @method\n     *\n     * @param {string} packetSpecId PacketSpecification identifier\n     * @returns {PacketSpecification} PacketSpecification object\n     *\n     * @example\n     * > console.log(spec.getPacketSpecification('01_0010_7E21_10_0100'));\n     * { packetId: '01_0010_7E21_10_0100',\n     *   packetFields:\n     *    [ { fieldId: '000_2_0',\n     *        name: [Object],\n     *        type: [Object],\n     *        getRawValue: [Function] },\n     *      { fieldId: '002_1_0',\n     *        name: [Object],\n     *        type: [Object],\n     *        getRawValue: [Function] } ],\n     *   channel: 1,\n     *   destinationAddress: 16,\n     *   sourceAddress: 32289,\n     *   protocolVersion: 16,\n     *   command: 256,\n     *   info: 0,\n     *   destinationDevice:\n     *    { name: 'DFA',\n     *      deviceId: '01_0010_7E21',\n     *      channel: 1,\n     *      selfAddress: 16,\n     *      peerAddress: 32289,\n     *      fullName: 'VBus #1: DFA' },\n     *   sourceDevice:\n     *    { name: 'DeltaSol MX [Heizkreis #1]',\n     *      deviceId: '01_7E21_0010',\n     *      channel: 1,\n     *      selfAddress: 32289,\n     *      peerAddress: 16,\n     *      fullName: 'VBus #1: DeltaSol MX [Heizkreis #1]' },\n     *   fullName: 'VBus #1: DeltaSol MX [Heizkreis #1]' }\n     * undefined\n     * >\n     */",
      "meta": {
        "filename": "specification.js",
        "lineno": 374,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {}
      },
      "description": "Gets the PacketSpecification object matching the given arguments.",
      "memberof": "Specification",
      "name": "getPacketSpecification",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "PacketSpecification identifier",
          "name": "packetSpecId"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "PacketSpecification"
            ]
          },
          "description": "PacketSpecification object"
        }
      ],
      "examples": [
        "> console.log(spec.getPacketSpecification('01_0010_7E21_10_0100'));\n{ packetId: '01_0010_7E21_10_0100',\n  packetFields:\n   [ { fieldId: '000_2_0',\n       name: [Object],\n       type: [Object],\n       getRawValue: [Function] },\n     { fieldId: '002_1_0',\n       name: [Object],\n       type: [Object],\n       getRawValue: [Function] } ],\n  channel: 1,\n  destinationAddress: 16,\n  sourceAddress: 32289,\n  protocolVersion: 16,\n  command: 256,\n  info: 0,\n  destinationDevice:\n   { name: 'DFA',\n     deviceId: '01_0010_7E21',\n     channel: 1,\n     selfAddress: 16,\n     peerAddress: 32289,\n     fullName: 'VBus #1: DFA' },\n  sourceDevice:\n   { name: 'DeltaSol MX [Heizkreis #1]',\n     deviceId: '01_7E21_0010',\n     channel: 1,\n     selfAddress: 32289,\n     peerAddress: 16,\n     fullName: 'VBus #1: DeltaSol MX [Heizkreis #1]' },\n  fullName: 'VBus #1: DeltaSol MX [Heizkreis #1]' }\nundefined\n>"
      ],
      "longname": "Specification#getPacketSpecification",
      "scope": "instance",
      "___id": "T000002R298784",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the PacketSpecification object matching the given packet.\n     *\n     * @param {Packet} packet VBus packet\n     * @returns {PacketSpecification} PacketSpecification object\n     */",
      "meta": {
        "range": [
          13779,
          16239
        ],
        "filename": "specification.js",
        "lineno": 427,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100678663",
          "name": "Specification#getPacketSpecification",
          "type": "MethodDefinition",
          "paramnames": [
            "headerOrChannel",
            "destinationAddress",
            "sourceAddress",
            "command"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Gets the PacketSpecification object matching the given packet.",
      "params": [
        {
          "type": {
            "names": [
              "Packet"
            ]
          },
          "description": "VBus packet",
          "name": "packet"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "PacketSpecification"
            ]
          },
          "description": "PacketSpecification object"
        }
      ],
      "name": "getPacketSpecification",
      "longname": "Specification#getPacketSpecification",
      "kind": "function",
      "memberof": "Specification",
      "scope": "instance",
      "___id": "T000002R298785",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the PacketFieldSpecification object matching the given arguments.\n     *\n     * @memberof Specification#\n     * @name getPacketFieldSpecification\n     * @method\n     *\n     * @param {PacketSpecification} packetSpec PacketSpecification object\n     * @param {string} fieldId Field identifier\n     * @returns {PacketFieldSpecification} PacketFieldSpecification object\n     *\n     * @example\n     * > var packetSpec = spec.getPacketSpecification('01_0010_7E21_10_0100');\n     * undefined\n     * > console.log(spec.getPacketFieldSpecification(packetSpec, '000_2_0'));\n     * { fieldId: '000_2_0',\n     *   name:\n     *    { ref: 'Flow set temperature',\n     *      en: 'Flow set temperature',\n     *      de: 'Vorlauf-Soll-Temperatur',\n     *      fr: 'Température nominale départ' },\n     *   type:\n     *    { typeId: 'Number_0_1_DegreesCelsius',\n     *      rootTypeId: 'Number',\n     *      precision: 1,\n     *      unit:\n     *       { unitId: 'DegreesCelsius',\n     *         unitCode: 'DegreesCelsius',\n     *         unitText: ' °C' } },\n     *   getRawValue: [Function] }\n     * undefined\n     * >\n     */",
      "meta": {
        "filename": "specification.js",
        "lineno": 485,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {}
      },
      "description": "Gets the PacketFieldSpecification object matching the given arguments.",
      "memberof": "Specification",
      "name": "getPacketFieldSpecification",
      "kind": "function",
      "params": [
        {
          "type": {
            "names": [
              "PacketSpecification"
            ]
          },
          "description": "PacketSpecification object",
          "name": "packetSpec"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Field identifier",
          "name": "fieldId"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "PacketFieldSpecification"
            ]
          },
          "description": "PacketFieldSpecification object"
        }
      ],
      "examples": [
        "> var packetSpec = spec.getPacketSpecification('01_0010_7E21_10_0100');\nundefined\n> console.log(spec.getPacketFieldSpecification(packetSpec, '000_2_0'));\n{ fieldId: '000_2_0',\n  name:\n   { ref: 'Flow set temperature',\n     en: 'Flow set temperature',\n     de: 'Vorlauf-Soll-Temperatur',\n     fr: 'Température nominale départ' },\n  type:\n   { typeId: 'Number_0_1_DegreesCelsius',\n     rootTypeId: 'Number',\n     precision: 1,\n     unit:\n      { unitId: 'DegreesCelsius',\n        unitCode: 'DegreesCelsius',\n        unitText: ' °C' } },\n  getRawValue: [Function] }\nundefined\n>"
      ],
      "longname": "Specification#getPacketFieldSpecification",
      "scope": "instance",
      "___id": "T000002R298816",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the PacketFieldSpecification object matching the given arguments.\n     *\n     * @param {string} packetFieldId Packet field identifier\n     * @returns {PacketFieldSpecification} PacketFieldSpecification object\n     *\n     * @example\n     * > console.log(spec.getPacketFieldSpecification('01_0010_7E21_10_0100_000_2_0'));\n     * { fieldId: '000_2_0',\n     *   name:\n     *    { ref: 'Flow set temperature',\n     *      en: 'Flow set temperature',\n     *      de: 'Vorlauf-Soll-Temperatur',\n     *      fr: 'Température nominale départ' },\n     *   type:\n     *    { typeId: 'Number_0_1_DegreesCelsius',\n     *      rootTypeId: 'Number',\n     *      precision: 1,\n     *      unit:\n     *       { unitId: 'DegreesCelsius',\n     *         unitCode: 'DegreesCelsius',\n     *         unitText: ' °C' } },\n     *   getRawValue: [Function] }\n     * undefined\n     * >\n     */",
      "meta": {
        "range": [
          18265,
          19186
        ],
        "filename": "specification.js",
        "lineno": 545,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100678921",
          "name": "Specification#getPacketFieldSpecification",
          "type": "MethodDefinition",
          "paramnames": [
            "packetSpecOrId",
            "fieldId"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Gets the PacketFieldSpecification object matching the given arguments.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Packet field identifier",
          "name": "packetFieldId"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "PacketFieldSpecification"
            ]
          },
          "description": "PacketFieldSpecification object"
        }
      ],
      "examples": [
        "> console.log(spec.getPacketFieldSpecification('01_0010_7E21_10_0100_000_2_0'));\n{ fieldId: '000_2_0',\n  name:\n   { ref: 'Flow set temperature',\n     en: 'Flow set temperature',\n     de: 'Vorlauf-Soll-Temperatur',\n     fr: 'Température nominale départ' },\n  type:\n   { typeId: 'Number_0_1_DegreesCelsius',\n     rootTypeId: 'Number',\n     precision: 1,\n     unit:\n      { unitId: 'DegreesCelsius',\n        unitCode: 'DegreesCelsius',\n        unitText: ' °C' } },\n  getRawValue: [Function] }\nundefined\n>"
      ],
      "name": "getPacketFieldSpecification",
      "longname": "Specification#getPacketFieldSpecification",
      "kind": "function",
      "memberof": "Specification",
      "scope": "instance",
      "___id": "T000002R298817",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the raw value of a packet field from a buffer.\n     *\n     * @param {PacketFieldSpecification} packetField PacketFieldSpecification object\n     * @param {Buffer} buffer Buffer object\n     * @param {number} [start=0] Start index in the buffer\n     * @param {number} [end=buffer.length] End index in the buffer\n     * @returns {number} Raw value\n     *\n     * @example\n     * > var packetFieldSpec = spec.getPacketFieldSpecification('01_0010_7721_10_0100_000_2_0');\n     * undefined\n     * > var buffer = Buffer.from('b822', 'hex');\n     * undefined\n     * > console.log(spec.getRawValue(packetFieldSpec, buffer));\n     * 888.8000000000001\n     * undefined\n     * >\n     */",
      "meta": {
        "range": [
          19884,
          20845
        ],
        "filename": "specification.js",
        "lineno": 589,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100679015",
          "name": "Specification#getRawValue",
          "type": "MethodDefinition",
          "paramnames": [
            "packetField",
            "buffer",
            "start",
            "end"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Gets the raw value of a packet field from a buffer.",
      "params": [
        {
          "type": {
            "names": [
              "PacketFieldSpecification"
            ]
          },
          "description": "PacketFieldSpecification object",
          "name": "packetField"
        },
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "Buffer object",
          "name": "buffer"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "description": "Start index in the buffer",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "defaultvalue": "buffer.length",
          "description": "End index in the buffer",
          "name": "end"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Raw value"
        }
      ],
      "examples": [
        "> var packetFieldSpec = spec.getPacketFieldSpecification('01_0010_7721_10_0100_000_2_0');\nundefined\n> var buffer = Buffer.from('b822', 'hex');\nundefined\n> console.log(spec.getRawValue(packetFieldSpec, buffer));\n888.8000000000001\nundefined\n>"
      ],
      "name": "getRawValue",
      "longname": "Specification#getRawValue",
      "kind": "function",
      "memberof": "Specification",
      "scope": "instance",
      "___id": "T000002R298826",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts a raw number value from one unit to another. The units must be in the same unit family.\n     *\n     * @param {number} rawValue Raw number value to convert from\n     * @param {Unit} sourceUnit Unit to convert from\n     * @param {Unit} targetUnit Unit to convert to\n     * @return {object} Result containing a `rawValue` property with the conversion result and a `unit` property with the associated unit.\n     */",
      "meta": {
        "range": [
          23611,
          27294
        ],
        "filename": "specification.js",
        "lineno": 688,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100679438",
          "name": "Specification#convertRawValue",
          "type": "MethodDefinition",
          "paramnames": [
            "rawValue_",
            "sourceUnit_",
            "targetUnit_"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Converts a raw number value from one unit to another. The units must be in the same unit family.",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Raw number value to convert from",
          "name": "rawValue"
        },
        {
          "type": {
            "names": [
              "Unit"
            ]
          },
          "description": "Unit to convert from",
          "name": "sourceUnit"
        },
        {
          "type": {
            "names": [
              "Unit"
            ]
          },
          "description": "Unit to convert to",
          "name": "targetUnit"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Result containing a `rawValue` property with the conversion result and a `unit` property with the associated unit."
        }
      ],
      "name": "convertRawValue",
      "longname": "Specification#convertRawValue",
      "kind": "function",
      "memberof": "Specification",
      "scope": "instance",
      "___id": "T000002R298852",
      "___s": true
    },
    {
      "comment": "/**\n     * Formats a raw value into its textual representation.\n     *\n     * @param {PacketFieldSpecification} packetField PacketFieldSpecification object\n     * @param {number} rawValue Raw value\n     * @param {string|UnitSpecification|null} [unit] Unit to format to\n     * @returns {string} Textual representation of the raw value\n     *\n     * @example\n     * > var packetFieldSpec = spec.getPacketFieldSpecification('01_0010_7721_10_0100_000_2_0');\n     * undefined\n     * > var rawValue = 888.8000000000001;\n     * undefined\n     * > console.log(spec.formatTextValueFromRawValue(packetFieldSpec, rawValue, 'DegreesCelsius'));\n     * 888.8 °C\n     * undefined\n     * >\n     */",
      "meta": {
        "range": [
          36747,
          37868
        ],
        "filename": "specification.js",
        "lineno": 1068,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100680601",
          "name": "Specification#formatTextValueFromRawValue",
          "type": "MethodDefinition",
          "paramnames": [
            "packetField",
            "rawValue",
            "unit"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Formats a raw value into its textual representation.",
      "params": [
        {
          "type": {
            "names": [
              "PacketFieldSpecification"
            ]
          },
          "description": "PacketFieldSpecification object",
          "name": "packetField"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Raw value",
          "name": "rawValue"
        },
        {
          "type": {
            "names": [
              "string",
              "UnitSpecification",
              "null"
            ]
          },
          "optional": true,
          "description": "Unit to format to",
          "name": "unit"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Textual representation of the raw value"
        }
      ],
      "examples": [
        "> var packetFieldSpec = spec.getPacketFieldSpecification('01_0010_7721_10_0100_000_2_0');\nundefined\n> var rawValue = 888.8000000000001;\nundefined\n> console.log(spec.formatTextValueFromRawValue(packetFieldSpec, rawValue, 'DegreesCelsius'));\n888.8 °C\nundefined\n>"
      ],
      "name": "formatTextValueFromRawValue",
      "longname": "Specification#formatTextValueFromRawValue",
      "kind": "function",
      "memberof": "Specification",
      "scope": "instance",
      "___id": "T000002R298939",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets an array of PacketField objects for the provided Packet objects.\n     *\n     * @param {Header[]} headers Array of Header objects\n     * @returns {PacketField[]} Array of PacketField objects\n     */",
      "meta": {
        "range": [
          40149,
          43363
        ],
        "filename": "specification.js",
        "lineno": 1152,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100681054",
          "name": "Specification#getPacketFieldsForHeaders",
          "type": "MethodDefinition",
          "paramnames": [
            "headers"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Gets an array of PacketField objects for the provided Packet objects.",
      "params": [
        {
          "type": {
            "names": [
              "Array.<Header>"
            ]
          },
          "description": "Array of Header objects",
          "name": "headers"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<PacketField>"
            ]
          },
          "description": "Array of PacketField objects"
        }
      ],
      "name": "getPacketFieldsForHeaders",
      "longname": "Specification#getPacketFieldsForHeaders",
      "kind": "function",
      "memberof": "Specification",
      "scope": "instance",
      "___id": "T000002R298976",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets an array of BlockType sections from a collection of headers.\n     *\n     * @param  {Header[]} headers Array of Header objects\n     * @return {BlockTypeSection[]} Array of BlockTypeSection objects\n     */",
      "meta": {
        "range": [
          45468,
          49004
        ],
        "filename": "specification.js",
        "lineno": 1298,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100681622",
          "name": "Specification#getBlockTypeSectionsForHeaders",
          "type": "MethodDefinition",
          "paramnames": [
            "headers"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Gets an array of BlockType sections from a collection of headers.",
      "params": [
        {
          "type": {
            "names": [
              "Array.<Header>"
            ]
          },
          "description": "Array of Header objects",
          "name": "headers"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<BlockTypeSection>"
            ]
          },
          "description": "Array of BlockTypeSection objects"
        }
      ],
      "name": "getBlockTypeSectionsForHeaders",
      "longname": "Specification#getBlockTypeSectionsForHeaders",
      "kind": "function",
      "memberof": "Specification",
      "scope": "instance",
      "___id": "T000002R299029",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the PacketSpecification objects matching the given BlockTypeSection objects.\n     *\n     * @param  {BlockTypeSection[]} sections Array of BlockTypeSection objects\n     * @return {PacketSpecification[]} Array of PacketSpecificationObjects\n     */",
      "meta": {
        "range": [
          55000,
          59035
        ],
        "filename": "specification.js",
        "lineno": 1548,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100682612",
          "name": "Specification#getBlockTypePacketSpecificationsForSections",
          "type": "MethodDefinition",
          "paramnames": [
            "sections"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Gets the PacketSpecification objects matching the given BlockTypeSection objects.",
      "params": [
        {
          "type": {
            "names": [
              "Array.<BlockTypeSection>"
            ]
          },
          "description": "Array of BlockTypeSection objects",
          "name": "sections"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<PacketSpecification>"
            ]
          },
          "description": "Array of PacketSpecificationObjects"
        }
      ],
      "name": "getBlockTypePacketSpecificationsForSections",
      "longname": "Specification#getBlockTypePacketSpecificationsForSections",
      "kind": "function",
      "memberof": "Specification",
      "scope": "instance",
      "___id": "T000002R299158",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets an array of PacketField objects for the provided BlockTypeSection objects.\n     *\n     * @param  {BlockTypeSection[]} sections Array of BlockTypeSection objects.\n     * @return {PacketField[]} Array of PacketField objects\n     */",
      "meta": {
        "range": [
          59291,
          61397
        ],
        "filename": "specification.js",
        "lineno": 1626,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100683048",
          "name": "Specification#getBlockTypeFieldsForSections",
          "type": "MethodDefinition",
          "paramnames": [
            "sections"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Gets an array of PacketField objects for the provided BlockTypeSection objects.",
      "params": [
        {
          "type": {
            "names": [
              "Array.<BlockTypeSection>"
            ]
          },
          "description": "Array of BlockTypeSection objects.",
          "name": "sections"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<PacketField>"
            ]
          },
          "description": "Array of PacketField objects"
        }
      ],
      "name": "getBlockTypeFieldsForSections",
      "longname": "Specification#getBlockTypeFieldsForSections",
      "kind": "function",
      "memberof": "Specification",
      "scope": "instance",
      "___id": "T000002R299172",
      "___s": true
    },
    {
      "comment": "/**\n     * Language code (ISO 639-1)\n     * @type {string}\n     */",
      "meta": {
        "range": [
          67100,
          67114
        ],
        "filename": "specification.js",
        "lineno": 1836,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100683834",
          "name": "language",
          "type": "Literal",
          "value": "en"
        }
      },
      "description": "Language code (ISO 639-1)",
      "type": {
        "names": [
          "string"
        ]
      },
      "name": "language",
      "longname": "Specification#language",
      "kind": "member",
      "memberof": "Specification",
      "scope": "instance",
      "___id": "T000002R299260",
      "___s": true
    },
    {
      "comment": "/**\n     * I18N instance\n     * @type {I18N}\n     */",
      "meta": {
        "range": [
          67271,
          67281
        ],
        "filename": "specification.js",
        "lineno": 1848,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100683842",
          "name": "i18n",
          "type": "Literal",
          "value": null
        }
      },
      "description": "I18N instance",
      "type": {
        "names": [
          "I18N"
        ]
      },
      "name": "i18n",
      "longname": "Specification#i18n",
      "kind": "member",
      "memberof": "Specification",
      "scope": "instance",
      "___id": "T000002R299264",
      "___s": true
    },
    {
      "comment": "/**\n     * Custom specification data to be mixed-in to built-in specification.\n     * @type {object}\n     */",
      "meta": {
        "range": [
          67401,
          67424
        ],
        "filename": "specification.js",
        "lineno": 1854,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100683844",
          "name": "specificationData",
          "type": "Literal",
          "value": null
        }
      },
      "description": "Custom specification data to be mixed-in to built-in specification.",
      "type": {
        "names": [
          "object"
        ]
      },
      "name": "specificationData",
      "longname": "Specification#specificationData",
      "kind": "member",
      "memberof": "Specification",
      "scope": "instance",
      "___id": "T000002R299265",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a new instance and optionally initializes its members.\n     *\n     * @constructs\n     * @augments EventEmitter\n     * @param {object} options The initialization values for this instance.\n     * @param {number} options.port See {@link TcpConnectionEndpoint#port}\n     * @param {number} options.channels See {@link TcpConnectionEndpoint#channels}\n     *\n     * @classdesc\n     * The TcpConnectionEndpoint can act as the remote side for a TcpConnection.\n     * It supports all the commands that a DL3 connected via VBus.net would\n     * provide as well.\n     *\n     * A `connection` event is emitted whenever an incoming connection passes\n     * the VBus-over-TCP handshake.\n     */",
      "meta": {
        "range": [
          1016,
          1206
        ],
        "filename": "tcp-connection-endpoint.js",
        "lineno": 40,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100683891",
          "name": "TcpConnectionEndpoint",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new instance and optionally initializes its members.",
      "alias": "TcpConnectionEndpoint",
      "kind": "class",
      "augments": [
        "EventEmitter"
      ],
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "The initialization values for this instance.",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "See {@link TcpConnectionEndpoint#port}",
          "name": "options.port"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "See {@link TcpConnectionEndpoint#channels}",
          "name": "options.channels"
        }
      ],
      "classdesc": "The TcpConnectionEndpoint can act as the remote side for a TcpConnection.\nIt supports all the commands that a DL3 connected via VBus.net would\nprovide as well.\n\nA `connection` event is emitted whenever an incoming connection passes\nthe VBus-over-TCP handshake.",
      "name": "TcpConnectionEndpoint",
      "longname": "TcpConnectionEndpoint",
      "scope": "global",
      "___id": "T000002R299273",
      "___s": true
    },
    {
      "comment": "/**\n     * Starts the server to listen for incoming connections.\n     *\n     * @return {Promise} A promise that resolves when the server is started.\n     */",
      "meta": {
        "range": [
          1373,
          2134
        ],
        "filename": "tcp-connection-endpoint.js",
        "lineno": 55,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100683927",
          "name": "TcpConnectionEndpoint#start",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Starts the server to listen for incoming connections.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A promise that resolves when the server is started."
        }
      ],
      "name": "start",
      "longname": "TcpConnectionEndpoint#start",
      "kind": "function",
      "memberof": "TcpConnectionEndpoint",
      "scope": "instance",
      "params": [],
      "___id": "T000002R299275",
      "___s": true
    },
    {
      "comment": "/**\n     * The port number to listen on for incoming connections.\n     * @type {number}\n     */",
      "meta": {
        "range": [
          7090,
          7100
        ],
        "filename": "tcp-connection-endpoint.js",
        "lineno": 236,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100684536",
          "name": "port",
          "type": "Literal",
          "value": 7053
        }
      },
      "description": "The port number to listen on for incoming connections.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "port",
      "longname": "TcpConnectionEndpoint#port",
      "kind": "member",
      "memberof": "TcpConnectionEndpoint",
      "scope": "instance",
      "___id": "T000002R299322",
      "___s": true
    },
    {
      "comment": "/**\n     * The list of channels to return if the CHANNELLIST command is received.\n     * @type {string[]}\n     */",
      "meta": {
        "range": [
          7225,
          7239
        ],
        "filename": "tcp-connection-endpoint.js",
        "lineno": 242,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100684538",
          "name": "channels",
          "type": "Literal",
          "value": null
        }
      },
      "description": "The list of channels to return if the CHANNELLIST command is received.",
      "type": {
        "names": [
          "Array.<string>"
        ]
      },
      "name": "channels",
      "longname": "TcpConnectionEndpoint#channels",
      "kind": "member",
      "memberof": "TcpConnectionEndpoint",
      "scope": "instance",
      "___id": "T000002R299323",
      "___s": true
    },
    {
      "comment": "/**\n     * The Server instance used for listening for incoming connections.\n     * @type {net.Server}\n     */",
      "meta": {
        "range": [
          7360,
          7372
        ],
        "filename": "tcp-connection-endpoint.js",
        "lineno": 248,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100684540",
          "name": "server",
          "type": "Literal",
          "value": null
        }
      },
      "description": "The Server instance used for listening for incoming connections.",
      "type": {
        "names": [
          "net.Server"
        ]
      },
      "name": "server",
      "longname": "TcpConnectionEndpoint#server",
      "kind": "member",
      "memberof": "TcpConnectionEndpoint",
      "scope": "instance",
      "___id": "T000002R299324",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a new TcpConnection instance and optionally initializes its\n     * members to the given values.\n     *\n     * @constructs\n     * @augments Connection\n     * @param {object} options Initialization values\n     * @param {string} options.host See {@link TcpConnection#host}\n     * @param {number} options.port See {@link TcpConnection#port}\n     * @param {string} options.viaTag See {@link TcpConnection#viaTag}\n     * @param {string} options.password See {@link TcpConnection#password}\n     * @param {boolean} options.rawVBusDataOnly See {@link TcpConnection#rawVBusDataOnly}\n     *\n     * @classdesc\n     * The TcpConnection class is primarily designed to provide access to VBus live data\n     * using the VBus-over-TCP specification. That includes the VBus/LAN adapter, the\n     * Dataloggers (DL2 and DL3) and VBus.net.\n     * In addition to that it can be used to connect to a raw VBus data stream using TCP\n     * (for example provided by a serial-to-LAN gateway).\n     */",
      "meta": {
        "range": [
          1472,
          1712
        ],
        "filename": "tcp-connection.js",
        "lineno": 51,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100684598",
          "name": "TcpConnection",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new TcpConnection instance and optionally initializes its\nmembers to the given values.",
      "alias": "TcpConnection",
      "kind": "class",
      "augments": [
        "Connection"
      ],
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Initialization values",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "See {@link TcpConnection#host}",
          "name": "options.host"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "See {@link TcpConnection#port}",
          "name": "options.port"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "See {@link TcpConnection#viaTag}",
          "name": "options.viaTag"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "See {@link TcpConnection#password}",
          "name": "options.password"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "See {@link TcpConnection#rawVBusDataOnly}",
          "name": "options.rawVBusDataOnly"
        }
      ],
      "classdesc": "The TcpConnection class is primarily designed to provide access to VBus live data\nusing the VBus-over-TCP specification. That includes the VBus/LAN adapter, the\nDataloggers (DL2 and DL3) and VBus.net.\nIn addition to that it can be used to connect to a raw VBus data stream using TCP\n(for example provided by a serial-to-LAN gateway).",
      "name": "TcpConnection",
      "longname": "TcpConnection",
      "scope": "global",
      "___id": "T000002R299333",
      "___s": true
    },
    {
      "comment": "/**\n     * Host name or IP address of the connection target.\n     * @type {string}\n     */",
      "meta": {
        "range": [
          13484,
          13494
        ],
        "filename": "tcp-connection.js",
        "lineno": 395,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100685742",
          "name": "host",
          "type": "Literal",
          "value": null
        }
      },
      "description": "Host name or IP address of the connection target.",
      "type": {
        "names": [
          "string"
        ]
      },
      "name": "host",
      "longname": "TcpConnection#host",
      "kind": "member",
      "memberof": "TcpConnection",
      "scope": "instance",
      "___id": "T000002R299409",
      "___s": true
    },
    {
      "comment": "/**\n     * Port number of the connection target.\n     * @type {number}\n     */",
      "meta": {
        "range": [
          13584,
          13594
        ],
        "filename": "tcp-connection.js",
        "lineno": 401,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100685744",
          "name": "port",
          "type": "Literal",
          "value": null
        }
      },
      "description": "Port number of the connection target.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "port",
      "longname": "TcpConnection#port",
      "kind": "member",
      "memberof": "TcpConnection",
      "scope": "instance",
      "___id": "T000002R299410",
      "___s": true
    },
    {
      "comment": "/**\n     * Via tag if connection target is accessed using the VBus.net service.\n     * @type {string}\n     */",
      "meta": {
        "range": [
          13715,
          13727
        ],
        "filename": "tcp-connection.js",
        "lineno": 407,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100685746",
          "name": "viaTag",
          "type": "Literal",
          "value": null
        }
      },
      "description": "Via tag if connection target is accessed using the VBus.net service.",
      "type": {
        "names": [
          "string"
        ]
      },
      "name": "viaTag",
      "longname": "TcpConnection#viaTag",
      "kind": "member",
      "memberof": "TcpConnection",
      "scope": "instance",
      "___id": "T000002R299411",
      "___s": true
    },
    {
      "comment": "/**\n     * Password needed to connect to target.\n     * @type {string}\n     */",
      "meta": {
        "range": [
          13817,
          13831
        ],
        "filename": "tcp-connection.js",
        "lineno": 413,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100685748",
          "name": "password",
          "type": "Literal",
          "value": null
        }
      },
      "description": "Password needed to connect to target.",
      "type": {
        "names": [
          "string"
        ]
      },
      "name": "password",
      "longname": "TcpConnection#password",
      "kind": "member",
      "memberof": "TcpConnection",
      "scope": "instance",
      "___id": "T000002R299412",
      "___s": true
    },
    {
      "comment": "/**\n     * Channel number to connect to.\n     * @type {string|number}\n     */",
      "meta": {
        "range": [
          13952,
          13962
        ],
        "filename": "tcp-connection.js",
        "lineno": 421,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100685752",
          "name": "channel",
          "type": "Literal",
          "value": 0
        }
      },
      "description": "Channel number to connect to.",
      "type": {
        "names": [
          "string",
          "number"
        ]
      },
      "name": "channel",
      "longname": "TcpConnection#channel",
      "kind": "member",
      "memberof": "TcpConnection",
      "scope": "instance",
      "overrides": "Connection#channel",
      "___id": "T000002R299414",
      "___s": true
    },
    {
      "comment": "/**\n     * Indicates that connection does not need to perform login handshake.\n     * Useful for serial-to-LAN converters.\n     * @type {boolean}\n     */",
      "meta": {
        "range": [
          14127,
          14149
        ],
        "filename": "tcp-connection.js",
        "lineno": 428,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100685754",
          "name": "rawVBusDataOnly",
          "type": "Literal",
          "value": false
        }
      },
      "description": "Indicates that connection does not need to perform login handshake.\nUseful for serial-to-LAN converters.",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "name": "rawVBusDataOnly",
      "longname": "TcpConnection#rawVBusDataOnly",
      "kind": "member",
      "memberof": "TcpConnection",
      "scope": "instance",
      "___id": "T000002R299415",
      "___s": true
    },
    {
      "comment": "/**\n     * Timeout in milliseconds to way between reconnection retries.\n     * @type {number}\n     */",
      "meta": {
        "range": [
          14285,
          14304
        ],
        "filename": "tcp-connection.js",
        "lineno": 436,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100685758",
          "name": "reconnectTimeout",
          "type": "Literal",
          "value": 0
        }
      },
      "description": "Timeout in milliseconds to way between reconnection retries.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "reconnectTimeout",
      "longname": "TcpConnection#reconnectTimeout",
      "kind": "member",
      "memberof": "TcpConnection",
      "scope": "instance",
      "___id": "T000002R299417",
      "___s": true
    },
    {
      "comment": "/**\n     * Value to increment timeout after every unsuccessful reconnection retry.\n     * @type {number}\n     */",
      "meta": {
        "range": [
          14428,
          14455
        ],
        "filename": "tcp-connection.js",
        "lineno": 442,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100685760",
          "name": "reconnectTimeoutIncr",
          "type": "Literal",
          "value": 10000
        }
      },
      "description": "Value to increment timeout after every unsuccessful reconnection retry.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "reconnectTimeoutIncr",
      "longname": "TcpConnection#reconnectTimeoutIncr",
      "kind": "member",
      "memberof": "TcpConnection",
      "scope": "instance",
      "___id": "T000002R299418",
      "___s": true
    },
    {
      "comment": "/**\n     * Maximum timeout value between unsuccessful reconnection retry.\n     * @type {number}\n     */",
      "meta": {
        "range": [
          14570,
          14596
        ],
        "filename": "tcp-connection.js",
        "lineno": 448,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100685762",
          "name": "reconnectTimeoutMax",
          "type": "Literal",
          "value": 60000
        }
      },
      "description": "Maximum timeout value between unsuccessful reconnection retry.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "reconnectTimeoutMax",
      "longname": "TcpConnection#reconnectTimeoutMax",
      "kind": "member",
      "memberof": "TcpConnection",
      "scope": "instance",
      "___id": "T000002R299419",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a new TcpDataSourceProvider instance.\n     *\n     * @constructs\n     * @augments DataSourceProvider\n     */",
      "meta": {
        "range": [
          614,
          720
        ],
        "filename": "tcp-data-source-provider.js",
        "lineno": 33,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100685822",
          "name": "TcpDataSourceProvider",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new TcpDataSourceProvider instance.",
      "alias": "TcpDataSourceProvider",
      "kind": "class",
      "augments": [
        "DataSourceProvider"
      ],
      "name": "TcpDataSourceProvider",
      "longname": "TcpDataSourceProvider",
      "scope": "global",
      "params": [],
      "___id": "T000002R299429",
      "___s": true
    },
    {
      "comment": "/**\n     * Discovers devices on the local network.\n     *\n     * @param {object} options\n     * @param {string} options.broadcastAddress IP address to broadcast to\n     * @param {number} options.broadcastPort Port number to broadcast to.\n     * @returns {Promise} A Promise that resolves to an array of device information objects.\n     */",
      "meta": {
        "range": [
          1839,
          2227
        ],
        "filename": "tcp-data-source-provider.js",
        "lineno": 75,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100685935",
          "name": "TcpDataSourceProvider.discoverDevices",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Discovers devices on the local network.",
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "IP address to broadcast to",
          "name": "options.broadcastAddress"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Port number to broadcast to.",
          "name": "options.broadcastPort"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves to an array of device information objects."
        }
      ],
      "name": "discoverDevices",
      "longname": "TcpDataSourceProvider.discoverDevices",
      "kind": "function",
      "memberof": "TcpDataSourceProvider",
      "scope": "static",
      "async": true,
      "___id": "T000002R299443",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a new TcpDataSource instance.\n     *\n     * @constructs\n     * @augments DataSource\n     */",
      "meta": {
        "range": [
          464,
          603
        ],
        "filename": "tcp-data-source.js",
        "lineno": 29,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100686522",
          "name": "TcpDataSource",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new TcpDataSource instance.",
      "alias": "TcpDataSource",
      "kind": "class",
      "augments": [
        "DataSource"
      ],
      "name": "TcpDataSource",
      "longname": "TcpDataSource",
      "scope": "global",
      "params": [],
      "___id": "T000002R299494",
      "___s": true
    },
    {
      "comment": "/**\n     * The host to connect to.\n     * @type {string}\n     */",
      "meta": {
        "range": [
          1275,
          1285
        ],
        "filename": "tcp-data-source.js",
        "lineno": 67,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100686619",
          "name": "host",
          "type": "Literal",
          "value": null
        }
      },
      "description": "The host to connect to.",
      "type": {
        "names": [
          "string"
        ]
      },
      "name": "host",
      "longname": "TcpDataSource#host",
      "kind": "member",
      "memberof": "TcpDataSource",
      "scope": "instance",
      "___id": "T000002R299507",
      "___s": true
    },
    {
      "comment": "/**\n     * The port to connect to.\n     * @type {number}\n     */",
      "meta": {
        "range": [
          1361,
          1371
        ],
        "filename": "tcp-data-source.js",
        "lineno": 73,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100686621",
          "name": "port",
          "type": "Literal",
          "value": 7053
        }
      },
      "description": "The port to connect to.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "port",
      "longname": "TcpDataSource#port",
      "kind": "member",
      "memberof": "TcpDataSource",
      "scope": "instance",
      "___id": "T000002R299508",
      "___s": true
    },
    {
      "comment": "/**\n     * The channel to connect to live.\n     * @type {number}\n     */",
      "meta": {
        "range": [
          1455,
          1469
        ],
        "filename": "tcp-data-source.js",
        "lineno": 79,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100686623",
          "name": "liveChannel",
          "type": "Literal",
          "value": 0
        }
      },
      "description": "The channel to connect to live.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "liveChannel",
      "longname": "TcpDataSource#liveChannel",
      "kind": "member",
      "memberof": "TcpDataSource",
      "scope": "instance",
      "___id": "T000002R299509",
      "___s": true
    },
    {
      "comment": "/**\n     * The password to connect live.\n     * @type {string}\n     */",
      "meta": {
        "range": [
          1551,
          1571
        ],
        "filename": "tcp-data-source.js",
        "lineno": 85,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100686625",
          "name": "livePassword",
          "type": "Literal",
          "value": "vbus"
        }
      },
      "description": "The password to connect live.",
      "type": {
        "names": [
          "string"
        ]
      },
      "name": "livePassword",
      "longname": "TcpDataSource#livePassword",
      "kind": "member",
      "memberof": "TcpDataSource",
      "scope": "instance",
      "___id": "T000002R299510",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a new Telegram instance.\n     *\n     * @constructs\n     * @augments Header\n     * @param {object} options Initialization options.\n     */",
      "meta": {
        "range": [
          449,
          1056
        ],
        "filename": "telegram.js",
        "lineno": 29,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100686666",
          "name": "Telegram",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new Telegram instance.",
      "alias": "Telegram",
      "kind": "class",
      "augments": [
        "Header"
      ],
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Initialization options.",
          "name": "options"
        }
      ],
      "name": "Telegram",
      "longname": "Telegram",
      "scope": "global",
      "___id": "T000002R299517",
      "___s": true
    },
    {
      "comment": "/**\n     * The VBus command of this Telegram instance.\n     * @type {number}\n     */",
      "meta": {
        "range": [
          3551,
          3561
        ],
        "filename": "telegram.js",
        "lineno": 131,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100687138",
          "name": "command",
          "type": "Literal",
          "value": 0
        }
      },
      "description": "The VBus command of this Telegram instance.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "command",
      "longname": "Telegram#command",
      "kind": "member",
      "memberof": "Telegram",
      "scope": "instance",
      "___id": "T000002R299552",
      "___s": true
    },
    {
      "comment": "/**\n     * Create a new TextConverter instance given the set of options.\n     * @constructs\n     * @augments Converter\n     *\n     * @classdesc\n     * The TextConverter class takes header sets, converts them into text\n     * representation and then publishes that on the readable stream side\n     * of itself.\n     *\n     * It does not support parsing text content back into header sets (the\n     * writable stream side).\n     */",
      "meta": {
        "range": [
          854,
          1139
        ],
        "filename": "text-converter.js",
        "lineno": 38,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100687184",
          "name": "TextConverter",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Create a new TextConverter instance given the set of options.",
      "alias": "TextConverter",
      "kind": "class",
      "augments": [
        "Converter"
      ],
      "classdesc": "The TextConverter class takes header sets, converts them into text\nrepresentation and then publishes that on the readable stream side\nof itself.\n\nIt does not support parsing text content back into header sets (the\nwritable stream side).",
      "name": "TextConverter",
      "longname": "TextConverter",
      "scope": "global",
      "params": [],
      "___id": "T000002R299560",
      "___s": true
    },
    {
      "comment": "/**\n     * Resets the converter, resulting in a ne pair of header lines\n     * generated on next header set conversion.\n     */",
      "meta": {
        "range": [
          1277,
          1324
        ],
        "filename": "text-converter.js",
        "lineno": 54,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100687227",
          "name": "TextConverter#reset",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Resets the converter, resulting in a ne pair of header lines\ngenerated on next header set conversion.",
      "name": "reset",
      "longname": "TextConverter#reset",
      "kind": "function",
      "memberof": "TextConverter",
      "scope": "instance",
      "params": [],
      "overrides": "Converter#reset",
      "___id": "T000002R299563",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts a header set into text representation.\n     *\n     * @param {HeaderSet} headerSet\n     */",
      "meta": {
        "range": [
          1444,
          4443
        ],
        "filename": "text-converter.js",
        "lineno": 63,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100687237",
          "name": "TextConverter#convertHeaderSet",
          "type": "MethodDefinition",
          "paramnames": [
            "headerSet"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Converts a header set into text representation.",
      "params": [
        {
          "type": {
            "names": [
              "HeaderSet"
            ]
          },
          "name": "headerSet"
        }
      ],
      "name": "convertHeaderSet",
      "longname": "TextConverter#convertHeaderSet",
      "kind": "function",
      "memberof": "TextConverter",
      "scope": "instance",
      "overrides": "Converter#convertHeaderSet",
      "___id": "T000002R299565",
      "___s": true
    },
    {
      "comment": "/**\n     * Format a `Date` object into a string.\n     *\n     * @param {Moment} now The Moment.js timestamp to format.\n     * @param {string|function} format Date formatter. Can either be a\n     * string to use in `moment(...).format()` or a function that returns\n     * the formatted date/time string.\n     * @returns {string} The formatted date/time as a string.\n     */",
      "meta": {
        "range": [
          4825,
          5115
        ],
        "filename": "text-converter.js",
        "lineno": 167,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100687595",
          "name": "TextConverter#formatDateAndTime",
          "type": "MethodDefinition",
          "paramnames": [
            "now",
            "format"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Format a `Date` object into a string.",
      "params": [
        {
          "type": {
            "names": [
              "Moment"
            ]
          },
          "description": "The Moment.js timestamp to format.",
          "name": "now"
        },
        {
          "type": {
            "names": [
              "string",
              "function"
            ]
          },
          "description": "Date formatter. Can either be a\nstring to use in `moment(...).format()` or a function that returns\nthe formatted date/time string.",
          "name": "format"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The formatted date/time as a string."
        }
      ],
      "name": "formatDateAndTime",
      "longname": "TextConverter#formatDateAndTime",
      "kind": "function",
      "memberof": "TextConverter",
      "scope": "instance",
      "___id": "T000002R299595",
      "___s": true
    },
    {
      "comment": "/**\n     * Column separator, defaults to tab\n     * @type {string}\n     */",
      "meta": {
        "range": [
          5320,
          5341
        ],
        "filename": "text-converter.js",
        "lineno": 190,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100687641",
          "name": "columnSeparator",
          "type": "Literal",
          "value": "\t"
        }
      },
      "description": "Column separator, defaults to tab",
      "type": {
        "names": [
          "string"
        ]
      },
      "name": "columnSeparator",
      "longname": "TextConverter#columnSeparator",
      "kind": "member",
      "memberof": "TextConverter",
      "scope": "instance",
      "___id": "T000002R299597",
      "___s": true
    },
    {
      "comment": "/**\n     * Line separator, defaults to CR+NL\n     * @type {string}\n     */",
      "meta": {
        "range": [
          5427,
          5448
        ],
        "filename": "text-converter.js",
        "lineno": 196,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100687643",
          "name": "lineSeparator",
          "type": "Literal",
          "value": "\r\n"
        }
      },
      "description": "Line separator, defaults to CR+NL",
      "type": {
        "names": [
          "string"
        ]
      },
      "name": "lineSeparator",
      "longname": "TextConverter#lineSeparator",
      "kind": "member",
      "memberof": "TextConverter",
      "scope": "instance",
      "___id": "T000002R299598",
      "___s": true
    },
    {
      "comment": "/**\n     * Specifies whether date and time columns should be output separately\n     * @type {boolean}\n     */",
      "meta": {
        "range": [
          5569,
          5595
        ],
        "filename": "text-converter.js",
        "lineno": 202,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100687645",
          "name": "separateDateAndTime",
          "type": "Literal",
          "value": false
        }
      },
      "description": "Specifies whether date and time columns should be output separately",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "name": "separateDateAndTime",
      "longname": "TextConverter#separateDateAndTime",
      "kind": "member",
      "memberof": "TextConverter",
      "scope": "instance",
      "___id": "T000002R299599",
      "___s": true
    },
    {
      "comment": "/**\n     * VBus specification\n     * @type {Specification}\n     */",
      "meta": {
        "range": [
          5673,
          5692
        ],
        "filename": "text-converter.js",
        "lineno": 208,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100687647",
          "name": "specification",
          "type": "Literal",
          "value": null
        }
      },
      "description": "VBus specification",
      "type": {
        "names": [
          "Specification"
        ]
      },
      "name": "specification",
      "longname": "TextConverter#specification",
      "kind": "member",
      "memberof": "TextConverter",
      "scope": "instance",
      "___id": "T000002R299600",
      "___s": true
    },
    {
      "comment": "/**\n     * Date to string formatting for the first column. Can either be a\n     * string to use in `moment(...).format()` or a function that returns\n     * the formatted date string.\n     * @type {string|function}\n     */",
      "meta": {
        "range": [
          5925,
          5940
        ],
        "filename": "text-converter.js",
        "lineno": 216,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100687649",
          "name": "dateFormat",
          "type": "Literal",
          "value": "L"
        }
      },
      "description": "Date to string formatting for the first column. Can either be a\nstring to use in `moment(...).format()` or a function that returns\nthe formatted date string.",
      "type": {
        "names": [
          "string",
          "function"
        ]
      },
      "name": "dateFormat",
      "longname": "TextConverter#dateFormat",
      "kind": "member",
      "memberof": "TextConverter",
      "scope": "instance",
      "___id": "T000002R299601",
      "___s": true
    },
    {
      "comment": "/**\n     * Time to string formatting for the first column. Can either be a\n     * string to use in `moment(...).format()` or a function that returns\n     * the formatted time string.\n     * @type {string|function}\n     */",
      "meta": {
        "range": [
          6173,
          6195
        ],
        "filename": "text-converter.js",
        "lineno": 224,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100687651",
          "name": "timeFormat",
          "type": "Literal",
          "value": "HH:mm:ss"
        }
      },
      "description": "Time to string formatting for the first column. Can either be a\nstring to use in `moment(...).format()` or a function that returns\nthe formatted time string.",
      "type": {
        "names": [
          "string",
          "function"
        ]
      },
      "name": "timeFormat",
      "longname": "TextConverter#timeFormat",
      "kind": "member",
      "memberof": "TextConverter",
      "scope": "instance",
      "___id": "T000002R299602",
      "___s": true
    },
    {
      "comment": "/**\n     * List of packet IDs converted last time, enables decision whether a\n     * new header line pair must be output.\n     * @type {string}\n     */",
      "meta": {
        "range": [
          6358,
          6374
        ],
        "filename": "text-converter.js",
        "lineno": 231,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100687653",
          "name": "lastIdList",
          "type": "Literal",
          "value": null
        }
      },
      "description": "List of packet IDs converted last time, enables decision whether a\nnew header line pair must be output.",
      "type": {
        "names": [
          "string"
        ]
      },
      "name": "lastIdList",
      "longname": "TextConverter#lastIdList",
      "kind": "member",
      "memberof": "TextConverter",
      "scope": "instance",
      "___id": "T000002R299603",
      "___s": true
    },
    {
      "comment": "/**\n     * @see http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript\n     */",
      "meta": {
        "range": [
          225,
          656
        ],
        "filename": "utils.js",
        "lineno": 11,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100687669",
          "name": "generateGUID",
          "type": "FunctionExpression"
        },
        "vars": {
          "s4": "utils.generateGUID~s4",
          "": null,
          "guid": "utils.generateGUID~guid"
        }
      },
      "see": [
        "http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript"
      ],
      "name": "generateGUID",
      "longname": "utils.generateGUID",
      "kind": "function",
      "memberof": "utils",
      "scope": "static",
      "___id": "T000002R299606",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a new VBusRecordingConverter instance.\n     *\n     * @constructs\n     * @augments Converter\n     *\n     * @classdesc\n     * This Converter subclass converts Header and HeaderSet instances to and from a binary stream that\n     * conforms to the VBus Recording File Format (the binary file format used e.g. to store data on the\n     * Datalogger devices).\n     */",
      "meta": {
        "range": [
          788,
          929
        ],
        "filename": "vbus-recording-converter.js",
        "lineno": 36,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100688044",
          "name": "VBusRecordingConverter",
          "type": "MethodDefinition",
          "paramnames": [
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Creates a new VBusRecordingConverter instance.",
      "alias": "VBusRecordingConverter",
      "kind": "class",
      "augments": [
        "Converter"
      ],
      "classdesc": "This Converter subclass converts Header and HeaderSet instances to and from a binary stream that\nconforms to the VBus Recording File Format (the binary file format used e.g. to store data on the\nDatalogger devices).",
      "name": "VBusRecordingConverter",
      "longname": "VBusRecordingConverter",
      "scope": "global",
      "params": [],
      "___id": "T000002R299633",
      "___s": true
    },
    {
      "kind": "package",
      "longname": "package:undefined",
      "files": [
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/base-configuration-optimizer.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/browser-index.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/browser-shims/request.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/configuration-optimizer-factory.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/configuration-optimizer.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/configuration-optimizers/resol-deltasol-bs4v2-103-configuration-optimizer.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/configuration-optimizers/resol-deltasol-bs4v2-103-data.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/configuration-optimizers/resol-deltasol-bx-plus-xxx-configuration-optimizer.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/configuration-optimizers/resol-deltasol-bx-plus-xxx-data.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/configuration-optimizers/resol-deltasol-c-104-configuration-optimizer.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/configuration-optimizers/resol-deltasol-c-104-data.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/configuration-optimizers/resol-deltasol-cs-plus-110-data.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/configuration-optimizers/resol-deltasol-cs-plus-xxx-configuration-optimizer.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/configuration-optimizers/resol-deltasol-cs2-200-configuration-optimizer.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/configuration-optimizers/resol-deltasol-cs2-200-data.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/configuration-optimizers/resol-deltasol-cs4-200-configuration-optimizer.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/configuration-optimizers/resol-deltasol-cs4-200-data.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/configuration-optimizers/resol-deltasol-e-v2-100-configuration-optimizer.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/configuration-optimizers/resol-deltasol-e-v2-100-data.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/configuration-optimizers/resol-deltasol-mx-112-configuration-optimizer.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/configuration-optimizers/resol-deltasol-mx-112-data.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/configuration-optimizers/resol-deltasol-slt-102-configuration-optimizer.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/configuration-optimizers/resol-deltasol-slt-102-data.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/configuration-optimizers/resol-deltatherm-hc-xxx-configuration-optimizer.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/configuration-optimizers/resol-deltatherm-hc-xxx-data.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/connection-customizer.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/connection.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/converter.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/customizer.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/data-source-provider.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/data-source.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/datagram.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/dlx-json-converter.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/dlx-recorder.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/filesystem-recorder.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/header-set-consolidator.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/header-set.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/header.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/i18n.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/index.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/lodash.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/packet.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/recorder.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/serial-connection.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/serial-data-source-provider.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/serial-data-source.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/specification-file.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/specification.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/tcp-connection-endpoint.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/tcp-connection.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/tcp-data-source-provider.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/tcp-data-source.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/telegram.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/text-converter.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/utils.js",
        "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src/vbus-recording-converter.js"
      ],
      "___id": "T000002R299822",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a representation of this Header instance that can be\n     * transmitted over a Connection. If no buffer is given as an\n     * arguments, it creates a new one that is big enough to hold\n     * the representation.\n     *\n     * Must be implemented by sub-class.\n     *\n     * @abstract\n     * @param {Buffer} [buffer] Buffer object to store data in\n     * @param {number} [start] Start index in the buffer\n     * @param {number} [end] End index in the buffer\n     * @returns {Buffer} Buffer object containing the data\n     */",
      "meta": {
        "range": [
          2063,
          2170
        ],
        "filename": "header.js",
        "lineno": 70,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671005",
          "name": "Header#toLiveBuffer",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "toLiveBuffer",
      "longname": "Packet#toLiveBuffer",
      "kind": "function",
      "description": "Creates a representation of this Header instance that can be\ntransmitted over a Connection. If no buffer is given as an\narguments, it creates a new one that is big enough to hold\nthe representation.\n\nMust be implemented by sub-class.",
      "virtual": true,
      "returns": [
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "Buffer object containing the data"
        }
      ],
      "memberof": "Packet",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "optional": true,
          "description": "Buffer object to store data in",
          "name": "buffer"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "Start index in the buffer",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "End index in the buffer",
          "name": "end"
        }
      ],
      "inherits": "Header#toLiveBuffer",
      "inherited": true,
      "overrides": "Header#toLiveBuffer",
      "___id": "T000002R299823",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns the protocol version of this Header instance as a 8-bit\n     * number. The high nibble is used for the major version, the low\n     * nibble for the minor version. For example: a header with protocol\n     * version 2.0 would return `0x20`.\n     *\n     * Must be implemented by sub-class.\n     *\n     * @abstract\n     * @returns {number} Protocol version\n     */",
      "meta": {
        "range": [
          2560,
          2649
        ],
        "filename": "header.js",
        "lineno": 85,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671013",
          "name": "Header#getProtocolVersion",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getProtocolVersion",
      "longname": "Packet#getProtocolVersion",
      "kind": "function",
      "description": "Returns the protocol version of this Header instance as a 8-bit\nnumber. The high nibble is used for the major version, the low\nnibble for the minor version. For example: a header with protocol\nversion 2.0 would return `0x20`.\n\nMust be implemented by sub-class.",
      "virtual": true,
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Protocol version"
        }
      ],
      "memberof": "Packet",
      "scope": "instance",
      "inherits": "Header#getProtocolVersion",
      "inherited": true,
      "overrides": "Header#getProtocolVersion",
      "___id": "T000002R299824",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns an info number about this Header instance. It can be used\n     * for sorting purposes (to distinguish Header objects that would\n     * otherwise compare as equal).\n     *\n     * @returns {number} Info value\n     */",
      "meta": {
        "range": [
          2893,
          2928
        ],
        "filename": "header.js",
        "lineno": 96,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671021",
          "name": "Header#getInfo",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getInfo",
      "longname": "Packet#getInfo",
      "kind": "function",
      "description": "Returns an info number about this Header instance. It can be used\nfor sorting purposes (to distinguish Header objects that would\notherwise compare as equal).",
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Info value"
        }
      ],
      "memberof": "Packet",
      "scope": "instance",
      "inherits": "Header#getInfo",
      "inherited": true,
      "___id": "T000002R299825",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns a string identifier describing this Header instance.\n     * It contains at least:\n     *\n     *   - channel\n     *   - destination address\n     *   - source address\n     *   - protocol version\n     *\n     * Sub-classes can extend that information. The structure of this\n     * identifier is implementation specific, do not rely on it!\n     *\n     * @returns {string} Identifier\n     */",
      "meta": {
        "range": [
          3343,
          3491
        ],
        "filename": "header.js",
        "lineno": 114,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671027",
          "name": "Header#getId",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getId",
      "longname": "Packet#getId",
      "kind": "function",
      "description": "Returns a string identifier describing this Header instance.\nIt contains at least:\n\n  - channel\n  - destination address\n  - source address\n  - protocol version\n\nSub-classes can extend that information. The structure of this\nidentifier is implementation specific, do not rely on it!",
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Identifier"
        }
      ],
      "memberof": "Packet",
      "scope": "instance",
      "inherits": "Header#getId",
      "inherited": true,
      "overrides": "Header#getId",
      "___id": "T000002R299826",
      "___s": true
    },
    {
      "comment": "/**\n     * Compares this Header instance to another one.\n     *\n     * Sub-classes can extend the comparison to include specific\n     * information.\n     *\n     * @param {Header} that Another Header instance to compare to.\n     * @returns {number} Returns a number\n     *\n     *   - less than 0 if `this < that`\n     *   - greater than 0 if `this > that`\n     *   - equal to to if `this == that`\n     */",
      "meta": {
        "range": [
          3905,
          4325
        ],
        "filename": "header.js",
        "lineno": 131,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671048",
          "name": "Header#compareTo",
          "type": "MethodDefinition",
          "paramnames": [
            "that"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "compareTo",
      "longname": "Packet#compareTo",
      "kind": "function",
      "description": "Compares this Header instance to another one.\n\nSub-classes can extend the comparison to include specific\ninformation.",
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns a number\n\n  - less than 0 if `this < that`\n  - greater than 0 if `this > that`\n  - equal to to if `this == that`"
        }
      ],
      "memberof": "Packet",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Header"
            ]
          },
          "description": "Another Header instance to compare to.",
          "name": "that"
        }
      ],
      "inherits": "Header#compareTo",
      "inherited": true,
      "overrides": "Header#compareTo",
      "___id": "T000002R299827",
      "___s": true
    },
    {
      "comment": "/**\n     * Timestamp of this header\n     * @type {Date}\n     * @default now\n     */",
      "meta": {
        "range": [
          8888,
          8903
        ],
        "filename": "header.js",
        "lineno": 274,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671350",
          "name": "timestamp",
          "type": "Literal",
          "value": null
        }
      },
      "name": "timestamp",
      "longname": "Packet#timestamp",
      "kind": "member",
      "description": "Timestamp of this header",
      "type": {
        "names": [
          "Date"
        ]
      },
      "defaultvalue": "now",
      "memberof": "Packet",
      "scope": "instance",
      "inherits": "Header#timestamp",
      "inherited": true,
      "___id": "T000002R299828",
      "___s": true
    },
    {
      "comment": "/**\n     * VBus channel of this header\n     * @type {number}\n     * @default 0\n     */",
      "meta": {
        "range": [
          9001,
          9011
        ],
        "filename": "header.js",
        "lineno": 281,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671352",
          "name": "channel",
          "type": "Literal",
          "value": 0
        }
      },
      "name": "channel",
      "longname": "Packet#channel",
      "kind": "member",
      "description": "VBus channel of this header",
      "type": {
        "names": [
          "number"
        ]
      },
      "defaultvalue": "0",
      "memberof": "Packet",
      "scope": "instance",
      "inherits": "Header#channel",
      "inherited": true,
      "___id": "T000002R299829",
      "___s": true
    },
    {
      "comment": "/**\n     * VBus address of this header's destination\n     * @type {number}\n     * @default 0\n     */",
      "meta": {
        "range": [
          9123,
          9144
        ],
        "filename": "header.js",
        "lineno": 288,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671354",
          "name": "destinationAddress",
          "type": "Literal",
          "value": 0
        }
      },
      "name": "destinationAddress",
      "longname": "Packet#destinationAddress",
      "kind": "member",
      "description": "VBus address of this header's destination",
      "type": {
        "names": [
          "number"
        ]
      },
      "defaultvalue": "0",
      "memberof": "Packet",
      "scope": "instance",
      "inherits": "Header#destinationAddress",
      "inherited": true,
      "___id": "T000002R299830",
      "___s": true
    },
    {
      "comment": "/**\n     * VBus address of this header's source\n     * @type {number}\n     * @default\n     */",
      "meta": {
        "range": [
          9249,
          9265
        ],
        "filename": "header.js",
        "lineno": 295,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671356",
          "name": "sourceAddress",
          "type": "Literal",
          "value": 0
        }
      },
      "name": "sourceAddress",
      "longname": "Packet#sourceAddress",
      "kind": "member",
      "description": "VBus address of this header's source",
      "type": {
        "names": [
          "number"
        ]
      },
      "defaultvalue": 0,
      "memberof": "Packet",
      "scope": "instance",
      "inherits": "Header#sourceAddress",
      "inherited": true,
      "___id": "T000002R299831",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a representation of this Header instance that can be\n     * transmitted over a Connection. If no buffer is given as an\n     * arguments, it creates a new one that is big enough to hold\n     * the representation.\n     *\n     * Must be implemented by sub-class.\n     *\n     * @abstract\n     * @param {Buffer} [buffer] Buffer object to store data in\n     * @param {number} [start] Start index in the buffer\n     * @param {number} [end] End index in the buffer\n     * @returns {Buffer} Buffer object containing the data\n     */",
      "meta": {
        "range": [
          2063,
          2170
        ],
        "filename": "header.js",
        "lineno": 70,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671005",
          "name": "Header#toLiveBuffer",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "toLiveBuffer",
      "longname": "Datagram#toLiveBuffer",
      "kind": "function",
      "description": "Creates a representation of this Header instance that can be\ntransmitted over a Connection. If no buffer is given as an\narguments, it creates a new one that is big enough to hold\nthe representation.\n\nMust be implemented by sub-class.",
      "virtual": true,
      "returns": [
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "Buffer object containing the data"
        }
      ],
      "memberof": "Datagram",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "optional": true,
          "description": "Buffer object to store data in",
          "name": "buffer"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "Start index in the buffer",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "End index in the buffer",
          "name": "end"
        }
      ],
      "inherits": "Header#toLiveBuffer",
      "inherited": true,
      "overrides": "Header#toLiveBuffer",
      "___id": "T000002R299832",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns the protocol version of this Header instance as a 8-bit\n     * number. The high nibble is used for the major version, the low\n     * nibble for the minor version. For example: a header with protocol\n     * version 2.0 would return `0x20`.\n     *\n     * Must be implemented by sub-class.\n     *\n     * @abstract\n     * @returns {number} Protocol version\n     */",
      "meta": {
        "range": [
          2560,
          2649
        ],
        "filename": "header.js",
        "lineno": 85,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671013",
          "name": "Header#getProtocolVersion",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getProtocolVersion",
      "longname": "Datagram#getProtocolVersion",
      "kind": "function",
      "description": "Returns the protocol version of this Header instance as a 8-bit\nnumber. The high nibble is used for the major version, the low\nnibble for the minor version. For example: a header with protocol\nversion 2.0 would return `0x20`.\n\nMust be implemented by sub-class.",
      "virtual": true,
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Protocol version"
        }
      ],
      "memberof": "Datagram",
      "scope": "instance",
      "inherits": "Header#getProtocolVersion",
      "inherited": true,
      "overrides": "Header#getProtocolVersion",
      "___id": "T000002R299833",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns an info number about this Header instance. It can be used\n     * for sorting purposes (to distinguish Header objects that would\n     * otherwise compare as equal).\n     *\n     * @returns {number} Info value\n     */",
      "meta": {
        "range": [
          2893,
          2928
        ],
        "filename": "header.js",
        "lineno": 96,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671021",
          "name": "Header#getInfo",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getInfo",
      "longname": "Datagram#getInfo",
      "kind": "function",
      "description": "Returns an info number about this Header instance. It can be used\nfor sorting purposes (to distinguish Header objects that would\notherwise compare as equal).",
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Info value"
        }
      ],
      "memberof": "Datagram",
      "scope": "instance",
      "inherits": "Header#getInfo",
      "inherited": true,
      "overrides": "Header#getInfo",
      "___id": "T000002R299834",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns a string identifier describing this Header instance.\n     * It contains at least:\n     *\n     *   - channel\n     *   - destination address\n     *   - source address\n     *   - protocol version\n     *\n     * Sub-classes can extend that information. The structure of this\n     * identifier is implementation specific, do not rely on it!\n     *\n     * @returns {string} Identifier\n     */",
      "meta": {
        "range": [
          3343,
          3491
        ],
        "filename": "header.js",
        "lineno": 114,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671027",
          "name": "Header#getId",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getId",
      "longname": "Datagram#getId",
      "kind": "function",
      "description": "Returns a string identifier describing this Header instance.\nIt contains at least:\n\n  - channel\n  - destination address\n  - source address\n  - protocol version\n\nSub-classes can extend that information. The structure of this\nidentifier is implementation specific, do not rely on it!",
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Identifier"
        }
      ],
      "memberof": "Datagram",
      "scope": "instance",
      "inherits": "Header#getId",
      "inherited": true,
      "overrides": "Header#getId",
      "___id": "T000002R299835",
      "___s": true
    },
    {
      "comment": "/**\n     * Compares this Header instance to another one.\n     *\n     * Sub-classes can extend the comparison to include specific\n     * information.\n     *\n     * @param {Header} that Another Header instance to compare to.\n     * @returns {number} Returns a number\n     *\n     *   - less than 0 if `this < that`\n     *   - greater than 0 if `this > that`\n     *   - equal to to if `this == that`\n     */",
      "meta": {
        "range": [
          3905,
          4325
        ],
        "filename": "header.js",
        "lineno": 131,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671048",
          "name": "Header#compareTo",
          "type": "MethodDefinition",
          "paramnames": [
            "that"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "compareTo",
      "longname": "Datagram#compareTo",
      "kind": "function",
      "description": "Compares this Header instance to another one.\n\nSub-classes can extend the comparison to include specific\ninformation.",
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns a number\n\n  - less than 0 if `this < that`\n  - greater than 0 if `this > that`\n  - equal to to if `this == that`"
        }
      ],
      "memberof": "Datagram",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Header"
            ]
          },
          "description": "Another Header instance to compare to.",
          "name": "that"
        }
      ],
      "inherits": "Header#compareTo",
      "inherited": true,
      "overrides": "Header#compareTo",
      "___id": "T000002R299836",
      "___s": true
    },
    {
      "comment": "/**\n     * Timestamp of this header\n     * @type {Date}\n     * @default now\n     */",
      "meta": {
        "range": [
          8888,
          8903
        ],
        "filename": "header.js",
        "lineno": 274,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671350",
          "name": "timestamp",
          "type": "Literal",
          "value": null
        }
      },
      "name": "timestamp",
      "longname": "Datagram#timestamp",
      "kind": "member",
      "description": "Timestamp of this header",
      "type": {
        "names": [
          "Date"
        ]
      },
      "defaultvalue": "now",
      "memberof": "Datagram",
      "scope": "instance",
      "inherits": "Header#timestamp",
      "inherited": true,
      "___id": "T000002R299837",
      "___s": true
    },
    {
      "comment": "/**\n     * VBus channel of this header\n     * @type {number}\n     * @default 0\n     */",
      "meta": {
        "range": [
          9001,
          9011
        ],
        "filename": "header.js",
        "lineno": 281,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671352",
          "name": "channel",
          "type": "Literal",
          "value": 0
        }
      },
      "name": "channel",
      "longname": "Datagram#channel",
      "kind": "member",
      "description": "VBus channel of this header",
      "type": {
        "names": [
          "number"
        ]
      },
      "defaultvalue": "0",
      "memberof": "Datagram",
      "scope": "instance",
      "inherits": "Header#channel",
      "inherited": true,
      "___id": "T000002R299838",
      "___s": true
    },
    {
      "comment": "/**\n     * VBus address of this header's destination\n     * @type {number}\n     * @default 0\n     */",
      "meta": {
        "range": [
          9123,
          9144
        ],
        "filename": "header.js",
        "lineno": 288,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671354",
          "name": "destinationAddress",
          "type": "Literal",
          "value": 0
        }
      },
      "name": "destinationAddress",
      "longname": "Datagram#destinationAddress",
      "kind": "member",
      "description": "VBus address of this header's destination",
      "type": {
        "names": [
          "number"
        ]
      },
      "defaultvalue": "0",
      "memberof": "Datagram",
      "scope": "instance",
      "inherits": "Header#destinationAddress",
      "inherited": true,
      "___id": "T000002R299839",
      "___s": true
    },
    {
      "comment": "/**\n     * VBus address of this header's source\n     * @type {number}\n     * @default\n     */",
      "meta": {
        "range": [
          9249,
          9265
        ],
        "filename": "header.js",
        "lineno": 295,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671356",
          "name": "sourceAddress",
          "type": "Literal",
          "value": 0
        }
      },
      "name": "sourceAddress",
      "longname": "Datagram#sourceAddress",
      "kind": "member",
      "description": "VBus address of this header's source",
      "type": {
        "names": [
          "number"
        ]
      },
      "defaultvalue": 0,
      "memberof": "Datagram",
      "scope": "instance",
      "inherits": "Header#sourceAddress",
      "inherited": true,
      "___id": "T000002R299840",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a representation of this Header instance that can be\n     * transmitted over a Connection. If no buffer is given as an\n     * arguments, it creates a new one that is big enough to hold\n     * the representation.\n     *\n     * Must be implemented by sub-class.\n     *\n     * @abstract\n     * @param {Buffer} [buffer] Buffer object to store data in\n     * @param {number} [start] Start index in the buffer\n     * @param {number} [end] End index in the buffer\n     * @returns {Buffer} Buffer object containing the data\n     */",
      "meta": {
        "range": [
          2063,
          2170
        ],
        "filename": "header.js",
        "lineno": 70,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671005",
          "name": "Header#toLiveBuffer",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "toLiveBuffer",
      "longname": "Telegram#toLiveBuffer",
      "kind": "function",
      "description": "Creates a representation of this Header instance that can be\ntransmitted over a Connection. If no buffer is given as an\narguments, it creates a new one that is big enough to hold\nthe representation.\n\nMust be implemented by sub-class.",
      "virtual": true,
      "returns": [
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "description": "Buffer object containing the data"
        }
      ],
      "memberof": "Telegram",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Buffer"
            ]
          },
          "optional": true,
          "description": "Buffer object to store data in",
          "name": "buffer"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "Start index in the buffer",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "End index in the buffer",
          "name": "end"
        }
      ],
      "inherits": "Header#toLiveBuffer",
      "inherited": true,
      "overrides": "Header#toLiveBuffer",
      "___id": "T000002R299841",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns the protocol version of this Header instance as a 8-bit\n     * number. The high nibble is used for the major version, the low\n     * nibble for the minor version. For example: a header with protocol\n     * version 2.0 would return `0x20`.\n     *\n     * Must be implemented by sub-class.\n     *\n     * @abstract\n     * @returns {number} Protocol version\n     */",
      "meta": {
        "range": [
          2560,
          2649
        ],
        "filename": "header.js",
        "lineno": 85,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671013",
          "name": "Header#getProtocolVersion",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getProtocolVersion",
      "longname": "Telegram#getProtocolVersion",
      "kind": "function",
      "description": "Returns the protocol version of this Header instance as a 8-bit\nnumber. The high nibble is used for the major version, the low\nnibble for the minor version. For example: a header with protocol\nversion 2.0 would return `0x20`.\n\nMust be implemented by sub-class.",
      "virtual": true,
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Protocol version"
        }
      ],
      "memberof": "Telegram",
      "scope": "instance",
      "inherits": "Header#getProtocolVersion",
      "inherited": true,
      "overrides": "Header#getProtocolVersion",
      "___id": "T000002R299842",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns an info number about this Header instance. It can be used\n     * for sorting purposes (to distinguish Header objects that would\n     * otherwise compare as equal).\n     *\n     * @returns {number} Info value\n     */",
      "meta": {
        "range": [
          2893,
          2928
        ],
        "filename": "header.js",
        "lineno": 96,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671021",
          "name": "Header#getInfo",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getInfo",
      "longname": "Telegram#getInfo",
      "kind": "function",
      "description": "Returns an info number about this Header instance. It can be used\nfor sorting purposes (to distinguish Header objects that would\notherwise compare as equal).",
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Info value"
        }
      ],
      "memberof": "Telegram",
      "scope": "instance",
      "inherits": "Header#getInfo",
      "inherited": true,
      "___id": "T000002R299843",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns a string identifier describing this Header instance.\n     * It contains at least:\n     *\n     *   - channel\n     *   - destination address\n     *   - source address\n     *   - protocol version\n     *\n     * Sub-classes can extend that information. The structure of this\n     * identifier is implementation specific, do not rely on it!\n     *\n     * @returns {string} Identifier\n     */",
      "meta": {
        "range": [
          3343,
          3491
        ],
        "filename": "header.js",
        "lineno": 114,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671027",
          "name": "Header#getId",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getId",
      "longname": "Telegram#getId",
      "kind": "function",
      "description": "Returns a string identifier describing this Header instance.\nIt contains at least:\n\n  - channel\n  - destination address\n  - source address\n  - protocol version\n\nSub-classes can extend that information. The structure of this\nidentifier is implementation specific, do not rely on it!",
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Identifier"
        }
      ],
      "memberof": "Telegram",
      "scope": "instance",
      "inherits": "Header#getId",
      "inherited": true,
      "overrides": "Header#getId",
      "___id": "T000002R299844",
      "___s": true
    },
    {
      "comment": "/**\n     * Compares this Header instance to another one.\n     *\n     * Sub-classes can extend the comparison to include specific\n     * information.\n     *\n     * @param {Header} that Another Header instance to compare to.\n     * @returns {number} Returns a number\n     *\n     *   - less than 0 if `this < that`\n     *   - greater than 0 if `this > that`\n     *   - equal to to if `this == that`\n     */",
      "meta": {
        "range": [
          3905,
          4325
        ],
        "filename": "header.js",
        "lineno": 131,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671048",
          "name": "Header#compareTo",
          "type": "MethodDefinition",
          "paramnames": [
            "that"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "compareTo",
      "longname": "Telegram#compareTo",
      "kind": "function",
      "description": "Compares this Header instance to another one.\n\nSub-classes can extend the comparison to include specific\ninformation.",
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Returns a number\n\n  - less than 0 if `this < that`\n  - greater than 0 if `this > that`\n  - equal to to if `this == that`"
        }
      ],
      "memberof": "Telegram",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Header"
            ]
          },
          "description": "Another Header instance to compare to.",
          "name": "that"
        }
      ],
      "inherits": "Header#compareTo",
      "inherited": true,
      "overrides": "Header#compareTo",
      "___id": "T000002R299845",
      "___s": true
    },
    {
      "comment": "/**\n     * Timestamp of this header\n     * @type {Date}\n     * @default now\n     */",
      "meta": {
        "range": [
          8888,
          8903
        ],
        "filename": "header.js",
        "lineno": 274,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671350",
          "name": "timestamp",
          "type": "Literal",
          "value": null
        }
      },
      "name": "timestamp",
      "longname": "Telegram#timestamp",
      "kind": "member",
      "description": "Timestamp of this header",
      "type": {
        "names": [
          "Date"
        ]
      },
      "defaultvalue": "now",
      "memberof": "Telegram",
      "scope": "instance",
      "inherits": "Header#timestamp",
      "inherited": true,
      "___id": "T000002R299846",
      "___s": true
    },
    {
      "comment": "/**\n     * VBus channel of this header\n     * @type {number}\n     * @default 0\n     */",
      "meta": {
        "range": [
          9001,
          9011
        ],
        "filename": "header.js",
        "lineno": 281,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671352",
          "name": "channel",
          "type": "Literal",
          "value": 0
        }
      },
      "name": "channel",
      "longname": "Telegram#channel",
      "kind": "member",
      "description": "VBus channel of this header",
      "type": {
        "names": [
          "number"
        ]
      },
      "defaultvalue": "0",
      "memberof": "Telegram",
      "scope": "instance",
      "inherits": "Header#channel",
      "inherited": true,
      "___id": "T000002R299847",
      "___s": true
    },
    {
      "comment": "/**\n     * VBus address of this header's destination\n     * @type {number}\n     * @default 0\n     */",
      "meta": {
        "range": [
          9123,
          9144
        ],
        "filename": "header.js",
        "lineno": 288,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671354",
          "name": "destinationAddress",
          "type": "Literal",
          "value": 0
        }
      },
      "name": "destinationAddress",
      "longname": "Telegram#destinationAddress",
      "kind": "member",
      "description": "VBus address of this header's destination",
      "type": {
        "names": [
          "number"
        ]
      },
      "defaultvalue": "0",
      "memberof": "Telegram",
      "scope": "instance",
      "inherits": "Header#destinationAddress",
      "inherited": true,
      "___id": "T000002R299848",
      "___s": true
    },
    {
      "comment": "/**\n     * VBus address of this header's source\n     * @type {number}\n     * @default\n     */",
      "meta": {
        "range": [
          9249,
          9265
        ],
        "filename": "header.js",
        "lineno": 295,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100671356",
          "name": "sourceAddress",
          "type": "Literal",
          "value": 0
        }
      },
      "name": "sourceAddress",
      "longname": "Telegram#sourceAddress",
      "kind": "member",
      "description": "VBus address of this header's source",
      "type": {
        "names": [
          "number"
        ]
      },
      "defaultvalue": 0,
      "memberof": "Telegram",
      "scope": "instance",
      "inherits": "Header#sourceAddress",
      "inherited": true,
      "___id": "T000002R299849",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns `true` if a Header of the same kind is already added to the HeaderSet.\n     *\n     * @param {Header} header The Header instance to check for.\n     * @returns {boolean} `true` if a Header of the same kind is already in the HeaderSet, `false` otherwise.\n     */",
      "meta": {
        "range": [
          1487,
          1594
        ],
        "filename": "header-set.js",
        "lineno": 64,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670519",
          "name": "HeaderSet#containsHeader",
          "type": "MethodDefinition",
          "paramnames": [
            "header"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "containsHeader",
      "longname": "HeaderSetConsolidator#containsHeader",
      "kind": "function",
      "description": "Returns `true` if a Header of the same kind is already added to the HeaderSet.",
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "`true` if a Header of the same kind is already in the HeaderSet, `false` otherwise."
        }
      ],
      "memberof": "HeaderSetConsolidator",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Header"
            ]
          },
          "description": "The Header instance to check for.",
          "name": "header"
        }
      ],
      "inherits": "HeaderSet#containsHeader",
      "inherited": true,
      "___id": "T000002R299850",
      "___s": true
    },
    {
      "comment": "/**\n     * Adds a Header instance to this set, replacing a previously added Header of same kind.\n     *\n     * @param {Header} header The Header instance to add to this set.\n     */",
      "meta": {
        "range": [
          1786,
          2346
        ],
        "filename": "header-set.js",
        "lineno": 75,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670536",
          "name": "HeaderSet#addHeader",
          "type": "MethodDefinition",
          "paramnames": [
            "header"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "addHeader",
      "longname": "HeaderSetConsolidator#addHeader",
      "kind": "function",
      "description": "Adds a Header instance to this set, replacing a previously added Header of same kind.",
      "memberof": "HeaderSetConsolidator",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Header"
            ]
          },
          "description": "The Header instance to add to this set.",
          "name": "header"
        }
      ],
      "inherits": "HeaderSet#addHeader",
      "inherited": true,
      "___id": "T000002R299851",
      "___s": true
    },
    {
      "comment": "/**\n         * This event is fired whenever a Header instance is added to this set.\n         *\n         * @event HeaderSet#addHeader\n         * @type {Header}\n         */",
      "meta": {
        "filename": "header-set.js",
        "lineno": 87,
        "columnno": 8,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {}
      },
      "name": "addHeader",
      "longname": "HeaderSetConsolidator#event:addHeader",
      "kind": "event",
      "description": "This event is fired whenever a Header instance is added to this set.",
      "type": {
        "names": [
          "Header"
        ]
      },
      "memberof": "HeaderSetConsolidator",
      "scope": "instance",
      "inherits": "HeaderSet#event:addHeader",
      "inherited": true,
      "___id": "T000002R299852",
      "___s": true
    },
    {
      "comment": "/**\n     * Adds a list of Header instances to this set, replacing previously added Headers of same kind.\n     *\n     * @param {Header[]} headers The list of Header instances to add.\n     */",
      "meta": {
        "range": [
          2546,
          2692
        ],
        "filename": "header-set.js",
        "lineno": 101,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670601",
          "name": "HeaderSet#addHeaders",
          "type": "MethodDefinition",
          "paramnames": [
            "headers"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "addHeaders",
      "longname": "HeaderSetConsolidator#addHeaders",
      "kind": "function",
      "description": "Adds a list of Header instances to this set, replacing previously added Headers of same kind.",
      "memberof": "HeaderSetConsolidator",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Array.<Header>"
            ]
          },
          "description": "The list of Header instances to add.",
          "name": "headers"
        }
      ],
      "inherits": "HeaderSet#addHeaders",
      "inherited": true,
      "___id": "T000002R299853",
      "___s": true
    },
    {
      "comment": "/**\n             * This event is fired whenever a Header is removed from this set.\n             *\n             * @event HeaderSet#removeHeader\n             * @type {Header}\n             */",
      "meta": {
        "filename": "header-set.js",
        "lineno": 112,
        "columnno": 12,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {}
      },
      "name": "removeHeader",
      "longname": "HeaderSetConsolidator#event:removeHeader",
      "kind": "event",
      "description": "This event is fired whenever a Header is removed from this set.",
      "type": {
        "names": [
          "Header"
        ]
      },
      "memberof": "HeaderSetConsolidator",
      "scope": "instance",
      "inherits": "HeaderSet#event:removeHeader",
      "inherited": true,
      "___id": "T000002R299854",
      "___s": true
    },
    {
      "comment": "/**\n     * Removes all Header instances from this set.\n     */",
      "meta": {
        "range": [
          3355,
          3436
        ],
        "filename": "header-set.js",
        "lineno": 135,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670687",
          "name": "HeaderSet#removeAllHeaders",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "removeAllHeaders",
      "longname": "HeaderSetConsolidator#removeAllHeaders",
      "kind": "function",
      "description": "Removes all Header instances from this set.",
      "memberof": "HeaderSetConsolidator",
      "scope": "instance",
      "inherits": "HeaderSet#removeAllHeaders",
      "inherited": true,
      "___id": "T000002R299855",
      "___s": true
    },
    {
      "comment": "/**\n     * Removes all Header instances from this set which are older than the given timestamp.\n     *\n     * @param {number|Date} timestamp Timestamp to compare Header instances against.\n     */",
      "meta": {
        "range": [
          3642,
          4077
        ],
        "filename": "header-set.js",
        "lineno": 144,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670703",
          "name": "HeaderSet#removeHeadersOlderThan",
          "type": "MethodDefinition",
          "paramnames": [
            "timestamp"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "removeHeadersOlderThan",
      "longname": "HeaderSetConsolidator#removeHeadersOlderThan",
      "kind": "function",
      "description": "Removes all Header instances from this set which are older than the given timestamp.",
      "memberof": "HeaderSetConsolidator",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "number",
              "Date"
            ]
          },
          "description": "Timestamp to compare Header instances against.",
          "name": "timestamp"
        }
      ],
      "inherits": "HeaderSet#removeHeadersOlderThan",
      "inherited": true,
      "___id": "T000002R299856",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns the count of Header instances currently stored in this set.\n     *\n     * @returns {number} Number of Header instances in this set.\n     */",
      "meta": {
        "range": [
          4246,
          4309
        ],
        "filename": "header-set.js",
        "lineno": 167,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670766",
          "name": "HeaderSet#getHeaderCount",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getHeaderCount",
      "longname": "HeaderSetConsolidator#getHeaderCount",
      "kind": "function",
      "description": "Returns the count of Header instances currently stored in this set.",
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Number of Header instances in this set."
        }
      ],
      "memberof": "HeaderSetConsolidator",
      "scope": "instance",
      "inherits": "HeaderSet#getHeaderCount",
      "inherited": true,
      "___id": "T000002R299857",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns an unsorted list of Header instances stored in this set.\n     *\n     * @returns {Header[]} List of headers stored in this set.\n     */",
      "meta": {
        "range": [
          4473,
          4534
        ],
        "filename": "header-set.js",
        "lineno": 176,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670776",
          "name": "HeaderSet#getHeaders",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getHeaders",
      "longname": "HeaderSetConsolidator#getHeaders",
      "kind": "function",
      "description": "Returns an unsorted list of Header instances stored in this set.",
      "returns": [
        {
          "type": {
            "names": [
              "Array.<Header>"
            ]
          },
          "description": "List of headers stored in this set."
        }
      ],
      "memberof": "HeaderSetConsolidator",
      "scope": "instance",
      "inherits": "HeaderSet#getHeaders",
      "inherited": true,
      "___id": "T000002R299858",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns a sorted list of Header instances stored in this set.\n     *\n     * @returns {Header[]} List of headers stored in this set.\n     */",
      "meta": {
        "range": [
          4695,
          4885
        ],
        "filename": "header-set.js",
        "lineno": 185,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670788",
          "name": "HeaderSet#getSortedHeaders",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getSortedHeaders",
      "longname": "HeaderSetConsolidator#getSortedHeaders",
      "kind": "function",
      "description": "Returns a sorted list of Header instances stored in this set.",
      "returns": [
        {
          "type": {
            "names": [
              "Array.<Header>"
            ]
          },
          "description": "List of headers stored in this set."
        }
      ],
      "memberof": "HeaderSetConsolidator",
      "scope": "instance",
      "inherits": "HeaderSet#getSortedHeaders",
      "inherited": true,
      "___id": "T000002R299859",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns an ID composed of the IDs of all headers stored in this set.\n     *\n     * @returns {string} ID of this HeaderSet.\n     */",
      "meta": {
        "range": [
          5245,
          5485
        ],
        "filename": "header-set.js",
        "lineno": 208,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670842",
          "name": "HeaderSet#getId",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getId",
      "longname": "HeaderSetConsolidator#getId",
      "kind": "function",
      "description": "Returns an ID composed of the IDs of all headers stored in this set.",
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "ID of this HeaderSet."
        }
      ],
      "memberof": "HeaderSetConsolidator",
      "scope": "instance",
      "inherits": "HeaderSet#getId",
      "inherited": true,
      "___id": "T000002R299860",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns an ID hash for this HeaderSet instance.\n     *\n     * @returns {string} ID hash for this HeaderSet\n     */",
      "meta": {
        "range": [
          5621,
          5890
        ],
        "filename": "header-set.js",
        "lineno": 225,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670879",
          "name": "HeaderSet#getIdHash",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "getIdHash",
      "longname": "HeaderSetConsolidator#getIdHash",
      "kind": "function",
      "description": "Returns an ID hash for this HeaderSet instance.",
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "ID hash for this HeaderSet"
        }
      ],
      "memberof": "HeaderSetConsolidator",
      "scope": "instance",
      "inherits": "HeaderSet#getIdHash",
      "inherited": true,
      "___id": "T000002R299861",
      "___s": true
    },
    {
      "comment": "/**\n     * Timestamp of the youngest Header instance added to this set.\n     * @type {Date}\n     */",
      "meta": {
        "range": [
          6076,
          6091
        ],
        "filename": "header-set.js",
        "lineno": 248,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670936",
          "name": "timestamp",
          "type": "Literal",
          "value": null
        }
      },
      "name": "timestamp",
      "longname": "HeaderSetConsolidator#timestamp",
      "kind": "member",
      "description": "Timestamp of the youngest Header instance added to this set.",
      "type": {
        "names": [
          "Date"
        ]
      },
      "memberof": "HeaderSetConsolidator",
      "scope": "instance",
      "inherits": "HeaderSet#timestamp",
      "inherited": true,
      "overrides": "HeaderSet#timestamp",
      "___id": "T000002R299862",
      "___s": true
    },
    {
      "comment": "/**\n     * Array of Header instances in this set.\n     * @type {Header[]}\n     */",
      "meta": {
        "range": [
          6184,
          6200
        ],
        "filename": "header-set.js",
        "lineno": 254,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100670938",
          "name": "headerList",
          "type": "Literal",
          "value": null
        }
      },
      "name": "headerList",
      "longname": "HeaderSetConsolidator#headerList",
      "kind": "member",
      "description": "Array of Header instances in this set.",
      "type": {
        "names": [
          "Array.<Header>"
        ]
      },
      "memberof": "HeaderSetConsolidator",
      "scope": "instance",
      "inherits": "HeaderSet#headerList",
      "inherited": true,
      "___id": "T000002R299863",
      "___s": true
    },
    {
      "comment": "/**\n     * This method resets the converter. It should be used e.g. if the converter output switches between files (allows\n     * some Converter sub-classes to correctly write a header).\n     */",
      "meta": {
        "range": [
          2315,
          2345
        ],
        "filename": "converter.js",
        "lineno": 81,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665753",
          "name": "Converter#reset",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "reset",
      "longname": "VBusRecordingConverter#reset",
      "kind": "function",
      "description": "This method resets the converter. It should be used e.g. if the converter output switches between files (allows\nsome Converter sub-classes to correctly write a header).",
      "memberof": "VBusRecordingConverter",
      "scope": "instance",
      "inherits": "Converter#reset",
      "inherited": true,
      "overrides": "Converter#reset",
      "___id": "T000002R299864",
      "___s": true
    },
    {
      "comment": "/**\n     * This method signals that no additional VBus Header or HeaderSet models will\n     * be converted. It returns a promise that resolves when all data has been\n     * consumed.\n     *\n     * @return {Promise} A Promise that resolves when all data has been consumed.\n     */",
      "meta": {
        "range": [
          2635,
          2720
        ],
        "filename": "converter.js",
        "lineno": 92,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665757",
          "name": "Converter#finish",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "finish",
      "longname": "VBusRecordingConverter#finish",
      "kind": "function",
      "description": "This method signals that no additional VBus Header or HeaderSet models will\nbe converted. It returns a promise that resolves when all data has been\nconsumed.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves when all data has been consumed."
        }
      ],
      "memberof": "VBusRecordingConverter",
      "scope": "instance",
      "async": true,
      "inherits": "Converter#finish",
      "inherited": true,
      "___id": "T000002R299865",
      "___s": true
    },
    {
      "comment": "/**\n     * This method queues a VBus raw data chunk for conversion.\n     * Not all Converter sub-classes support this method.\n     *\n     * @param {RawData} rawData The VBus raw data chunk to queue for conversion.\n     */",
      "meta": {
        "range": [
          2952,
          3138
        ],
        "filename": "converter.js",
        "lineno": 104,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665771",
          "name": "Converter#convertRawData",
          "type": "MethodDefinition",
          "paramnames": [
            "rawData"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "convertRawData",
      "longname": "VBusRecordingConverter#convertRawData",
      "kind": "function",
      "description": "This method queues a VBus raw data chunk for conversion.\nNot all Converter sub-classes support this method.",
      "memberof": "VBusRecordingConverter",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "RawData"
            ]
          },
          "description": "The VBus raw data chunk to queue for conversion.",
          "name": "rawData"
        }
      ],
      "inherits": "Converter#convertRawData",
      "inherited": true,
      "overrides": "Converter#convertRawData",
      "___id": "T000002R299866",
      "___s": true
    },
    {
      "comment": "/**\n     * This method queues a comment for conversion.\n     * Not all Converter sub-classes support this method.\n     *\n     * @param {RawData} rawData The comment to queue for conversion.\n     */",
      "meta": {
        "range": [
          3346,
          3558
        ],
        "filename": "converter.js",
        "lineno": 118,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665792",
          "name": "Converter#convertComment",
          "type": "MethodDefinition",
          "paramnames": [
            "timestamp",
            "comment"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "convertComment",
      "longname": "VBusRecordingConverter#convertComment",
      "kind": "function",
      "description": "This method queues a comment for conversion.\nNot all Converter sub-classes support this method.",
      "memberof": "VBusRecordingConverter",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "RawData"
            ]
          },
          "description": "The comment to queue for conversion.",
          "name": "rawData"
        }
      ],
      "inherits": "Converter#convertComment",
      "inherited": true,
      "overrides": "Converter#convertComment",
      "___id": "T000002R299867",
      "___s": true
    },
    {
      "comment": "/**\n     * This method queues a VBus Header model (Packet, Datagram or Telegram) for conversion.\n     * Not all Converter sub-classes support this method.\n     *\n     * @param {Header} header The Header to queue for conversion.\n     */",
      "meta": {
        "range": [
          3804,
          3987
        ],
        "filename": "converter.js",
        "lineno": 132,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665818",
          "name": "Converter#convertHeader",
          "type": "MethodDefinition",
          "paramnames": [
            "header"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "convertHeader",
      "longname": "VBusRecordingConverter#convertHeader",
      "kind": "function",
      "description": "This method queues a VBus Header model (Packet, Datagram or Telegram) for conversion.\nNot all Converter sub-classes support this method.",
      "memberof": "VBusRecordingConverter",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Header"
            ]
          },
          "description": "The Header to queue for conversion.",
          "name": "header"
        }
      ],
      "inherits": "Converter#convertHeader",
      "inherited": true,
      "overrides": "Converter#convertHeader",
      "___id": "T000002R299868",
      "___s": true
    },
    {
      "comment": "/**\n     * This method queues a VBus HeaderSet instance for conversion.\n     * Not all Converter sub-classes support this method.\n     *\n     * @param {HeaderSet} headerSet The HeaderSet to queue for conversion.\n     */",
      "meta": {
        "range": [
          4217,
          4409
        ],
        "filename": "converter.js",
        "lineno": 146,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665839",
          "name": "Converter#convertHeaderSet",
          "type": "MethodDefinition",
          "paramnames": [
            "headerSet"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "convertHeaderSet",
      "longname": "VBusRecordingConverter#convertHeaderSet",
      "kind": "function",
      "description": "This method queues a VBus HeaderSet instance for conversion.\nNot all Converter sub-classes support this method.",
      "memberof": "VBusRecordingConverter",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "HeaderSet"
            ]
          },
          "description": "The HeaderSet to queue for conversion.",
          "name": "headerSet"
        }
      ],
      "inherits": "Converter#convertHeaderSet",
      "inherited": true,
      "overrides": "Converter#convertHeaderSet",
      "___id": "T000002R299869",
      "___s": true
    },
    {
      "comment": "/**\n     * Specifies whether the underlying stream operates in object mode.\n     * @type {boolean}\n     */",
      "meta": {
        "range": [
          5267,
          5284
        ],
        "filename": "converter.js",
        "lineno": 187,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665938",
          "name": "objectMode",
          "type": "Literal",
          "value": false
        }
      },
      "name": "objectMode",
      "longname": "VBusRecordingConverter#objectMode",
      "kind": "member",
      "description": "Specifies whether the underlying stream operates in object mode.",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "memberof": "VBusRecordingConverter",
      "scope": "instance",
      "inherits": "Converter#objectMode",
      "inherited": true,
      "___id": "T000002R299870",
      "___s": true
    },
    {
      "comment": "/**\n     * This method signals that no additional VBus Header or HeaderSet models will\n     * be converted. It returns a promise that resolves when all data has been\n     * consumed.\n     *\n     * @return {Promise} A Promise that resolves when all data has been consumed.\n     */",
      "meta": {
        "range": [
          2635,
          2720
        ],
        "filename": "converter.js",
        "lineno": 92,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665757",
          "name": "Converter#finish",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "finish",
      "longname": "TextConverter#finish",
      "kind": "function",
      "description": "This method signals that no additional VBus Header or HeaderSet models will\nbe converted. It returns a promise that resolves when all data has been\nconsumed.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves when all data has been consumed."
        }
      ],
      "memberof": "TextConverter",
      "scope": "instance",
      "async": true,
      "inherits": "Converter#finish",
      "inherited": true,
      "___id": "T000002R299871",
      "___s": true
    },
    {
      "comment": "/**\n     * This method queues a VBus raw data chunk for conversion.\n     * Not all Converter sub-classes support this method.\n     *\n     * @param {RawData} rawData The VBus raw data chunk to queue for conversion.\n     */",
      "meta": {
        "range": [
          2952,
          3138
        ],
        "filename": "converter.js",
        "lineno": 104,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665771",
          "name": "Converter#convertRawData",
          "type": "MethodDefinition",
          "paramnames": [
            "rawData"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "convertRawData",
      "longname": "TextConverter#convertRawData",
      "kind": "function",
      "description": "This method queues a VBus raw data chunk for conversion.\nNot all Converter sub-classes support this method.",
      "memberof": "TextConverter",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "RawData"
            ]
          },
          "description": "The VBus raw data chunk to queue for conversion.",
          "name": "rawData"
        }
      ],
      "inherits": "Converter#convertRawData",
      "inherited": true,
      "___id": "T000002R299872",
      "___s": true
    },
    {
      "comment": "/**\n     * This method queues a comment for conversion.\n     * Not all Converter sub-classes support this method.\n     *\n     * @param {RawData} rawData The comment to queue for conversion.\n     */",
      "meta": {
        "range": [
          3346,
          3558
        ],
        "filename": "converter.js",
        "lineno": 118,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665792",
          "name": "Converter#convertComment",
          "type": "MethodDefinition",
          "paramnames": [
            "timestamp",
            "comment"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "convertComment",
      "longname": "TextConverter#convertComment",
      "kind": "function",
      "description": "This method queues a comment for conversion.\nNot all Converter sub-classes support this method.",
      "memberof": "TextConverter",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "RawData"
            ]
          },
          "description": "The comment to queue for conversion.",
          "name": "rawData"
        }
      ],
      "inherits": "Converter#convertComment",
      "inherited": true,
      "___id": "T000002R299873",
      "___s": true
    },
    {
      "comment": "/**\n     * This method queues a VBus Header model (Packet, Datagram or Telegram) for conversion.\n     * Not all Converter sub-classes support this method.\n     *\n     * @param {Header} header The Header to queue for conversion.\n     */",
      "meta": {
        "range": [
          3804,
          3987
        ],
        "filename": "converter.js",
        "lineno": 132,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665818",
          "name": "Converter#convertHeader",
          "type": "MethodDefinition",
          "paramnames": [
            "header"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "convertHeader",
      "longname": "TextConverter#convertHeader",
      "kind": "function",
      "description": "This method queues a VBus Header model (Packet, Datagram or Telegram) for conversion.\nNot all Converter sub-classes support this method.",
      "memberof": "TextConverter",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Header"
            ]
          },
          "description": "The Header to queue for conversion.",
          "name": "header"
        }
      ],
      "inherits": "Converter#convertHeader",
      "inherited": true,
      "___id": "T000002R299874",
      "___s": true
    },
    {
      "comment": "/**\n     * Specifies whether the underlying stream operates in object mode.\n     * @type {boolean}\n     */",
      "meta": {
        "range": [
          5267,
          5284
        ],
        "filename": "converter.js",
        "lineno": 187,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665938",
          "name": "objectMode",
          "type": "Literal",
          "value": false
        }
      },
      "name": "objectMode",
      "longname": "TextConverter#objectMode",
      "kind": "member",
      "description": "Specifies whether the underlying stream operates in object mode.",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "memberof": "TextConverter",
      "scope": "instance",
      "inherits": "Converter#objectMode",
      "inherited": true,
      "___id": "T000002R299875",
      "___s": true
    },
    {
      "comment": "/**\n     * This method resets the converter. It should be used e.g. if the converter output switches between files (allows\n     * some Converter sub-classes to correctly write a header).\n     */",
      "meta": {
        "range": [
          2315,
          2345
        ],
        "filename": "converter.js",
        "lineno": 81,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665753",
          "name": "Converter#reset",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "reset",
      "longname": "DLxJsonConverter#reset",
      "kind": "function",
      "description": "This method resets the converter. It should be used e.g. if the converter output switches between files (allows\nsome Converter sub-classes to correctly write a header).",
      "memberof": "DLxJsonConverter",
      "scope": "instance",
      "inherits": "Converter#reset",
      "inherited": true,
      "overrides": "Converter#reset",
      "___id": "T000002R299876",
      "___s": true
    },
    {
      "comment": "/**\n     * This method signals that no additional VBus Header or HeaderSet models will\n     * be converted. It returns a promise that resolves when all data has been\n     * consumed.\n     *\n     * @return {Promise} A Promise that resolves when all data has been consumed.\n     */",
      "meta": {
        "range": [
          2635,
          2720
        ],
        "filename": "converter.js",
        "lineno": 92,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665757",
          "name": "Converter#finish",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "finish",
      "longname": "DLxJsonConverter#finish",
      "kind": "function",
      "description": "This method signals that no additional VBus Header or HeaderSet models will\nbe converted. It returns a promise that resolves when all data has been\nconsumed.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves when all data has been consumed."
        }
      ],
      "memberof": "DLxJsonConverter",
      "scope": "instance",
      "async": true,
      "inherits": "Converter#finish",
      "inherited": true,
      "overrides": "Converter#finish",
      "___id": "T000002R299877",
      "___s": true
    },
    {
      "comment": "/**\n     * This method queues a VBus raw data chunk for conversion.\n     * Not all Converter sub-classes support this method.\n     *\n     * @param {RawData} rawData The VBus raw data chunk to queue for conversion.\n     */",
      "meta": {
        "range": [
          2952,
          3138
        ],
        "filename": "converter.js",
        "lineno": 104,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665771",
          "name": "Converter#convertRawData",
          "type": "MethodDefinition",
          "paramnames": [
            "rawData"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "convertRawData",
      "longname": "DLxJsonConverter#convertRawData",
      "kind": "function",
      "description": "This method queues a VBus raw data chunk for conversion.\nNot all Converter sub-classes support this method.",
      "memberof": "DLxJsonConverter",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "RawData"
            ]
          },
          "description": "The VBus raw data chunk to queue for conversion.",
          "name": "rawData"
        }
      ],
      "inherits": "Converter#convertRawData",
      "inherited": true,
      "___id": "T000002R299878",
      "___s": true
    },
    {
      "comment": "/**\n     * This method queues a comment for conversion.\n     * Not all Converter sub-classes support this method.\n     *\n     * @param {RawData} rawData The comment to queue for conversion.\n     */",
      "meta": {
        "range": [
          3346,
          3558
        ],
        "filename": "converter.js",
        "lineno": 118,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665792",
          "name": "Converter#convertComment",
          "type": "MethodDefinition",
          "paramnames": [
            "timestamp",
            "comment"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "convertComment",
      "longname": "DLxJsonConverter#convertComment",
      "kind": "function",
      "description": "This method queues a comment for conversion.\nNot all Converter sub-classes support this method.",
      "memberof": "DLxJsonConverter",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "RawData"
            ]
          },
          "description": "The comment to queue for conversion.",
          "name": "rawData"
        }
      ],
      "inherits": "Converter#convertComment",
      "inherited": true,
      "___id": "T000002R299879",
      "___s": true
    },
    {
      "comment": "/**\n     * This method queues a VBus Header model (Packet, Datagram or Telegram) for conversion.\n     * Not all Converter sub-classes support this method.\n     *\n     * @param {Header} header The Header to queue for conversion.\n     */",
      "meta": {
        "range": [
          3804,
          3987
        ],
        "filename": "converter.js",
        "lineno": 132,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665818",
          "name": "Converter#convertHeader",
          "type": "MethodDefinition",
          "paramnames": [
            "header"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "convertHeader",
      "longname": "DLxJsonConverter#convertHeader",
      "kind": "function",
      "description": "This method queues a VBus Header model (Packet, Datagram or Telegram) for conversion.\nNot all Converter sub-classes support this method.",
      "memberof": "DLxJsonConverter",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Header"
            ]
          },
          "description": "The Header to queue for conversion.",
          "name": "header"
        }
      ],
      "inherits": "Converter#convertHeader",
      "inherited": true,
      "___id": "T000002R299880",
      "___s": true
    },
    {
      "comment": "/**\n     * This method queues a VBus HeaderSet instance for conversion.\n     * Not all Converter sub-classes support this method.\n     *\n     * @param {HeaderSet} headerSet The HeaderSet to queue for conversion.\n     */",
      "meta": {
        "range": [
          4217,
          4409
        ],
        "filename": "converter.js",
        "lineno": 146,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665839",
          "name": "Converter#convertHeaderSet",
          "type": "MethodDefinition",
          "paramnames": [
            "headerSet"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "convertHeaderSet",
      "longname": "DLxJsonConverter#convertHeaderSet",
      "kind": "function",
      "description": "This method queues a VBus HeaderSet instance for conversion.\nNot all Converter sub-classes support this method.",
      "memberof": "DLxJsonConverter",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "HeaderSet"
            ]
          },
          "description": "The HeaderSet to queue for conversion.",
          "name": "headerSet"
        }
      ],
      "inherits": "Converter#convertHeaderSet",
      "inherited": true,
      "overrides": "Converter#convertHeaderSet",
      "___id": "T000002R299881",
      "___s": true
    },
    {
      "comment": "/**\n     * Specifies whether the underlying stream operates in object mode.\n     * @type {boolean}\n     */",
      "meta": {
        "range": [
          5267,
          5284
        ],
        "filename": "converter.js",
        "lineno": 187,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665938",
          "name": "objectMode",
          "type": "Literal",
          "value": false
        }
      },
      "name": "objectMode",
      "longname": "DLxJsonConverter#objectMode",
      "kind": "member",
      "description": "Specifies whether the underlying stream operates in object mode.",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "memberof": "DLxJsonConverter",
      "scope": "instance",
      "inherits": "Converter#objectMode",
      "inherited": true,
      "___id": "T000002R299882",
      "___s": true
    },
    {
      "comment": "/**\n     * Plays back a given range of HeaderSets. The stream must be in object mode.\n     *\n     * @param {Writable} stream A writable stream\n     * @param {object} options Options to select and filter HeaderSets\n     * @param {Date} [options.minTimestamp] {@link Recorder#minTimestamp}\n     * @param {Date} [options.maxTimestamp] {@link Recorder#maxTimestamp}\n     * @param {number} [options.interval] {@link Recorder#interval}\n     * @param {boolean} [options.end=true] Whether the stream should be `end()`ed when the playback is complete\n     */",
      "meta": {
        "range": [
          2825,
          4058
        ],
        "filename": "recorder.js",
        "lineno": 86,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100672709",
          "name": "Recorder#playback",
          "type": "MethodDefinition",
          "paramnames": [
            "stream",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "playback",
      "longname": "DLxRecorder#playback",
      "kind": "function",
      "description": "Plays back a given range of HeaderSets. The stream must be in object mode.",
      "memberof": "DLxRecorder",
      "scope": "instance",
      "async": true,
      "params": [
        {
          "type": {
            "names": [
              "Writable"
            ]
          },
          "description": "A writable stream",
          "name": "stream"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Options to select and filter HeaderSets",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "optional": true,
          "description": "{@link Recorder#minTimestamp}",
          "name": "options.minTimestamp"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "optional": true,
          "description": "{@link Recorder#maxTimestamp}",
          "name": "options.maxTimestamp"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "{@link Recorder#interval}",
          "name": "options.interval"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "defaultvalue": true,
          "description": "Whether the stream should be `end()`ed when the playback is complete",
          "name": "options.end"
        }
      ],
      "inherits": "Recorder#playback",
      "inherited": true,
      "___id": "T000002R299883",
      "___s": true
    },
    {
      "comment": "/**\n     * Records a given range of HeaderSet instances. The stream must be in object mode.\n     *\n     * @param {Readable} stream A readable stream in object mode.\n     * @param {object} options Options to select and filter HeaderSet instances.\n     * @param {Date} [options.minTimestamp] See {@link Recorder#minTimestamp}\n     * @param {Date} [options.maxTimestamp] See {@link Recorder#maxTimestamp}\n     * @param {number} [options.interval] See {@link Recorder#interval}\n     * @return {Promise} A Promise that resolves to the recorded ranges.\n     */",
      "meta": {
        "range": [
          4739,
          7254
        ],
        "filename": "recorder.js",
        "lineno": 145,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100672852",
          "name": "Recorder#record",
          "type": "MethodDefinition",
          "paramnames": [
            "stream",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "record",
      "longname": "DLxRecorder#record",
      "kind": "function",
      "description": "Records a given range of HeaderSet instances. The stream must be in object mode.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves to the recorded ranges."
        }
      ],
      "memberof": "DLxRecorder",
      "scope": "instance",
      "async": true,
      "params": [
        {
          "type": {
            "names": [
              "Readable"
            ]
          },
          "description": "A readable stream in object mode.",
          "name": "stream"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Options to select and filter HeaderSet instances.",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "optional": true,
          "description": "See {@link Recorder#minTimestamp}",
          "name": "options.minTimestamp"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "optional": true,
          "description": "See {@link Recorder#maxTimestamp}",
          "name": "options.maxTimestamp"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "See {@link Recorder#interval}",
          "name": "options.interval"
        }
      ],
      "inherits": "Recorder#record",
      "inherited": true,
      "___id": "T000002R299884",
      "___s": true
    },
    {
      "comment": "/**\n     * Synchronize this Recorder's HeaderSets to another Recorder.\n     *\n     * @param {Recorder} recorder Destination Recorder\n     * @param {object} options Options to select and filter HeaderSets\n     * @param {Date} [options.minTimestamp] {@link Recorder#minTimestamp}\n     * @param {Date} [options.maxTimestamp] {@link Recorder#maxTimestamp}\n     * @param {number} [options.interval] {@link Recorder#interval}\n     * @returns {Promise} Promise resolving with a list of ranges that were synchronized.\n     */",
      "meta": {
        "range": [
          8045,
          8651
        ],
        "filename": "recorder.js",
        "lineno": 243,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100673133",
          "name": "Recorder#synchronizeTo",
          "type": "MethodDefinition",
          "paramnames": [
            "recorder",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "synchronizeTo",
      "longname": "DLxRecorder#synchronizeTo",
      "kind": "function",
      "description": "Synchronize this Recorder's HeaderSets to another Recorder.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "Promise resolving with a list of ranges that were synchronized."
        }
      ],
      "memberof": "DLxRecorder",
      "scope": "instance",
      "async": true,
      "params": [
        {
          "type": {
            "names": [
              "Recorder"
            ]
          },
          "description": "Destination Recorder",
          "name": "recorder"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Options to select and filter HeaderSets",
          "name": "options"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "optional": true,
          "description": "{@link Recorder#minTimestamp}",
          "name": "options.minTimestamp"
        },
        {
          "type": {
            "names": [
              "Date"
            ]
          },
          "optional": true,
          "description": "{@link Recorder#maxTimestamp}",
          "name": "options.maxTimestamp"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "{@link Recorder#interval}",
          "name": "options.interval"
        }
      ],
      "inherits": "Recorder#synchronizeTo",
      "inherited": true,
      "___id": "T000002R299885",
      "___s": true
    },
    {
      "comment": "/**\n     * Starts a playback of the provided recorder, recording its data and returning a\n     * Promise that resolves to the recorded ranges.\n     *\n     * @param {Recorder} recorder The recorder to use for playback\n     * @param {RecorderSyncJob} syncJob The synchronization job to perform.\n     * @returns {Promise} Promise resolving with a list of ranges that were synchronized.\n     */",
      "meta": {
        "range": [
          10762,
          10864
        ],
        "filename": "recorder.js",
        "lineno": 323,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100673408",
          "name": "Recorder#_recordSyncJob",
          "type": "MethodDefinition",
          "paramnames": [
            "recorder",
            "syncJob"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "_recordSyncJob",
      "longname": "DLxRecorder#_recordSyncJob",
      "kind": "function",
      "description": "Starts a playback of the provided recorder, recording its data and returning a\nPromise that resolves to the recorded ranges.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "Promise resolving with a list of ranges that were synchronized."
        }
      ],
      "memberof": "DLxRecorder",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Recorder"
            ]
          },
          "description": "The recorder to use for playback",
          "name": "recorder"
        },
        {
          "type": {
            "names": [
              "RecorderSyncJob"
            ]
          },
          "description": "The synchronization job to perform.",
          "name": "syncJob"
        }
      ],
      "inherits": "Recorder#_recordSyncJob",
      "inherited": true,
      "___id": "T000002R299886",
      "___s": true
    },
    {
      "comment": "/**\n     * Plays back the requested synchronization job, piping the resulting data into the\n     * provided stream. Returns a Promise that resolves to the played back ranges.\n     *\n     * @param {Stream} stream The stream (in object mode) to pipe data into\n     * @param {RecorderSyncJob} syncJob The synchronization job to perform.\n     * @returns {Promise} Promise resolving with a list of ranges that were synchronized.\n     */",
      "meta": {
        "range": [
          11306,
          11408
        ],
        "filename": "recorder.js",
        "lineno": 335,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100673418",
          "name": "Recorder#_playbackSyncJob",
          "type": "MethodDefinition",
          "paramnames": [
            "stream",
            "syncJob"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "_playbackSyncJob",
      "longname": "DLxRecorder#_playbackSyncJob",
      "kind": "function",
      "description": "Plays back the requested synchronization job, piping the resulting data into the\nprovided stream. Returns a Promise that resolves to the played back ranges.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "Promise resolving with a list of ranges that were synchronized."
        }
      ],
      "memberof": "DLxRecorder",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Stream"
            ]
          },
          "description": "The stream (in object mode) to pipe data into",
          "name": "stream"
        },
        {
          "type": {
            "names": [
              "RecorderSyncJob"
            ]
          },
          "description": "The synchronization job to perform.",
          "name": "syncJob"
        }
      ],
      "inherits": "Recorder#_playbackSyncJob",
      "inherited": true,
      "overrides": "Recorder#_playbackSyncJob",
      "___id": "T000002R299887",
      "___s": true
    },
    {
      "comment": "/**\n     * Identifier for this recorder instance. It may be used to reference\n     * recorders, for example in sync data storage.\n     * @type {string}\n     */",
      "meta": {
        "range": [
          22379,
          22387
        ],
        "filename": "recorder.js",
        "lineno": 619,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100674487",
          "name": "id",
          "type": "Literal",
          "value": null
        }
      },
      "name": "id",
      "longname": "DLxRecorder#id",
      "kind": "member",
      "description": "Identifier for this recorder instance. It may be used to reference\nrecorders, for example in sync data storage.",
      "type": {
        "names": [
          "string"
        ]
      },
      "memberof": "DLxRecorder",
      "scope": "instance",
      "inherits": "Recorder#id",
      "inherited": true,
      "___id": "T000002R299888",
      "___s": true
    },
    {
      "comment": "/**\n     * Minimum timestamp to use as a default during playback and\n     * synchronization.\n     * @type {Date}\n     * @default '2001-01-01T00:00:00.000Z'\n     */",
      "meta": {
        "range": [
          22562,
          22580
        ],
        "filename": "recorder.js",
        "lineno": 627,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100674489",
          "name": "minTimestamp",
          "type": "Literal",
          "value": null
        }
      },
      "name": "minTimestamp",
      "longname": "DLxRecorder#minTimestamp",
      "kind": "member",
      "description": "Minimum timestamp to use as a default during playback and\nsynchronization.",
      "type": {
        "names": [
          "Date"
        ]
      },
      "defaultvalue": "'2001-01-01T00:00:00.000Z'",
      "memberof": "DLxRecorder",
      "scope": "instance",
      "inherits": "Recorder#minTimestamp",
      "inherited": true,
      "___id": "T000002R299889",
      "___s": true
    },
    {
      "comment": "/**\n     * Maximum timestamp to use as a default during playback and\n     * synchronization.\n     * @type {Date}\n     * @default '2038-01-01T00:00:00.000Z'\n     */",
      "meta": {
        "range": [
          22755,
          22773
        ],
        "filename": "recorder.js",
        "lineno": 635,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100674491",
          "name": "maxTimestamp",
          "type": "Literal",
          "value": null
        }
      },
      "name": "maxTimestamp",
      "longname": "DLxRecorder#maxTimestamp",
      "kind": "member",
      "description": "Maximum timestamp to use as a default during playback and\nsynchronization.",
      "type": {
        "names": [
          "Date"
        ]
      },
      "defaultvalue": "'2038-01-01T00:00:00.000Z'",
      "memberof": "DLxRecorder",
      "scope": "instance",
      "inherits": "Recorder#maxTimestamp",
      "inherited": true,
      "___id": "T000002R299890",
      "___s": true
    },
    {
      "comment": "/**\n     * Interval to be used as a default during playback and\n     * synchronization.\n     * @type {number}\n     * @default 0\n     */",
      "meta": {
        "range": [
          22920,
          22931
        ],
        "filename": "recorder.js",
        "lineno": 643,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100674493",
          "name": "interval",
          "type": "Literal",
          "value": 0
        }
      },
      "name": "interval",
      "longname": "DLxRecorder#interval",
      "kind": "member",
      "description": "Interval to be used as a default during playback and\nsynchronization.",
      "type": {
        "names": [
          "number"
        ]
      },
      "defaultvalue": "0",
      "memberof": "DLxRecorder",
      "scope": "instance",
      "inherits": "Recorder#interval",
      "inherited": true,
      "___id": "T000002R299891",
      "___s": true
    },
    {
      "comment": "/**\n     * Load a set of configuration values from a device.\n     *\n     * If the `Customizer` has an `optimizer` set, the `configuration` parameter\n     * is passed to the optimizer's `completeConfiguration` method. Otherwise it must be an\n     * array of `ConfigurationValue` objects.\n     *\n     * If `options.optimize` is \"truthy\" the list of `ConfigurationValue` objects is passed\n     * into the optimizer's `optimizeLoadConfiguration` method to determine the minimal\n     * set of values to transfer. If `options.optimize` is \"falsy\" all of the\n     * `ConfigurationValue` objects will be loaded.\n     *\n     * @param {array} configuration The set of values to transfer.\n     * @param {object} options\n     * @returns {Promise} A Promise that resolves to the set of values transfered.\n     */",
      "meta": {
        "range": [
          1786,
          2065
        ],
        "filename": "customizer.js",
        "lineno": 59,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665997",
          "name": "Customizer#loadConfiguration",
          "type": "MethodDefinition",
          "paramnames": [
            "configuration",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "loadConfiguration",
      "longname": "ConnectionCustomizer#loadConfiguration",
      "kind": "function",
      "description": "Load a set of configuration values from a device.\n\nIf the `Customizer` has an `optimizer` set, the `configuration` parameter\nis passed to the optimizer's `completeConfiguration` method. Otherwise it must be an\narray of `ConfigurationValue` objects.\n\nIf `options.optimize` is \"truthy\" the list of `ConfigurationValue` objects is passed\ninto the optimizer's `optimizeLoadConfiguration` method to determine the minimal\nset of values to transfer. If `options.optimize` is \"falsy\" all of the\n`ConfigurationValue` objects will be loaded.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves to the set of values transfered."
        }
      ],
      "memberof": "ConnectionCustomizer",
      "scope": "instance",
      "async": true,
      "params": [
        {
          "type": {
            "names": [
              "array"
            ]
          },
          "description": "The set of values to transfer.",
          "name": "configuration"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        }
      ],
      "inherits": "Customizer#loadConfiguration",
      "inherited": true,
      "___id": "T000002R299892",
      "___s": true
    },
    {
      "comment": "/**\n     * Save a set of configuration values to a device.\n     *\n     * If the `Customizer` has an `optimizer` set, the `newConfiguration` parameter\n     * is passed to the optimizer's `completeConfiguration` method. Otherwise it must be an\n     * array of `ConfigurationValue` objects.\n     *\n     * If a `oldConfiguration` parameter is given, the same procedure as for the\n     * `newConfiguration` is applied to it as well.\n     *\n     * If `options.optimize` is \"truthy\" the list of `ConfigurationValue` objects is passed\n     * into the optimizer's `optimizeLoadConfiguration` method to determine the minimal\n     * set of values to transfer. If `options.optimize` is \"falsy\" all of the\n     * `ConfigurationValue` objects will be loaded.\n     *\n     * @param {array} newConfiguration The set of values to transfer.\n     * @param {array} oldConfiguration The set of values to assume to be stored in the device.\n     * @param {object} options\n     * @returns {Promise} A Promise that resolves to the set of values transfered.\n     */",
      "meta": {
        "range": [
          3231,
          3685
        ],
        "filename": "customizer.js",
        "lineno": 93,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100666041",
          "name": "Customizer#saveConfiguration",
          "type": "MethodDefinition",
          "paramnames": [
            "newConfiguration",
            "oldConfiguration",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "saveConfiguration",
      "longname": "ConnectionCustomizer#saveConfiguration",
      "kind": "function",
      "description": "Save a set of configuration values to a device.\n\nIf the `Customizer` has an `optimizer` set, the `newConfiguration` parameter\nis passed to the optimizer's `completeConfiguration` method. Otherwise it must be an\narray of `ConfigurationValue` objects.\n\nIf a `oldConfiguration` parameter is given, the same procedure as for the\n`newConfiguration` is applied to it as well.\n\nIf `options.optimize` is \"truthy\" the list of `ConfigurationValue` objects is passed\ninto the optimizer's `optimizeLoadConfiguration` method to determine the minimal\nset of values to transfer. If `options.optimize` is \"falsy\" all of the\n`ConfigurationValue` objects will be loaded.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves to the set of values transfered."
        }
      ],
      "memberof": "ConnectionCustomizer",
      "scope": "instance",
      "async": true,
      "params": [
        {
          "type": {
            "names": [
              "array"
            ]
          },
          "description": "The set of values to transfer.",
          "name": "newConfiguration"
        },
        {
          "type": {
            "names": [
              "array"
            ]
          },
          "description": "The set of values to assume to be stored in the device.",
          "name": "oldConfiguration"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        }
      ],
      "inherits": "Customizer#saveConfiguration",
      "inherited": true,
      "___id": "T000002R299893",
      "___s": true
    },
    {
      "comment": "/**\n     * Converts the configuration provided into an array of {@see ConfigurationValue} objects.\n     * The provided configuration can be either an array of partially initialized ConfigurationValue\n     * objects or an object mapping value IDs as keys to values.\n     * If no configuration is given a complete configuration set is returned.\n     *\n     * @param {undefined|null|array|object} config Configuration to complete.\n     * @returns {Promise} A Promise that resolves to the completed array of values.\n     */",
      "meta": {
        "range": [
          4353,
          4557
        ],
        "filename": "customizer.js",
        "lineno": 120,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100666100",
          "name": "Customizer#_completeConfiguration",
          "type": "MethodDefinition",
          "paramnames": [
            "config"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "_completeConfiguration",
      "longname": "ConnectionCustomizer#_completeConfiguration",
      "kind": "function",
      "description": "Converts the configuration provided into an array of {@see ConfigurationValue} objects.\nThe provided configuration can be either an array of partially initialized ConfigurationValue\nobjects or an object mapping value IDs as keys to values.\nIf no configuration is given a complete configuration set is returned.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves to the completed array of values."
        }
      ],
      "memberof": "ConnectionCustomizer",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "undefined",
              "null",
              "array",
              "object"
            ]
          },
          "description": "Configuration to complete.",
          "name": "config"
        }
      ],
      "inherits": "Customizer#_completeConfiguration",
      "inherited": true,
      "___id": "T000002R299894",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the optimized array of values based on what values are already loaded.\n     *\n     * @param {array} config The array of values that has already been loaded.\n     * @returns {Promise} A Promise that resolves to the array of values to load next.\n     */",
      "meta": {
        "range": [
          4835,
          4942
        ],
        "filename": "customizer.js",
        "lineno": 134,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100666125",
          "name": "Customizer#_optimizeLoadConfiguration",
          "type": "MethodDefinition",
          "paramnames": [
            "config"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "_optimizeLoadConfiguration",
      "longname": "ConnectionCustomizer#_optimizeLoadConfiguration",
      "kind": "function",
      "description": "Gets the optimized array of values based on what values are already loaded.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves to the array of values to load next."
        }
      ],
      "memberof": "ConnectionCustomizer",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "array"
            ]
          },
          "description": "The array of values that has already been loaded.",
          "name": "config"
        }
      ],
      "inherits": "Customizer#_optimizeLoadConfiguration",
      "inherited": true,
      "___id": "T000002R299895",
      "___s": true
    },
    {
      "comment": "/**\n     * Gets the optimzed array of values to save to the controller.\n     *\n     * @param {array} newConfig The array of values to transfer.\n     * @param {array} oldConfig The array of values that are assumed to be currently stored in the device.\n     * @returns {Promise} A Promise that resolves to the array of values to save.\n     */",
      "meta": {
        "range": [
          5293,
          5428
        ],
        "filename": "customizer.js",
        "lineno": 145,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100666138",
          "name": "Customizer#_optimizeSaveConfiguration",
          "type": "MethodDefinition",
          "paramnames": [
            "newConfig",
            "oldConfig"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "_optimizeSaveConfiguration",
      "longname": "ConnectionCustomizer#_optimizeSaveConfiguration",
      "kind": "function",
      "description": "Gets the optimzed array of values to save to the controller.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves to the array of values to save."
        }
      ],
      "memberof": "ConnectionCustomizer",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "array"
            ]
          },
          "description": "The array of values to transfer.",
          "name": "newConfig"
        },
        {
          "type": {
            "names": [
              "array"
            ]
          },
          "description": "The array of values that are assumed to be currently stored in the device.",
          "name": "oldConfig"
        }
      ],
      "inherits": "Customizer#_optimizeSaveConfiguration",
      "inherited": true,
      "___id": "T000002R299896",
      "___s": true
    },
    {
      "comment": "/**\n     * An identifier for this customizer.\n     * @type {string}\n     */",
      "meta": {
        "range": [
          5592,
          5600
        ],
        "filename": "customizer.js",
        "lineno": 158,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100666162",
          "name": "id",
          "type": "Literal",
          "value": null
        }
      },
      "name": "id",
      "longname": "ConnectionCustomizer#id",
      "kind": "member",
      "description": "An identifier for this customizer.",
      "type": {
        "names": [
          "string"
        ]
      },
      "memberof": "ConnectionCustomizer",
      "scope": "instance",
      "inherits": "Customizer#id",
      "inherited": true,
      "___id": "T000002R299897",
      "___s": true
    },
    {
      "comment": "/**\n     * The VBus address of the device to customize.\n     * @type {number}\n     */",
      "meta": {
        "range": [
          5697,
          5713
        ],
        "filename": "customizer.js",
        "lineno": 164,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100666164",
          "name": "deviceAddress",
          "type": "Literal",
          "value": 0
        }
      },
      "name": "deviceAddress",
      "longname": "ConnectionCustomizer#deviceAddress",
      "kind": "member",
      "description": "The VBus address of the device to customize.",
      "type": {
        "names": [
          "number"
        ]
      },
      "memberof": "ConnectionCustomizer",
      "scope": "instance",
      "inherits": "Customizer#deviceAddress",
      "inherited": true,
      "___id": "T000002R299898",
      "___s": true
    },
    {
      "comment": "/**\n     * A configuration optimizer.\n     * @type {ConfigurationOptimizer}\n     */",
      "meta": {
        "range": [
          5808,
          5823
        ],
        "filename": "customizer.js",
        "lineno": 170,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100666166",
          "name": "optimizer",
          "type": "Literal",
          "value": null
        }
      },
      "name": "optimizer",
      "longname": "ConnectionCustomizer#optimizer",
      "kind": "member",
      "description": "A configuration optimizer.",
      "type": {
        "names": [
          "ConfigurationOptimizer"
        ]
      },
      "memberof": "ConnectionCustomizer",
      "scope": "instance",
      "inherits": "Customizer#optimizer",
      "inherited": true,
      "___id": "T000002R299899",
      "___s": true
    },
    {
      "comment": "/**\n     * Establish underlying connection and start streaming data to the writable side\n     * of this `Connection` instance's stream.\n     *\n     * @abstract\n     * @returns {Promise} A promise that resolves once the connection has been established.\n     */",
      "meta": {
        "range": [
          3109,
          3192
        ],
        "filename": "connection.js",
        "lineno": 106,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100663262",
          "name": "Connection#connect",
          "type": "MethodDefinition",
          "paramnames": [
            "force"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "connect",
      "longname": "SerialConnection#connect",
      "kind": "function",
      "description": "Establish underlying connection and start streaming data to the writable side\nof this `Connection` instance's stream.",
      "virtual": true,
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A promise that resolves once the connection has been established."
        }
      ],
      "memberof": "SerialConnection",
      "scope": "instance",
      "inherits": "Connection#connect",
      "inherited": true,
      "overrides": "Connection#connect",
      "___id": "T000002R299900",
      "___s": true
    },
    {
      "comment": "/**\n     * Diconnect this instance.\n     * @abstract\n     */",
      "meta": {
        "range": [
          3263,
          3344
        ],
        "filename": "connection.js",
        "lineno": 114,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100663271",
          "name": "Connection#disconnect",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "disconnect",
      "longname": "SerialConnection#disconnect",
      "kind": "function",
      "description": "Diconnect this instance.",
      "virtual": true,
      "memberof": "SerialConnection",
      "scope": "instance",
      "inherits": "Connection#disconnect",
      "inherited": true,
      "overrides": "Connection#disconnect",
      "___id": "T000002R299901",
      "___s": true
    },
    {
      "comment": "/**\n     * Send raw data over this Connection instance.\n     *\n     * @param {Header|Buffer} data The Header or Buffer instance to be sent.\n     */",
      "meta": {
        "range": [
          9731,
          9869
        ],
        "filename": "connection.js",
        "lineno": 292,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100663959",
          "name": "Connection#send",
          "type": "MethodDefinition",
          "paramnames": [
            "data"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "send",
      "longname": "SerialConnection#send",
      "kind": "function",
      "description": "Send raw data over this Connection instance.",
      "memberof": "SerialConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Header",
              "Buffer"
            ]
          },
          "description": "The Header or Buffer instance to be sent.",
          "name": "data"
        }
      ],
      "inherits": "Connection#send",
      "inherited": true,
      "___id": "T000002R299902",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends and / or receives a VBus data.\n     *\n     * @param {Header|Buffer} txData The Header or Buffer instance to be sent.\n     * @param {object} options\n     * @param {number} options.timeout Timeout in milliseconds after which the `txData` will be sent again\n     * @param {number} options.timeoutIncr After each timeout retransmission the timeout value for the next try is increment by this value.\n     * @param {number} options.tries After this number of tries the returned Promise will resolve with value `null`.\n     * @param {?function} options.filterPacket Will be called when a Packet has been received with the Packet and a callback as arguments.\n     * @param {?function} options.filterDatagram Will be called when a Datagram has been received with the Datagram and a callback as arguments.\n     * @param {?function} options.filterTelegram Will be called when a Telegram has been received with the Telegram and a callback as arguments.\n     * @returns {Promise} A Promise that either resolves to the VBus data selected by one of the filter callbacks or `null` on timeout.\n     */",
      "meta": {
        "range": [
          10981,
          13504
        ],
        "filename": "connection.js",
        "lineno": 312,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100663982",
          "name": "Connection#transceive",
          "type": "MethodDefinition",
          "paramnames": [
            "txData",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "transceive",
      "longname": "SerialConnection#transceive",
      "kind": "function",
      "description": "Sends and / or receives a VBus data.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that either resolves to the VBus data selected by one of the filter callbacks or `null` on timeout."
        }
      ],
      "memberof": "SerialConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Header",
              "Buffer"
            ]
          },
          "description": "The Header or Buffer instance to be sent.",
          "name": "txData"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Timeout in milliseconds after which the `txData` will be sent again",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "After each timeout retransmission the timeout value for the next try is increment by this value.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "After this number of tries the returned Promise will resolve with value `null`.",
          "name": "options.tries"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "nullable": true,
          "description": "Will be called when a Packet has been received with the Packet and a callback as arguments.",
          "name": "options.filterPacket"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "nullable": true,
          "description": "Will be called when a Datagram has been received with the Datagram and a callback as arguments.",
          "name": "options.filterDatagram"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "nullable": true,
          "description": "Will be called when a Telegram has been received with the Telegram and a callback as arguments.",
          "name": "options.filterTelegram"
        }
      ],
      "inherits": "Connection#transceive",
      "inherited": true,
      "___id": "T000002R299903",
      "___s": true
    },
    {
      "comment": "/**\n     * Waits for a VBus bus offering datagram (Command 0x0500).\n     *\n     * Returns a Promise that resolves with the Datagram or `null` if the method timed out.\n     * @param {number} timeout=20000 Timeout in milliseconds\n     * @returns {Promise} A Promise that resolves to the bus offering Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          13851,
          14205
        ],
        "filename": "connection.js",
        "lineno": 411,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100664247",
          "name": "Connection#waitForFreeBus",
          "type": "MethodDefinition",
          "paramnames": [
            "timeout"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "waitForFreeBus",
      "longname": "SerialConnection#waitForFreeBus",
      "kind": "function",
      "description": "Waits for a VBus bus offering datagram (Command 0x0500).\n\nReturns a Promise that resolves with the Datagram or `null` if the method timed out.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves to the bus offering Datagram or `null` on timeout."
        }
      ],
      "memberof": "SerialConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 20000,
          "description": "Timeout in milliseconds",
          "name": "timeout"
        }
      ],
      "inherits": "Connection#waitForFreeBus",
      "inherited": true,
      "___id": "T000002R299904",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a VBus bus release datagram (Command 0x0600).\n     * Returns a Promise that resolves with the first VBus packet received after the release or `null` on timeout.\n     *\n     * @param {number} address The VBus address of the master device to give the bus ownership back to.\n     * @param {object} options\n     * @param {number} options.tries=2 Number of tries to give the bus ownership back.\n     * @param {number} options.timeout=1500 Time in milliseconds to wait between tries.\n     */",
      "meta": {
        "range": [
          14718,
          15246
        ],
        "filename": "connection.js",
        "lineno": 435,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100664290",
          "name": "Connection#releaseBus",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "releaseBus",
      "longname": "SerialConnection#releaseBus",
      "kind": "function",
      "description": "Sends a VBus bus release datagram (Command 0x0600).\nReturns a Promise that resolves with the first VBus packet received after the release or `null` on timeout.",
      "memberof": "SerialConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the master device to give the bus ownership back to.",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 2,
          "description": "Number of tries to give the bus ownership back.",
          "name": "options.tries"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 1500,
          "description": "Time in milliseconds to wait between tries.",
          "name": "options.timeout"
        }
      ],
      "inherits": "Connection#releaseBus",
      "inherited": true,
      "___id": "T000002R299905",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to get a value from a device.\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param {number} address The VBus address of the device to get the value from\n     * @param {number} valueId The ID of the value to read from the device.\n     * @param {object} options\n     * @param {number} options.timeout=500 Time in milliseconds between tries.\n     * @param {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param {number} options.tries=3 Number of tries to get the value.\n     * @returns {Promise} A promise that resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          15965,
          17410
        ],
        "filename": "connection.js",
        "lineno": 468,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100664352",
          "name": "Connection#getValueById",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "valueId",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getValueById",
      "longname": "SerialConnection#getValueById",
      "kind": "function",
      "description": "Sends a Datagram to get a value from a device.\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A promise that resolves to the received Datagram or `null` on timeout."
        }
      ],
      "memberof": "SerialConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to get the value from",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The ID of the value to read from the device.",
          "name": "valueId"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to get the value.",
          "name": "options.tries"
        }
      ],
      "inherits": "Connection#getValueById",
      "inherited": true,
      "___id": "T000002R299906",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to set a value in a device.\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param {number} address The VBus address of the device to set the value in\n     * @param {number} valueId The ID of the value to write to the device.\n     * @param {number} value The value to write to the device.\n     * @param {object} options\n     * @param {number} options.timeout=500 Time in milliseconds between tries.\n     * @param {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param {number} options.tries=3 Number of tries to get the value.\n     * @returns {Promise} A promise that resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          18187,
          19331
        ],
        "filename": "connection.js",
        "lineno": 527,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100664504",
          "name": "Connection#setValueById",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "valueId",
            "value",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "setValueById",
      "longname": "SerialConnection#setValueById",
      "kind": "function",
      "description": "Sends a Datagram to set a value in a device.\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A promise that resolves to the received Datagram or `null` on timeout."
        }
      ],
      "memberof": "SerialConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to set the value in",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The ID of the value to write to the device.",
          "name": "valueId"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The value to write to the device.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to get the value.",
          "name": "options.tries"
        }
      ],
      "inherits": "Connection#setValueById",
      "inherited": true,
      "___id": "T000002R299907",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to lookup a value ID hash in a device.\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param  {number} address The VBus address of the device to lookup the value in.\n     * @param  {number} valueId The ID of the value to lookup in the device.\n     * @param  {object} options\n     * @param  {number} options.timeout=500 Time in milliseconds between tries.\n     * @param {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param  {number} options.tries=3 Number of tries to lookup the value.\n     * @return {Promise} A Promise the resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          20067,
          21052
        ],
        "filename": "connection.js",
        "lineno": 577,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100664630",
          "name": "Connection#getValueIdHashById",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "valueId",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getValueIdHashById",
      "longname": "SerialConnection#getValueIdHashById",
      "kind": "function",
      "description": "Sends a Datagram to lookup a value ID hash in a device.\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise the resolves to the received Datagram or `null` on timeout."
        }
      ],
      "memberof": "SerialConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to lookup the value in.",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The ID of the value to lookup in the device.",
          "name": "valueId"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to lookup the value.",
          "name": "options.tries"
        }
      ],
      "inherits": "Connection#getValueIdHashById",
      "inherited": true,
      "___id": "T000002R299908",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to lookup a value ID in a device.\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param  {number} address The VBus address of the device to lookup the value in.\n     * @param  {number} valueIdHash The ID hash of the value to lookup in the device.\n     * @param  {object} options\n     * @param  {number} options.timeout=500 Time in milliseconds between tries.\n     * @param {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param  {number} options.tries=3 Number of tries to lookup the value.\n     * @return {Promise} A Promise the resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          21792,
          22833
        ],
        "filename": "connection.js",
        "lineno": 623,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100664730",
          "name": "Connection#getValueIdByIdHash",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "valueIdHash",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getValueIdByIdHash",
      "longname": "SerialConnection#getValueIdByIdHash",
      "kind": "function",
      "description": "Sends a Datagram to lookup a value ID in a device.\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise the resolves to the received Datagram or `null` on timeout."
        }
      ],
      "memberof": "SerialConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to lookup the value in.",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The ID hash of the value to lookup in the device.",
          "name": "valueIdHash"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to lookup the value.",
          "name": "options.tries"
        }
      ],
      "inherits": "Connection#getValueIdByIdHash",
      "inherited": true,
      "___id": "T000002R299909",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to lookup the controller's capabilities (part 1).\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param  {number} address The VBus address of the device to get the capabilities from.\n     * @param  {object} options\n     * @param  {number} options.timeout=500 Time in milliseconds between tries.\n     * @param  {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param  {number} options.tries=3 Number of tries to lookup the value.\n     * @return {Promise} A Promise the resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          23510,
          24400
        ],
        "filename": "connection.js",
        "lineno": 668,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100664836",
          "name": "Connection#getCaps1",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getCaps1",
      "longname": "SerialConnection#getCaps1",
      "kind": "function",
      "description": "Sends a Datagram to lookup the controller's capabilities (part 1).\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise the resolves to the received Datagram or `null` on timeout."
        }
      ],
      "memberof": "SerialConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to get the capabilities from.",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to lookup the value.",
          "name": "options.tries"
        }
      ],
      "inherits": "Connection#getCaps1",
      "inherited": true,
      "___id": "T000002R299910",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to begin a bulk valke transaction.\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param  {number} address The VBus address of the device to begin the transaction on.\n     * @param  {number} txTimeout The number of seconds of inactivity after which the transaction is rolled back.\n     * @param  {object} options\n     * @param  {number} options.timeout=500 Time in milliseconds between tries.\n     * @param  {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param  {number} options.tries=3 Number of tries to lookup the value.\n     * @return {Promise} A Promise the resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          25175,
          26100
        ],
        "filename": "connection.js",
        "lineno": 712,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100664928",
          "name": "Connection#beginBulkValueTransaction",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "txTimeout",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "beginBulkValueTransaction",
      "longname": "SerialConnection#beginBulkValueTransaction",
      "kind": "function",
      "description": "Sends a Datagram to begin a bulk valke transaction.\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise the resolves to the received Datagram or `null` on timeout."
        }
      ],
      "memberof": "SerialConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to begin the transaction on.",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number of seconds of inactivity after which the transaction is rolled back.",
          "name": "txTimeout"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to lookup the value.",
          "name": "options.tries"
        }
      ],
      "inherits": "Connection#beginBulkValueTransaction",
      "inherited": true,
      "___id": "T000002R299911",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to commit a bulk valke transaction.\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param  {number} address The VBus address of the device to commit the transaction on.\n     * @param  {object} options\n     * @param  {number} options.timeout=500 Time in milliseconds between tries.\n     * @param  {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param  {number} options.tries=3 Number of tries to lookup the value.\n     * @return {Promise} A Promise the resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          26763,
          27670
        ],
        "filename": "connection.js",
        "lineno": 755,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665021",
          "name": "Connection#commitBulkValueTransaction",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "commitBulkValueTransaction",
      "longname": "SerialConnection#commitBulkValueTransaction",
      "kind": "function",
      "description": "Sends a Datagram to commit a bulk valke transaction.\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise the resolves to the received Datagram or `null` on timeout."
        }
      ],
      "memberof": "SerialConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to commit the transaction on.",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to lookup the value.",
          "name": "options.tries"
        }
      ],
      "inherits": "Connection#commitBulkValueTransaction",
      "inherited": true,
      "___id": "T000002R299912",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to rollback a bulk valke transaction.\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param  {number} address The VBus address of the device to perform the rollback on.\n     * @param  {object} options\n     * @param  {number} options.timeout=500 Time in milliseconds between tries.\n     * @param  {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param  {number} options.tries=3 Number of tries to lookup the value.\n     * @return {Promise} A Promise the resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          28333,
          29242
        ],
        "filename": "connection.js",
        "lineno": 798,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665113",
          "name": "Connection#rollbackBulkValueTransaction",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "rollbackBulkValueTransaction",
      "longname": "SerialConnection#rollbackBulkValueTransaction",
      "kind": "function",
      "description": "Sends a Datagram to rollback a bulk valke transaction.\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise the resolves to the received Datagram or `null` on timeout."
        }
      ],
      "memberof": "SerialConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to perform the rollback on.",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to lookup the value.",
          "name": "options.tries"
        }
      ],
      "inherits": "Connection#rollbackBulkValueTransaction",
      "inherited": true,
      "___id": "T000002R299913",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to set a value during a bulk value transaction.\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param  {number} address The VBus address of the device to set the value on.\n     * @param  {number} valueId The ID of the value to write to the device.\n     * @param  {number} value The value to write to the device.\n     * @param  {object} options\n     * @param  {number} options.timeout=500 Time in milliseconds between tries.\n     * @param  {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param  {number} options.tries=3 Number of tries to lookup the value.\n     * @return {Promise} A Promise the resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          30048,
          31145
        ],
        "filename": "connection.js",
        "lineno": 843,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665205",
          "name": "Connection#setBulkValueById",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "valueId",
            "value",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "setBulkValueById",
      "longname": "SerialConnection#setBulkValueById",
      "kind": "function",
      "description": "Sends a Datagram to set a value during a bulk value transaction.\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise the resolves to the received Datagram or `null` on timeout."
        }
      ],
      "memberof": "SerialConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to set the value on.",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The ID of the value to write to the device.",
          "name": "valueId"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The value to write to the device.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to lookup the value.",
          "name": "options.tries"
        }
      ],
      "inherits": "Connection#setBulkValueById",
      "inherited": true,
      "___id": "T000002R299914",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a promise that resolves when this Connection\n     * instance is connected and rejects if it is disconnected.\n     * If it is neither connected nor disconnected the promise\n     * will stay pending until one of the states is entered.\n     *\n     * @returns {Promise}\n     */",
      "meta": {
        "range": [
          33332,
          34263
        ],
        "filename": "connection.js",
        "lineno": 952,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665508",
          "name": "Connection#createConnectedPromise",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "createConnectedPromise",
      "longname": "SerialConnection#createConnectedPromise",
      "kind": "function",
      "description": "Creates a promise that resolves when this Connection\ninstance is connected and rejects if it is disconnected.\nIf it is neither connected nor disconnected the promise\nwill stay pending until one of the states is entered.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "SerialConnection",
      "scope": "instance",
      "inherits": "Connection#createConnectedPromise",
      "inherited": true,
      "___id": "T000002R299915",
      "___s": true
    },
    {
      "comment": "/**\n     * Reference to this instance's DataSource.\n     * @type {DataSource}\n     */",
      "meta": {
        "range": [
          34437,
          34453
        ],
        "filename": "connection.js",
        "lineno": 989,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665601",
          "name": "dataSource",
          "type": "Literal",
          "value": null
        }
      },
      "name": "dataSource",
      "longname": "SerialConnection#dataSource",
      "kind": "member",
      "description": "Reference to this instance's DataSource.",
      "type": {
        "names": [
          "DataSource"
        ]
      },
      "memberof": "SerialConnection",
      "scope": "instance",
      "inherits": "Connection#dataSource",
      "inherited": true,
      "___id": "T000002R299916",
      "___s": true
    },
    {
      "comment": "/**\n     * The VBus channel that this connection is established to.\n     * All `Header` instances created by this `Connection` instance will be assigned\n     * this VBus channel.\n     * @type {number}\n     */",
      "meta": {
        "range": [
          34673,
          34683
        ],
        "filename": "connection.js",
        "lineno": 997,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665603",
          "name": "channel",
          "type": "Literal",
          "value": 0
        }
      },
      "name": "channel",
      "longname": "SerialConnection#channel",
      "kind": "member",
      "description": "The VBus channel that this connection is established to.\nAll `Header` instances created by this `Connection` instance will be assigned\nthis VBus channel.",
      "type": {
        "names": [
          "number"
        ]
      },
      "memberof": "SerialConnection",
      "scope": "instance",
      "inherits": "Connection#channel",
      "inherited": true,
      "___id": "T000002R299917",
      "___s": true
    },
    {
      "comment": "/**\n     * The VBus address used for sending information over this connection.\n     * @type {number}\n     */",
      "meta": {
        "range": [
          34803,
          34822
        ],
        "filename": "connection.js",
        "lineno": 1003,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665605",
          "name": "selfAddress",
          "type": "Literal",
          "value": 32
        }
      },
      "name": "selfAddress",
      "longname": "SerialConnection#selfAddress",
      "kind": "member",
      "description": "The VBus address used for sending information over this connection.",
      "type": {
        "names": [
          "number"
        ]
      },
      "memberof": "SerialConnection",
      "scope": "instance",
      "inherits": "Connection#selfAddress",
      "inherited": true,
      "___id": "T000002R299918",
      "___s": true
    },
    {
      "comment": "/**\n     * The current connection state.\n     * @type {string}\n     */",
      "meta": {
        "range": [
          34904,
          34946
        ],
        "filename": "connection.js",
        "lineno": 1009,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665607",
          "name": "connectionState",
          "type": "MemberExpression",
          "value": "states.STATE_DISCONNECTED"
        }
      },
      "name": "connectionState",
      "longname": "SerialConnection#connectionState",
      "kind": "member",
      "description": "The current connection state.",
      "type": {
        "names": [
          "string"
        ]
      },
      "memberof": "SerialConnection",
      "scope": "instance",
      "inherits": "Connection#connectionState",
      "inherited": true,
      "___id": "T000002R299919",
      "___s": true
    },
    {
      "comment": "/**\n     * The internal receive buffer of this conneciton.\n     * @type {Buffer}\n     */",
      "meta": {
        "range": [
          35046,
          35060
        ],
        "filename": "connection.js",
        "lineno": 1015,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665611",
          "name": "rxBuffer",
          "type": "Literal",
          "value": null
        }
      },
      "name": "rxBuffer",
      "longname": "SerialConnection#rxBuffer",
      "kind": "member",
      "description": "The internal receive buffer of this conneciton.",
      "type": {
        "names": [
          "Buffer"
        ]
      },
      "memberof": "SerialConnection",
      "scope": "instance",
      "inherits": "Connection#rxBuffer",
      "inherited": true,
      "___id": "T000002R299920",
      "___s": true
    },
    {
      "comment": "/**\n     * Establish underlying connection and start streaming data to the writable side\n     * of this `Connection` instance's stream.\n     *\n     * @abstract\n     * @returns {Promise} A promise that resolves once the connection has been established.\n     */",
      "meta": {
        "range": [
          3109,
          3192
        ],
        "filename": "connection.js",
        "lineno": 106,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100663262",
          "name": "Connection#connect",
          "type": "MethodDefinition",
          "paramnames": [
            "force"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "connect",
      "longname": "TcpConnection#connect",
      "kind": "function",
      "description": "Establish underlying connection and start streaming data to the writable side\nof this `Connection` instance's stream.",
      "virtual": true,
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A promise that resolves once the connection has been established."
        }
      ],
      "memberof": "TcpConnection",
      "scope": "instance",
      "inherits": "Connection#connect",
      "inherited": true,
      "overrides": "Connection#connect",
      "___id": "T000002R299921",
      "___s": true
    },
    {
      "comment": "/**\n     * Diconnect this instance.\n     * @abstract\n     */",
      "meta": {
        "range": [
          3263,
          3344
        ],
        "filename": "connection.js",
        "lineno": 114,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100663271",
          "name": "Connection#disconnect",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "disconnect",
      "longname": "TcpConnection#disconnect",
      "kind": "function",
      "description": "Diconnect this instance.",
      "virtual": true,
      "memberof": "TcpConnection",
      "scope": "instance",
      "inherits": "Connection#disconnect",
      "inherited": true,
      "overrides": "Connection#disconnect",
      "___id": "T000002R299922",
      "___s": true
    },
    {
      "comment": "/**\n     * Send raw data over this Connection instance.\n     *\n     * @param {Header|Buffer} data The Header or Buffer instance to be sent.\n     */",
      "meta": {
        "range": [
          9731,
          9869
        ],
        "filename": "connection.js",
        "lineno": 292,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100663959",
          "name": "Connection#send",
          "type": "MethodDefinition",
          "paramnames": [
            "data"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "send",
      "longname": "TcpConnection#send",
      "kind": "function",
      "description": "Send raw data over this Connection instance.",
      "memberof": "TcpConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Header",
              "Buffer"
            ]
          },
          "description": "The Header or Buffer instance to be sent.",
          "name": "data"
        }
      ],
      "inherits": "Connection#send",
      "inherited": true,
      "___id": "T000002R299923",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends and / or receives a VBus data.\n     *\n     * @param {Header|Buffer} txData The Header or Buffer instance to be sent.\n     * @param {object} options\n     * @param {number} options.timeout Timeout in milliseconds after which the `txData` will be sent again\n     * @param {number} options.timeoutIncr After each timeout retransmission the timeout value for the next try is increment by this value.\n     * @param {number} options.tries After this number of tries the returned Promise will resolve with value `null`.\n     * @param {?function} options.filterPacket Will be called when a Packet has been received with the Packet and a callback as arguments.\n     * @param {?function} options.filterDatagram Will be called when a Datagram has been received with the Datagram and a callback as arguments.\n     * @param {?function} options.filterTelegram Will be called when a Telegram has been received with the Telegram and a callback as arguments.\n     * @returns {Promise} A Promise that either resolves to the VBus data selected by one of the filter callbacks or `null` on timeout.\n     */",
      "meta": {
        "range": [
          10981,
          13504
        ],
        "filename": "connection.js",
        "lineno": 312,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100663982",
          "name": "Connection#transceive",
          "type": "MethodDefinition",
          "paramnames": [
            "txData",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "transceive",
      "longname": "TcpConnection#transceive",
      "kind": "function",
      "description": "Sends and / or receives a VBus data.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that either resolves to the VBus data selected by one of the filter callbacks or `null` on timeout."
        }
      ],
      "memberof": "TcpConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "Header",
              "Buffer"
            ]
          },
          "description": "The Header or Buffer instance to be sent.",
          "name": "txData"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Timeout in milliseconds after which the `txData` will be sent again",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "After each timeout retransmission the timeout value for the next try is increment by this value.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "After this number of tries the returned Promise will resolve with value `null`.",
          "name": "options.tries"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "nullable": true,
          "description": "Will be called when a Packet has been received with the Packet and a callback as arguments.",
          "name": "options.filterPacket"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "nullable": true,
          "description": "Will be called when a Datagram has been received with the Datagram and a callback as arguments.",
          "name": "options.filterDatagram"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "nullable": true,
          "description": "Will be called when a Telegram has been received with the Telegram and a callback as arguments.",
          "name": "options.filterTelegram"
        }
      ],
      "inherits": "Connection#transceive",
      "inherited": true,
      "___id": "T000002R299924",
      "___s": true
    },
    {
      "comment": "/**\n     * Waits for a VBus bus offering datagram (Command 0x0500).\n     *\n     * Returns a Promise that resolves with the Datagram or `null` if the method timed out.\n     * @param {number} timeout=20000 Timeout in milliseconds\n     * @returns {Promise} A Promise that resolves to the bus offering Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          13851,
          14205
        ],
        "filename": "connection.js",
        "lineno": 411,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100664247",
          "name": "Connection#waitForFreeBus",
          "type": "MethodDefinition",
          "paramnames": [
            "timeout"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "waitForFreeBus",
      "longname": "TcpConnection#waitForFreeBus",
      "kind": "function",
      "description": "Waits for a VBus bus offering datagram (Command 0x0500).\n\nReturns a Promise that resolves with the Datagram or `null` if the method timed out.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise that resolves to the bus offering Datagram or `null` on timeout."
        }
      ],
      "memberof": "TcpConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 20000,
          "description": "Timeout in milliseconds",
          "name": "timeout"
        }
      ],
      "inherits": "Connection#waitForFreeBus",
      "inherited": true,
      "___id": "T000002R299925",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a VBus bus release datagram (Command 0x0600).\n     * Returns a Promise that resolves with the first VBus packet received after the release or `null` on timeout.\n     *\n     * @param {number} address The VBus address of the master device to give the bus ownership back to.\n     * @param {object} options\n     * @param {number} options.tries=2 Number of tries to give the bus ownership back.\n     * @param {number} options.timeout=1500 Time in milliseconds to wait between tries.\n     */",
      "meta": {
        "range": [
          14718,
          15246
        ],
        "filename": "connection.js",
        "lineno": 435,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100664290",
          "name": "Connection#releaseBus",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "releaseBus",
      "longname": "TcpConnection#releaseBus",
      "kind": "function",
      "description": "Sends a VBus bus release datagram (Command 0x0600).\nReturns a Promise that resolves with the first VBus packet received after the release or `null` on timeout.",
      "memberof": "TcpConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the master device to give the bus ownership back to.",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 2,
          "description": "Number of tries to give the bus ownership back.",
          "name": "options.tries"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 1500,
          "description": "Time in milliseconds to wait between tries.",
          "name": "options.timeout"
        }
      ],
      "inherits": "Connection#releaseBus",
      "inherited": true,
      "___id": "T000002R299926",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to get a value from a device.\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param {number} address The VBus address of the device to get the value from\n     * @param {number} valueId The ID of the value to read from the device.\n     * @param {object} options\n     * @param {number} options.timeout=500 Time in milliseconds between tries.\n     * @param {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param {number} options.tries=3 Number of tries to get the value.\n     * @returns {Promise} A promise that resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          15965,
          17410
        ],
        "filename": "connection.js",
        "lineno": 468,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100664352",
          "name": "Connection#getValueById",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "valueId",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getValueById",
      "longname": "TcpConnection#getValueById",
      "kind": "function",
      "description": "Sends a Datagram to get a value from a device.\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A promise that resolves to the received Datagram or `null` on timeout."
        }
      ],
      "memberof": "TcpConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to get the value from",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The ID of the value to read from the device.",
          "name": "valueId"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to get the value.",
          "name": "options.tries"
        }
      ],
      "inherits": "Connection#getValueById",
      "inherited": true,
      "___id": "T000002R299927",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to set a value in a device.\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param {number} address The VBus address of the device to set the value in\n     * @param {number} valueId The ID of the value to write to the device.\n     * @param {number} value The value to write to the device.\n     * @param {object} options\n     * @param {number} options.timeout=500 Time in milliseconds between tries.\n     * @param {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param {number} options.tries=3 Number of tries to get the value.\n     * @returns {Promise} A promise that resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          18187,
          19331
        ],
        "filename": "connection.js",
        "lineno": 527,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100664504",
          "name": "Connection#setValueById",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "valueId",
            "value",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "setValueById",
      "longname": "TcpConnection#setValueById",
      "kind": "function",
      "description": "Sends a Datagram to set a value in a device.\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A promise that resolves to the received Datagram or `null` on timeout."
        }
      ],
      "memberof": "TcpConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to set the value in",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The ID of the value to write to the device.",
          "name": "valueId"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The value to write to the device.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to get the value.",
          "name": "options.tries"
        }
      ],
      "inherits": "Connection#setValueById",
      "inherited": true,
      "___id": "T000002R299928",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to lookup a value ID hash in a device.\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param  {number} address The VBus address of the device to lookup the value in.\n     * @param  {number} valueId The ID of the value to lookup in the device.\n     * @param  {object} options\n     * @param  {number} options.timeout=500 Time in milliseconds between tries.\n     * @param {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param  {number} options.tries=3 Number of tries to lookup the value.\n     * @return {Promise} A Promise the resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          20067,
          21052
        ],
        "filename": "connection.js",
        "lineno": 577,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100664630",
          "name": "Connection#getValueIdHashById",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "valueId",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getValueIdHashById",
      "longname": "TcpConnection#getValueIdHashById",
      "kind": "function",
      "description": "Sends a Datagram to lookup a value ID hash in a device.\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise the resolves to the received Datagram or `null` on timeout."
        }
      ],
      "memberof": "TcpConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to lookup the value in.",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The ID of the value to lookup in the device.",
          "name": "valueId"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to lookup the value.",
          "name": "options.tries"
        }
      ],
      "inherits": "Connection#getValueIdHashById",
      "inherited": true,
      "___id": "T000002R299929",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to lookup a value ID in a device.\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param  {number} address The VBus address of the device to lookup the value in.\n     * @param  {number} valueIdHash The ID hash of the value to lookup in the device.\n     * @param  {object} options\n     * @param  {number} options.timeout=500 Time in milliseconds between tries.\n     * @param {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param  {number} options.tries=3 Number of tries to lookup the value.\n     * @return {Promise} A Promise the resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          21792,
          22833
        ],
        "filename": "connection.js",
        "lineno": 623,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100664730",
          "name": "Connection#getValueIdByIdHash",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "valueIdHash",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getValueIdByIdHash",
      "longname": "TcpConnection#getValueIdByIdHash",
      "kind": "function",
      "description": "Sends a Datagram to lookup a value ID in a device.\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise the resolves to the received Datagram or `null` on timeout."
        }
      ],
      "memberof": "TcpConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to lookup the value in.",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The ID hash of the value to lookup in the device.",
          "name": "valueIdHash"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to lookup the value.",
          "name": "options.tries"
        }
      ],
      "inherits": "Connection#getValueIdByIdHash",
      "inherited": true,
      "___id": "T000002R299930",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to lookup the controller's capabilities (part 1).\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param  {number} address The VBus address of the device to get the capabilities from.\n     * @param  {object} options\n     * @param  {number} options.timeout=500 Time in milliseconds between tries.\n     * @param  {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param  {number} options.tries=3 Number of tries to lookup the value.\n     * @return {Promise} A Promise the resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          23510,
          24400
        ],
        "filename": "connection.js",
        "lineno": 668,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100664836",
          "name": "Connection#getCaps1",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "getCaps1",
      "longname": "TcpConnection#getCaps1",
      "kind": "function",
      "description": "Sends a Datagram to lookup the controller's capabilities (part 1).\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise the resolves to the received Datagram or `null` on timeout."
        }
      ],
      "memberof": "TcpConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to get the capabilities from.",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to lookup the value.",
          "name": "options.tries"
        }
      ],
      "inherits": "Connection#getCaps1",
      "inherited": true,
      "___id": "T000002R299931",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to begin a bulk valke transaction.\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param  {number} address The VBus address of the device to begin the transaction on.\n     * @param  {number} txTimeout The number of seconds of inactivity after which the transaction is rolled back.\n     * @param  {object} options\n     * @param  {number} options.timeout=500 Time in milliseconds between tries.\n     * @param  {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param  {number} options.tries=3 Number of tries to lookup the value.\n     * @return {Promise} A Promise the resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          25175,
          26100
        ],
        "filename": "connection.js",
        "lineno": 712,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100664928",
          "name": "Connection#beginBulkValueTransaction",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "txTimeout",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "beginBulkValueTransaction",
      "longname": "TcpConnection#beginBulkValueTransaction",
      "kind": "function",
      "description": "Sends a Datagram to begin a bulk valke transaction.\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise the resolves to the received Datagram or `null` on timeout."
        }
      ],
      "memberof": "TcpConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to begin the transaction on.",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The number of seconds of inactivity after which the transaction is rolled back.",
          "name": "txTimeout"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to lookup the value.",
          "name": "options.tries"
        }
      ],
      "inherits": "Connection#beginBulkValueTransaction",
      "inherited": true,
      "___id": "T000002R299932",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to commit a bulk valke transaction.\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param  {number} address The VBus address of the device to commit the transaction on.\n     * @param  {object} options\n     * @param  {number} options.timeout=500 Time in milliseconds between tries.\n     * @param  {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param  {number} options.tries=3 Number of tries to lookup the value.\n     * @return {Promise} A Promise the resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          26763,
          27670
        ],
        "filename": "connection.js",
        "lineno": 755,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665021",
          "name": "Connection#commitBulkValueTransaction",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "commitBulkValueTransaction",
      "longname": "TcpConnection#commitBulkValueTransaction",
      "kind": "function",
      "description": "Sends a Datagram to commit a bulk valke transaction.\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise the resolves to the received Datagram or `null` on timeout."
        }
      ],
      "memberof": "TcpConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to commit the transaction on.",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to lookup the value.",
          "name": "options.tries"
        }
      ],
      "inherits": "Connection#commitBulkValueTransaction",
      "inherited": true,
      "___id": "T000002R299933",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to rollback a bulk valke transaction.\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param  {number} address The VBus address of the device to perform the rollback on.\n     * @param  {object} options\n     * @param  {number} options.timeout=500 Time in milliseconds between tries.\n     * @param  {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param  {number} options.tries=3 Number of tries to lookup the value.\n     * @return {Promise} A Promise the resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          28333,
          29242
        ],
        "filename": "connection.js",
        "lineno": 798,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665113",
          "name": "Connection#rollbackBulkValueTransaction",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "rollbackBulkValueTransaction",
      "longname": "TcpConnection#rollbackBulkValueTransaction",
      "kind": "function",
      "description": "Sends a Datagram to rollback a bulk valke transaction.\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise the resolves to the received Datagram or `null` on timeout."
        }
      ],
      "memberof": "TcpConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to perform the rollback on.",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to lookup the value.",
          "name": "options.tries"
        }
      ],
      "inherits": "Connection#rollbackBulkValueTransaction",
      "inherited": true,
      "___id": "T000002R299934",
      "___s": true
    },
    {
      "comment": "/**\n     * Sends a Datagram to set a value during a bulk value transaction.\n     * Returns a Promise that resolves to the answer Datagram or `null` on timeout.\n     *\n     * @param  {number} address The VBus address of the device to set the value on.\n     * @param  {number} valueId The ID of the value to write to the device.\n     * @param  {number} value The value to write to the device.\n     * @param  {object} options\n     * @param  {number} options.timeout=500 Time in milliseconds between tries.\n     * @param  {number} options.timeoutIncr=500 Additional time in milliseconds to increase the timeout per try.\n     * @param  {number} options.tries=3 Number of tries to lookup the value.\n     * @return {Promise} A Promise the resolves to the received Datagram or `null` on timeout.\n     */",
      "meta": {
        "range": [
          30048,
          31145
        ],
        "filename": "connection.js",
        "lineno": 843,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665205",
          "name": "Connection#setBulkValueById",
          "type": "MethodDefinition",
          "paramnames": [
            "address",
            "valueId",
            "value",
            "options"
          ]
        },
        "vars": {
          "": null
        }
      },
      "name": "setBulkValueById",
      "longname": "TcpConnection#setBulkValueById",
      "kind": "function",
      "description": "Sends a Datagram to set a value during a bulk value transaction.\nReturns a Promise that resolves to the answer Datagram or `null` on timeout.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "A Promise the resolves to the received Datagram or `null` on timeout."
        }
      ],
      "memberof": "TcpConnection",
      "scope": "instance",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The VBus address of the device to set the value on.",
          "name": "address"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The ID of the value to write to the device.",
          "name": "valueId"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "The value to write to the device.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Time in milliseconds between tries.",
          "name": "options.timeout"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 500,
          "description": "Additional time in milliseconds to increase the timeout per try.",
          "name": "options.timeoutIncr"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "defaultvalue": 3,
          "description": "Number of tries to lookup the value.",
          "name": "options.tries"
        }
      ],
      "inherits": "Connection#setBulkValueById",
      "inherited": true,
      "___id": "T000002R299935",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates a promise that resolves when this Connection\n     * instance is connected and rejects if it is disconnected.\n     * If it is neither connected nor disconnected the promise\n     * will stay pending until one of the states is entered.\n     *\n     * @returns {Promise}\n     */",
      "meta": {
        "range": [
          33332,
          34263
        ],
        "filename": "connection.js",
        "lineno": 952,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665508",
          "name": "Connection#createConnectedPromise",
          "type": "MethodDefinition",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "name": "createConnectedPromise",
      "longname": "TcpConnection#createConnectedPromise",
      "kind": "function",
      "description": "Creates a promise that resolves when this Connection\ninstance is connected and rejects if it is disconnected.\nIf it is neither connected nor disconnected the promise\nwill stay pending until one of the states is entered.",
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "memberof": "TcpConnection",
      "scope": "instance",
      "inherits": "Connection#createConnectedPromise",
      "inherited": true,
      "___id": "T000002R299936",
      "___s": true
    },
    {
      "comment": "/**\n     * Reference to this instance's DataSource.\n     * @type {DataSource}\n     */",
      "meta": {
        "range": [
          34437,
          34453
        ],
        "filename": "connection.js",
        "lineno": 989,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665601",
          "name": "dataSource",
          "type": "Literal",
          "value": null
        }
      },
      "name": "dataSource",
      "longname": "TcpConnection#dataSource",
      "kind": "member",
      "description": "Reference to this instance's DataSource.",
      "type": {
        "names": [
          "DataSource"
        ]
      },
      "memberof": "TcpConnection",
      "scope": "instance",
      "inherits": "Connection#dataSource",
      "inherited": true,
      "___id": "T000002R299937",
      "___s": true
    },
    {
      "comment": "/**\n     * The VBus address used for sending information over this connection.\n     * @type {number}\n     */",
      "meta": {
        "range": [
          34803,
          34822
        ],
        "filename": "connection.js",
        "lineno": 1003,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665605",
          "name": "selfAddress",
          "type": "Literal",
          "value": 32
        }
      },
      "name": "selfAddress",
      "longname": "TcpConnection#selfAddress",
      "kind": "member",
      "description": "The VBus address used for sending information over this connection.",
      "type": {
        "names": [
          "number"
        ]
      },
      "memberof": "TcpConnection",
      "scope": "instance",
      "inherits": "Connection#selfAddress",
      "inherited": true,
      "___id": "T000002R299938",
      "___s": true
    },
    {
      "comment": "/**\n     * The current connection state.\n     * @type {string}\n     */",
      "meta": {
        "range": [
          34904,
          34946
        ],
        "filename": "connection.js",
        "lineno": 1009,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665607",
          "name": "connectionState",
          "type": "MemberExpression",
          "value": "states.STATE_DISCONNECTED"
        }
      },
      "name": "connectionState",
      "longname": "TcpConnection#connectionState",
      "kind": "member",
      "description": "The current connection state.",
      "type": {
        "names": [
          "string"
        ]
      },
      "memberof": "TcpConnection",
      "scope": "instance",
      "inherits": "Connection#connectionState",
      "inherited": true,
      "___id": "T000002R299939",
      "___s": true
    },
    {
      "comment": "/**\n     * The internal receive buffer of this conneciton.\n     * @type {Buffer}\n     */",
      "meta": {
        "range": [
          35046,
          35060
        ],
        "filename": "connection.js",
        "lineno": 1015,
        "columnno": 4,
        "path": "/Users/daniel/Projects/Privat/resol-vbus-docs/public/resol-vbus/src",
        "code": {
          "id": "astnode100665611",
          "name": "rxBuffer",
          "type": "Literal",
          "value": null
        }
      },
      "name": "rxBuffer",
      "longname": "TcpConnection#rxBuffer",
      "kind": "member",
      "description": "The internal receive buffer of this conneciton.",
      "type": {
        "names": [
          "Buffer"
        ]
      },
      "memberof": "TcpConnection",
      "scope": "instance",
      "inherits": "Connection#rxBuffer",
      "inherited": true,
      "___id": "T000002R299940",
      "___s": true
    }
  ]
}